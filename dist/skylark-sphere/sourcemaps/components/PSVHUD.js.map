{"version":3,"sources":["components/PSVHUD.js"],"names":["define","THREE","PhotoSphereViewer","PSVError","PSVUtils","PSVMarker","PSVComponent","PSVHUD","psv","call","this","svgContainer","markers","currentMarker","hoveringMarker","prop","panelOpened","panelOpening","markersButton","navbar","getNavbarButton","create","prototype","Object","constructor","className","publicMethods","document","createElementNS","svgNS","setAttribute","container","appendChild","addEventListener","on","destroy","clearMarkers","removeEventListener","off","handleEvent","e","type","_onMouseEnter","_onMouseLeave","_onMouseMove","_onClick","args","renderMarkers","_onPanelOpened","_onPanelClosed","addMarker","properties","render","id","marker","isNormal","$el","getMarker","markerId","getCurrentMarker","updateMarker","update","removeMarker","removeChild","tooltip","hideTooltip","keys","forEach","gotoMarker","duration","animate","then","trigger","bind","hideMarker","visible","showMarker","toggleMarker","toggleMarkersList","hideMarkersList","showMarkersList","push","html","config","templates","markersList","panel","showPanel","querySelector","_onClickItem","hidePanel","rotation","isGyroscopeEnabled","Math","radToDeg","camera","z","isVisible","isPoly","positions","_getPolyPositions","length","isPolygon","position2D","_getPolyDimensions","points","map","pos","x","y","join","setAttributeNS","position","_getMarkerPosition","_isMarkerVisible","scale","getScale","getZoomLevel","isSvg","lockRotation","style","transform","toggleClass","position3D","dot","direction","width","size","height","_dynamicSize","rect","getBoundingClientRect","right","left","bottom","top","vector3ToViewerCoords","anchor","nbVectors","positions3D","vector","toBeComputed","i","neighbour","invisible","index","reverse","pair","splice","_getPolyIntermediaryPoint","filter","P1","P2","C","clone","normalize","N","Vector3","crossVectors","V","H","addVectors","multiplyScalar","a","applyAxisAngle","SPHERE_RADIUS","minX","Infinity","minY","maxX","maxY","min","max","target","psvMarker","showTooltip","content","box","relatedTarget","hasParent","moving","boundingRect","clientY","arrow_size","clientX","data","dblclick","getClosest","click_event_on_marker","stopImmediatePropagation","opened","stopPropagation","li","dataset","toggleActive"],"mappings":"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","file":"../../components/PSVHUD.js","sourcesContent":["define([\n  \"skylark-threejs\",\n  \"../_psv/ctoc\",\n  \"../PSVError\",\n  \"../PSVUtils\",\n  \"../PSVMarker\",\n  \"./PSVComponent\"\n],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVError,\n  PSVUtils,\n  PSVMarker,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * HUD class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVHUD(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @member {SVGElement}\n     * @readonly\n     */\n    this.svgContainer = null;\n\n    /**\n     * @summary All registered markers\n     * @member {Object.<string, PSVMarker>}\n     */\n    this.markers = {};\n\n    /**\n     * @summary Last selected marker\n     * @member {PSVMarker}\n     * @readonly\n     */\n    this.currentMarker = null;\n\n    /**\n     * @summary Marker under the cursor\n     * @member {PSVMarker}\n     * @readonly\n     */\n    this.hoveringMarker = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      panelOpened: false,\n      panelOpening: false,\n      markersButton: this.psv.navbar.getNavbarButton('markers', true)\n    };\n\n    this.create();\n  }\n\n  PSVHUD.prototype = Object.create(PSVComponent.prototype);\n  PSVHUD.prototype.constructor = PSVHUD;\n\n  PSVHUD.className = 'psv-hud';\n  PSVHUD.publicMethods = [\n    'addMarker',\n    'removeMarker',\n    'updateMarker',\n    'clearMarkers',\n    'getMarker',\n    'getCurrentMarker',\n    'gotoMarker',\n    'hideMarker',\n    'showMarker',\n    'toggleMarker',\n    'toggleMarkersList',\n    'showMarkersList',\n    'hideMarkersList'\n  ];\n\n  /**\n   * @override\n   */\n  PSVHUD.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.svgContainer = document.createElementNS(PSVUtils.svgNS, 'svg');\n    this.svgContainer.setAttribute('class', 'psv-hud-svg-container');\n    this.container.appendChild(this.svgContainer);\n\n    // Markers events via delegation\n    this.container.addEventListener('mouseenter', this, true);\n    this.container.addEventListener('mouseleave', this, true);\n    this.container.addEventListener('mousemove', this, true);\n\n    // Viewer events\n    this.psv.on('click', this);\n    this.psv.on('dblclick', this);\n    this.psv.on('render', this);\n    this.psv.on('open-panel', this);\n    this.psv.on('close-panel', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVHUD.prototype.destroy = function() {\n    this.clearMarkers(false);\n\n    this.container.removeEventListener('mouseenter', this);\n    this.container.removeEventListener('mouseleave', this);\n    this.container.removeEventListener('mousemove', this);\n\n    this.psv.off('click', this);\n    this.psv.off('dblclick', this);\n    this.psv.off('render', this);\n    this.psv.off('open-panel', this);\n    this.psv.off('close-panel', this);\n\n    delete this.svgContainer;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVHUD.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'mouseenter':  this._onMouseEnter(e);        break;\n      case 'mouseleave':  this._onMouseLeave(e);        break;\n      case 'mousemove':   this._onMouseMove(e);         break;\n      case 'click':       this._onClick(e.args[0], e, false); break;\n      case 'dblclick':    this._onClick(e.args[0], e, true);  break;\n      case 'render':      this.renderMarkers();         break;\n      case 'open-panel':  this._onPanelOpened();        break;\n      case 'close-panel': this._onPanelClosed();        break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Adds a new marker to viewer\n   * @param {Object} properties - see {@link http://photo-sphere-viewer.js.org/markers.html#config}\n   * @param {boolean} [render=true] - renders the marker immediately\n   * @returns {PSVMarker}\n   * @throws {PSVError} when the marker's id is missing or already exists\n   */\n  PSVHUD.prototype.addMarker = function(properties, render) {\n    if (!properties.id) {\n      throw new PSVError('missing marker id');\n    }\n\n    if (this.markers[properties.id]) {\n      throw new PSVError('marker \"' + properties.id + '\" already exists');\n    }\n\n    var marker = new PSVMarker(properties, this.psv);\n\n    if (marker.isNormal()) {\n      this.container.appendChild(marker.$el);\n    }\n    else {\n      this.svgContainer.appendChild(marker.$el);\n    }\n\n    this.markers[marker.id] = marker;\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n\n    return marker;\n  };\n\n  /**\n   * @summary Returns the internal marker object for a marker id\n   * @param {*} markerId\n   * @returns {PSVMarker}\n   * @throws {PSVError} when the marker cannot be found\n   */\n  PSVHUD.prototype.getMarker = function(markerId) {\n    var id = typeof markerId === 'object' ? markerId.id : markerId;\n\n    if (!this.markers[id]) {\n      throw new PSVError('cannot find marker \"' + id + '\"');\n    }\n\n    return this.markers[id];\n  };\n\n  /**\n   * @summary Returns the last marker selected by the user\n   * @returns {PSVMarker}\n   */\n  PSVHUD.prototype.getCurrentMarker = function() {\n    return this.currentMarker;\n  };\n\n  /**\n   * @summary Updates the existing marker with the same id\n   * @description Every property can be changed but you can't change its type (Eg: `image` to `html`).\n   * @param {Object|PSVMarker} properties\n   * @param {boolean} [render=true] - renders the marker immediately\n   * @returns {PSVMarker}\n   */\n  PSVHUD.prototype.updateMarker = function(properties, render) {\n    var marker = this.getMarker(properties);\n\n    marker.update(properties);\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n\n    return marker;\n  };\n\n  /**\n   * @summary Removes a marker from the viewer\n   * @param {*} marker\n   * @param {boolean} [render=true] - renders the marker immediately\n   */\n  PSVHUD.prototype.removeMarker = function(marker, render) {\n    marker = this.getMarker(marker);\n\n    if (marker.isNormal()) {\n      this.container.removeChild(marker.$el);\n    }\n    else {\n      this.svgContainer.removeChild(marker.$el);\n    }\n\n    if (this.hoveringMarker === marker) {\n      this.psv.tooltip.hideTooltip();\n    }\n\n    marker.destroy();\n    delete this.markers[marker.id];\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n  };\n\n  /**\n   * @summary Removes all markers\n   * @param {boolean} [render=true] - renders the markers immediately\n   */\n  PSVHUD.prototype.clearMarkers = function(render) {\n    Object.keys(this.markers).forEach(function(marker) {\n      this.removeMarker(marker, false);\n    }, this);\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n  };\n\n  /**\n   * @summary Rotate the view to face the marker\n   * @param {*} marker\n   * @param {string|int} [duration] - rotates smoothy, see {@link PhotoSphereViewer#animate}\n   * @fires module:components.PSVHUD.goto-marker-done\n   * @return {Promise}  A promise that will be resolved when the animation finishes\n   */\n  PSVHUD.prototype.gotoMarker = function(marker, duration) {\n    marker = this.getMarker(marker);\n\n    return this.psv.animate(marker, duration)\n      .then(function() {\n        /**\n         * @event goto-marker-done\n         * @memberof module:components.PSVHUD\n         * @summary Triggered when the animation to a marker is done\n         * @param {PSVMarker} marker\n         */\n        this.psv.trigger('goto-marker-done', marker);\n      }.bind(this));\n  };\n\n  /**\n   * @summary Hides a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.hideMarker = function(marker) {\n    this.getMarker(marker).visible = false;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Shows a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.showMarker = function(marker) {\n    this.getMarker(marker).visible = true;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Toggles a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.toggleMarker = function(marker) {\n    this.getMarker(marker).visible ^= true;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Toggles the visibility of markers list\n   */\n  PSVHUD.prototype.toggleMarkersList = function() {\n    if (this.prop.panelOpened) {\n      this.hideMarkersList();\n    }\n    else {\n      this.showMarkersList();\n    }\n  };\n\n  /**\n   * @summary Opens side panel with list of markers\n   * @fires module:components.PSVHUD.filter:render-markers-list\n   */\n  PSVHUD.prototype.showMarkersList = function() {\n    var markers = [];\n    PSVUtils.forEach(this.markers, function(marker) {\n      markers.push(marker);\n    });\n\n    /**\n     * @event filter:render-markers-list\n     * @memberof module:components.PSVHUD\n     * @summary Used to alter the list of markers displayed on the side-panel\n     * @param {PSVMarker[]} markers\n     * @returns {PSVMarker[]}\n     */\n    var html = this.psv.config.templates.markersList({\n      markers : markers,\n//      markers: this.psv.change('render-markers-list', markers),\n      config: this.psv.config\n    });\n\n    this.prop.panelOpening = true;\n    this.psv.panel.showPanel(html, true);\n\n    this.psv.panel.container.querySelector('.psv-markers-list').addEventListener('click', this._onClickItem.bind(this));\n  };\n\n  /**\n   * @summary Closes side panel if it contains the list of markers\n   */\n  PSVHUD.prototype.hideMarkersList = function() {\n    if (this.prop.panelOpened) {\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Updates the visibility and the position of all markers\n   */\n  PSVHUD.prototype.renderMarkers = function() {\n    if (!this.visible) {\n      return;\n    }\n\n    var rotation = !this.psv.isGyroscopeEnabled() ? 0 : THREE.Math.radToDeg(this.psv.camera.rotation.z);\n\n    PSVUtils.forEach(this.markers, function(marker) {\n      var isVisible = marker.visible;\n\n      if (isVisible && marker.isPoly()) {\n        var positions = this._getPolyPositions(marker);\n        isVisible = positions.length > (marker.isPolygon() ? 2 : 1);\n\n        if (isVisible) {\n          marker.position2D = this._getPolyDimensions(marker, positions);\n\n          var points = positions.map(function(pos) {\n            return pos.x + ',' + pos.y;\n          }).join(' ');\n\n          marker.$el.setAttributeNS(null, 'points', points);\n        }\n      }\n      else if (isVisible) {\n        var position = this._getMarkerPosition(marker);\n        isVisible = this._isMarkerVisible(marker, position);\n\n        if (isVisible) {\n          marker.position2D = position;\n\n          var scale = marker.getScale(this.psv.getZoomLevel());\n\n          if (marker.isSvg()) {\n            marker.$el.setAttributeNS(null, 'transform',\n              'translate(' + position.x + ', ' + position.y + ')' +\n              (scale !== 1 ? ' scale(' + scale + ', ' + scale + ')' : '') +\n              (!marker.lockRotation && rotation ? ' rotate(' + rotation + ')' : '')\n            );\n          }\n          else {\n            marker.$el.style.transform = 'translate3D(' + position.x + 'px, ' + position.y + 'px, 0px)' +\n              (scale !== 1 ? ' scale(' + scale + ', ' + scale + ')' : '') +\n              (!marker.lockRotation && rotation ? ' rotateZ(' + rotation + 'deg)' : '');\n          }\n        }\n      }\n\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--visible', isVisible);\n    }.bind(this));\n  };\n\n  /**\n   * @summary Determines if a point marker is visible<br>\n   * It tests if the point is in the general direction of the camera, then check if it's in the viewport\n   * @param {PSVMarker} marker\n   * @param {PhotoSphereViewer.Point} position\n   * @returns {boolean}\n   * @private\n   */\n  PSVHUD.prototype._isMarkerVisible = function(marker, position) {\n    return marker.position3D.dot(this.psv.prop.direction) > 0 &&\n      position.x + marker.width >= 0 &&\n      position.x - marker.width <= this.psv.prop.size.width &&\n      position.y + marker.height >= 0 &&\n      position.y - marker.height <= this.psv.prop.size.height;\n  };\n\n  /**\n   * @summary Computes HUD coordinates of a marker\n   * @param {PSVMarker} marker\n   * @returns {PhotoSphereViewer.Point}\n   * @private\n   */\n  PSVHUD.prototype._getMarkerPosition = function(marker) {\n    if (marker._dynamicSize) {\n      // make the marker visible to get it's size\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--transparent', true);\n      var transform = marker.$el.style.transform;\n      marker.$el.style.transform = null;\n\n      var rect = marker.$el.getBoundingClientRect();\n\n      marker.$el.style.transform = transform;\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--transparent', false);\n\n      marker.width = rect.right - rect.left;\n      marker.height = rect.bottom - rect.top;\n    }\n\n    var position = this.psv.vector3ToViewerCoords(marker.position3D);\n\n    position.x -= marker.width * marker.anchor.left;\n    position.y -= marker.height * marker.anchor.top;\n\n    return position;\n  };\n\n  /**\n   * @summary Computes HUD coordinates of each point of a polygon/polyline<br>\n   * It handles points behind the camera by creating intermediary points suitable for the projector\n   * @param {PSVMarker} marker\n   * @returns {PhotoSphereViewer.Point[]}\n   * @private\n   */\n  PSVHUD.prototype._getPolyPositions = function(marker) {\n    var nbVectors = marker.positions3D.length;\n\n    // compute if each vector is visible\n    var positions3D = marker.positions3D.map(function(vector) {\n      return {\n        vector: vector,\n        visible: vector.dot(this.psv.prop.direction) > 0\n      };\n    }, this);\n\n    // get pairs of visible/invisible vectors for each invisible vector connected to a visible vector\n    var toBeComputed = [];\n    positions3D.forEach(function(pos, i) {\n      if (!pos.visible) {\n        var neighbours = [\n          i === 0 ? positions3D[nbVectors - 1] : positions3D[i - 1],\n          i === nbVectors - 1 ? positions3D[0] : positions3D[i + 1]\n        ];\n\n        neighbours.forEach(function(neighbour) {\n          if (neighbour.visible) {\n            toBeComputed.push({\n              visible: neighbour,\n              invisible: pos,\n              index: i\n            });\n          }\n        });\n      }\n    });\n\n    // compute intermediary vector for each pair (the loop is reversed for splice to insert at the right place)\n    toBeComputed.reverse().forEach(function(pair) {\n      positions3D.splice(pair.index, 0, {\n        vector: this._getPolyIntermediaryPoint(pair.visible.vector, pair.invisible.vector),\n        visible: true\n      });\n    }, this);\n\n    // translate vectors to screen pos\n    return positions3D\n      .filter(function(pos) {\n        return pos.visible;\n      })\n      .map(function(pos) {\n        return this.psv.vector3ToViewerCoords(pos.vector);\n      }, this);\n  };\n\n  /**\n   * Given one point in the same direction of the camera and one point behind the camera,\n   * computes an intermediary point on the great circle delimiting the half sphere visible by the camera.\n   * The point is shifted by .01 rad because the projector cannot handle points exactly on this circle.\n   * {@link http://math.stackexchange.com/a/1730410/327208}\n   * @param P1 {THREE.Vector3}\n   * @param P2 {THREE.Vector3}\n   * @returns {THREE.Vector3}\n   * @private\n   */\n  PSVHUD.prototype._getPolyIntermediaryPoint = function(P1, P2) {\n    var C = this.psv.prop.direction.clone().normalize();\n    var N = new THREE.Vector3().crossVectors(P1, P2).normalize();\n    var V = new THREE.Vector3().crossVectors(N, P1).normalize();\n    var H = new THREE.Vector3().addVectors(P1.clone().multiplyScalar(-C.dot(V)), V.clone().multiplyScalar(C.dot(P1))).normalize();\n    var a = new THREE.Vector3().crossVectors(H, C);\n    return H.applyAxisAngle(a, 0.01).multiplyScalar(PhotoSphereViewer.SPHERE_RADIUS);\n  };\n\n  /**\n   * @summary Computes the boundaries positions of a polygon/polyline marker\n   * @param {PSVMarker} marker - alters width and height\n   * @param {PhotoSphereViewer.Point[]} positions\n   * @returns {PhotoSphereViewer.Point}\n   * @private\n   */\n  PSVHUD.prototype._getPolyDimensions = function(marker, positions) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    positions.forEach(function(pos) {\n      minX = Math.min(minX, pos.x);\n      minY = Math.min(minY, pos.y);\n      maxX = Math.max(maxX, pos.x);\n      maxY = Math.max(maxY, pos.y);\n    });\n\n    marker.width = maxX - minX;\n    marker.height = maxY - minY;\n\n    return {\n      x: minX,\n      y: minY\n    };\n  };\n\n  /**\n   * @summary Handles mouse enter events, show the tooltip for non polygon markers\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.over-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseEnter = function(e) {\n    var marker;\n    if (e.target && (marker = e.target.psvMarker) && !marker.isPoly()) {\n      this.hoveringMarker = marker;\n\n      /**\n       * @event over-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user puts the cursor hover a marker\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('over-marker', marker);\n\n      if (marker.tooltip) {\n        this.psv.tooltip.showTooltip({\n          content: marker.tooltip.content,\n          position: marker.tooltip.position,\n          left: marker.position2D.x,\n          top: marker.position2D.y,\n          box: {\n            width: marker.width,\n            height: marker.height\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * @summary Handles mouse leave events, hide the tooltip\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.leave-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseLeave = function(e) {\n    var marker;\n    if (e.target && (marker = e.target.psvMarker)) {\n      // do not hide if we enter the tooltip itself while hovering a polygon\n      if (marker.isPoly() && e.relatedTarget && PSVUtils.hasParent(e.relatedTarget, this.psv.tooltip.container)) {\n        return;\n      }\n\n      /**\n       * @event leave-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user puts the cursor away from a marker\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('leave-marker', marker);\n\n      this.hoveringMarker = null;\n\n      this.psv.tooltip.hideTooltip();\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events, refresh the tooltip for polygon markers\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.leave-marker\n   * @fires module:components.PSVHUD.over-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseMove = function(e) {\n    if (!this.psv.prop.moving) {\n      var marker;\n\n      // do not hide if we enter the tooltip itself while hovering a polygon\n      if (e.target && (marker = e.target.psvMarker) && marker.isPoly() ||\n        e.target && PSVUtils.hasParent(e.target, this.psv.tooltip.container) && (marker = this.hoveringMarker)) {\n\n        if (!this.hoveringMarker) {\n          this.psv.trigger('over-marker', marker);\n\n          this.hoveringMarker = marker;\n        }\n\n        var boundingRect = this.psv.container.getBoundingClientRect();\n\n        if (marker.tooltip) {\n          this.psv.tooltip.showTooltip({\n            content: marker.tooltip.content,\n            position: marker.tooltip.position,\n            top: e.clientY - boundingRect.top - this.psv.config.tooltip.arrow_size / 2,\n            left: e.clientX - boundingRect.left - this.psv.config.tooltip.arrow_size,\n            box: { // separate the tooltip from the cursor\n              width: this.psv.config.tooltip.arrow_size * 2,\n              height: this.psv.config.tooltip.arrow_size * 2\n            }\n          });\n        }\n      }\n      else if (this.hoveringMarker && this.hoveringMarker.isPoly()) {\n        this.psv.trigger('leave-marker', this.hoveringMarker);\n\n        this.hoveringMarker = null;\n\n        this.psv.tooltip.hideTooltip();\n      }\n    }\n  };\n\n  /**\n   * @summary Handles mouse click events, select the marker and open the panel if necessary\n   * @param {Object} data\n   * @param {Event} e\n   * @param {boolean} dblclick\n   * @fires module:components.PSVHUD.select-marker\n   * @fires module:components.PSVHUD.unselect-marker\n   * @private\n   */\n  PSVHUD.prototype._onClick = function(data, e, dblclick) {\n    var marker;\n    if (data.target && (marker = PSVUtils.getClosest(data.target, '.psv-marker')) && marker.psvMarker) {\n      this.currentMarker = marker.psvMarker;\n\n      /**\n       * @event select-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user clicks on a marker. The marker can be retrieved from outside the event handler\n       * with {@link module:components.PSVHUD.getCurrentMarker}\n       * @param {PSVMarker} marker\n       * @param {boolean} dblclick - the simple click is always fired before the double click\n       */\n      this.psv.trigger('select-marker', this.currentMarker, dblclick);\n\n      if (this.psv.config.click_event_on_marker) {\n        // add the marker to event data\n        data.marker = marker.psvMarker;\n      }\n      else {\n        e.stopImmediatePropagation(); //stopPropagation(); modified by lwf\n      }\n    }\n    else if (this.currentMarker) {\n      /**\n       * @event unselect-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when a marker was selected and the user clicks elsewhere\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('unselect-marker', this.currentMarker);\n\n      this.currentMarker = null;\n    }\n\n    if (marker && marker.psvMarker && marker.psvMarker.content) {\n      this.psv.panel.showPanel(marker.psvMarker.content);\n    }\n    else if (this.psv.panel.prop.opened) {\n      e.stopPropagation();\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Clicks on an item\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.select-marker-list\n   * @private\n   */\n  PSVHUD.prototype._onClickItem = function(e) {\n    var li;\n    if (e.target && (li = PSVUtils.getClosest(e.target, 'li')) && li.dataset.psvMarker) {\n      var marker = this.getMarker(li.dataset.psvMarker);\n\n      /**\n       * @event select-marker-list\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when a marker is selected from the side panel\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('select-marker-list', marker);\n\n      this.gotoMarker(marker, 1000);\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Updates status when the panel is updated\n   * @private\n   */\n  PSVHUD.prototype._onPanelOpened = function() {\n    if (this.prop.panelOpening) {\n      this.prop.panelOpening = false;\n      this.prop.panelOpened = true;\n    }\n    else {\n      this.prop.panelOpened = false;\n    }\n\n    if (this.prop.markersButton) {\n      this.prop.markersButton.toggleActive(this.prop.panelOpened);\n    }\n  };\n\n  /**\n   * @summary Updates status when the panel is updated\n   * @private\n   */\n  PSVHUD.prototype._onPanelClosed = function() {\n    this.prop.panelOpened = false;\n    this.prop.panelOpening = false;\n\n    if (this.prop.markersButton) {\n      this.prop.markersButton.toggleActive(false);\n    }\n  };\n\n  return PSVHUD;\n});\n\n"]}