{"version":3,"sources":["components/PSVTooltip.js"],"names":["define","PhotoSphereViewer","PSVUtils","PSVComponent","PSVTooltip","hud","call","this","config","psv","tooltip","prop","timeout","create","prototype","Object","constructor","className","publicMethods","leftMap","0","0.5","1","topMap","container","innerHTML","style","top","left","content","querySelector","arrow","on","destroy","off","handleEvent","e","type","hideTooltip","isTooltipVisible","classList","contains","showTooltip","window","clearTimeout","isUpdate","t","c","a","position","box","width","height","tempPos","parsePosition","PSVError","i","length","item","remove","addClasses","rect","getBoundingClientRect","posClass","slice","right","bottom","arrow_top","arrow_left","_computeTooltipPosition","refresh","offset","size","add","join","setTimeout","trigger","bind","delay","topBottom","arrow_size"],"mappings":"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","file":"../../components/PSVTooltip.js","sourcesContent":["define([\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Tooltip class\n   * @param {module:components.PSVHUD} hud\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVTooltip(hud) {\n    PSVComponent.call(this, hud);\n\n    /**\n     * @member {Object}\n     * @readonly\n     * @private\n     */\n    this.config = this.psv.config.tooltip;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      timeout: null\n    };\n\n    this.create();\n  }\n\n  PSVTooltip.prototype = Object.create(PSVComponent.prototype);\n  PSVTooltip.prototype.constructor = PSVTooltip;\n\n  PSVTooltip.className = 'psv-tooltip';\n  PSVTooltip.publicMethods = ['showTooltip', 'hideTooltip', 'isTooltipVisible'];\n\n  PSVTooltip.leftMap = { 0: 'left', 0.5: 'center', 1: 'right' };\n  PSVTooltip.topMap = { 0: 'top', 0.5: 'center', 1: 'bottom' };\n\n  /**\n   * @override\n   */\n  PSVTooltip.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.container.innerHTML = '<div class=\"psv-tooltip-arrow\"></div><div class=\"psv-tooltip-content\"></div>';\n    this.container.style.top = '-1000px';\n    this.container.style.left = '-1000px';\n\n    this.content = this.container.querySelector('.psv-tooltip-content');\n    this.arrow = this.container.querySelector('.psv-tooltip-arrow');\n\n    this.psv.on('render', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVTooltip.prototype.destroy = function() {\n    this.psv.off('render', this);\n\n    delete this.config;\n    delete this.prop;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVTooltip.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'render': this.hideTooltip(); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Checks if the tooltip is visible\n   * @returns {boolean}\n   */\n  PSVTooltip.prototype.isTooltipVisible = function() {\n    return this.container.classList.contains('psv-tooltip--visible');\n  };\n\n  /**\n   * @summary Displays a tooltip on the viewer\n   * @param {Object} config\n   * @param {string} config.content - HTML content of the tootlip\n   * @param {int} config.top - Position of the tip of the arrow of the tooltip, in pixels\n   * @param {int} config.left - Position of the tip of the arrow of the tooltip, in pixels\n   * @param {string} [config.position='top center'] - Tooltip position toward it's arrow tip.\n   *                                                  Accepted values are combinations of `top`, `center`, `bottom`\n   *                                                  and `left`, `center`, `right`\n   * @param {string} [config.className] - Additional CSS class added to the tooltip\n   * @param {Object} [config.box] - Used when displaying a tooltip on a marker\n   * @param {int} [config.box.width=0]\n   * @param {int} [config.box.height=0]\n   * @fires module:components.PSVTooltip.show-tooltip\n   * @throws {PSVError} when the configuration is incorrect\n   *\n   * @example\n   * viewer.showTooltip({ content: 'Hello world', top: 200, left: 450, position: 'center bottom'})\n   */\n  PSVTooltip.prototype.showTooltip = function(config) {\n    if (this.prop.timeout) {\n      window.clearTimeout(this.prop.timeout);\n      this.prop.timeout = null;\n    }\n\n    var isUpdate = this.isTooltipVisible();\n    var t = this.container;\n    var c = this.content;\n    var a = this.arrow;\n\n    if (!config.position) {\n      config.position = ['top', 'center'];\n    }\n\n    if (!config.box) {\n      config.box = {\n        width: 0,\n        height: 0\n      };\n    }\n\n    // parse position\n    if (typeof config.position === 'string') {\n      var tempPos = PSVUtils.parsePosition(config.position);\n\n      if (!(tempPos.left in PSVTooltip.leftMap) || !(tempPos.top in PSVTooltip.topMap)) {\n        throw new PSVError('unable to parse tooltip position \"' + config.position + '\"');\n      }\n\n      config.position = [PSVTooltip.topMap[tempPos.top], PSVTooltip.leftMap[tempPos.left]];\n    }\n\n    if (config.position[0] === 'center' && config.position[1] === 'center') {\n      throw new PSVError('unable to parse tooltip position \"center center\"');\n    }\n\n    if (isUpdate) {\n      // Remove every other classes (Firefox does not implements forEach)\n      for (var i = t.classList.length - 1; i >= 0; i--) {\n        var item = t.classList.item(i);\n        if (item !== 'psv-tooltip' && item !== 'psv-tooltip--visible') {\n          t.classList.remove(item);\n        }\n      }\n    }\n    else {\n      t.className = 'psv-tooltip'; // reset the class\n    }\n\n    if (config.className) {\n      PSVUtils.addClasses(t, config.className);\n    }\n\n    c.innerHTML = config.content;\n    t.style.top = '0px';\n    t.style.left = '0px';\n\n    // compute size\n    var rect = t.getBoundingClientRect();\n    var style = {\n      posClass: config.position.slice(),\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top,\n      top: 0,\n      left: 0,\n      arrow_top: 0,\n      arrow_left: 0\n    };\n\n    // set initial position\n    this._computeTooltipPosition(style, config);\n\n    // correct position if overflow\n    var refresh = false;\n    if (style.top < this.config.offset) {\n      style.posClass[0] = 'bottom';\n      refresh = true;\n    }\n    else if (style.top + style.height > this.psv.prop.size.height - this.config.offset) {\n      style.posClass[0] = 'top';\n      refresh = true;\n    }\n    if (style.left < this.config.offset) {\n      style.posClass[1] = 'right';\n      refresh = true;\n    }\n    else if (style.left + style.width > this.psv.prop.size.width - this.config.offset) {\n      style.posClass[1] = 'left';\n      refresh = true;\n    }\n    if (refresh) {\n      this._computeTooltipPosition(style, config);\n    }\n\n    // apply position\n    t.style.top = style.top + 'px';\n    t.style.left = style.left + 'px';\n\n    a.style.top = style.arrow_top + 'px';\n    a.style.left = style.arrow_left + 'px';\n\n    t.classList.add('psv-tooltip--' + style.posClass.join('-'));\n\n    // delay for correct transition between the two classes\n    if (!isUpdate) {\n      this.prop.timeout = window.setTimeout(function() {\n        t.classList.add('psv-tooltip--visible');\n        this.prop.timeout = null;\n\n        /**\n         * @event show-tooltip\n         * @memberof module:components.PSVTooltip\n         * @summary Trigered when the tooltip is shown\n         */\n        this.psv.trigger('show-tooltip');\n      }.bind(this), this.config.delay);\n    }\n  };\n\n  /**\n   * @summary Hides the tooltip\n   * @fires module:components.PSVTooltip.hide-tooltip\n   */\n  PSVTooltip.prototype.hideTooltip = function() {\n    if (this.prop.timeout) {\n      window.clearTimeout(this.prop.timeout);\n      this.prop.timeout = null;\n    }\n\n    if (this.isTooltipVisible()) {\n      this.container.classList.remove('psv-tooltip--visible');\n\n      this.prop.timeout = window.setTimeout(function() {\n        this.content.innerHTML = null;\n        this.container.style.top = '-1000px';\n        this.container.style.left = '-1000px';\n        this.prop.timeout = null;\n      }.bind(this), this.config.delay);\n\n      /**\n       * @event hide-tooltip\n       * @memberof module:components.PSVTooltip\n       * @summary Trigered when the tooltip is hidden\n       */\n      this.psv.trigger('hide-tooltip');\n    }\n  };\n\n  /**\n   * @summary Computes the position of the tooltip and its arrow\n   * @param {Object} style\n   * @param {Object} config\n   * @private\n   */\n  PSVTooltip.prototype._computeTooltipPosition = function(style, config) {\n    var topBottom = false;\n\n    switch (style.posClass[0]) {\n      case 'bottom':\n        style.top = config.top + config.box.height + this.config.offset + this.config.arrow_size;\n        style.arrow_top = -this.config.arrow_size * 2;\n        topBottom = true;\n        break;\n\n      case 'center':\n        style.top = config.top + config.box.height / 2 - style.height / 2;\n        style.arrow_top = style.height / 2 - this.config.arrow_size;\n        break;\n\n      case 'top':\n        style.top = config.top - style.height - this.config.offset - this.config.arrow_size;\n        style.arrow_top = style.height;\n        topBottom = true;\n        break;\n    }\n\n    switch (style.posClass[1]) {\n      case 'right':\n        if (topBottom) {\n          style.left = config.left + config.box.width / 2 - this.config.offset - this.config.arrow_size;\n          style.arrow_left = this.config.offset;\n        }\n        else {\n          style.left = config.left + config.box.width + this.config.offset + this.config.arrow_size;\n          style.arrow_left = -this.config.arrow_size * 2;\n        }\n        break;\n\n      case 'center':\n        style.left = config.left + config.box.width / 2 - style.width / 2;\n        style.arrow_left = style.width / 2 - this.config.arrow_size;\n        break;\n\n      case 'left':\n        if (topBottom) {\n          style.left = config.left - style.width + config.box.width / 2 + this.config.offset + this.config.arrow_size;\n          style.arrow_left = style.width - this.config.offset - this.config.arrow_size * 2;\n        }\n        else {\n          style.left = config.left - style.width - this.config.offset - this.config.arrow_size;\n          style.arrow_left = style.width;\n        }\n        break;\n    }\n  };\n\n  return PSVTooltip;\n});\n  "]}