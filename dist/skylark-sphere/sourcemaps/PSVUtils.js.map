{"version":3,"sources":["PSVUtils.js"],"names":["define","types","objects","strings","funcs","noder","styler","finder","mouse","touch","orientation","webgl","THREE","DeviceOrientationControls","StereoEffect","PhotoSphereViewer","PSVUtils","Utils","TwoPI","Math","PI","HalfPI","svgNS","checkTHREE","components","i","l","arguments","length","isCanvasSupported","canvas","document","createElement","getContext","getWebGLCtx","isWebGLSupported","isDeviceOrientationSupported","isTouchEnabled","getMaxTextureWidth","toggleClass","addClasses","addClass","removeClasses","removeClass","hasParent","isChildOf","getClosest","closest","mouseWheelEvent","getEventKey","evt","key","KEYMAP","keyCode","which","MS_KEYMAP","13","27","32","33","34","37","38","39","40","46","107","109","Add","Del","Down","Esc","Left","Right","Spacebar","Subtract","Up","fullscreenEvent","map","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","exit","hasOwnProperty","bound","x","min","max","isInteger","Number","value","isFinite","floor","sum","array","reduce","a","b","dasherize","getXMPValue","data","attr","result","match","isFullscreenEnabled","elt","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","call","getStyle","css","getShortestArc","from","to","candidate","abs","Infinity","getAngle","position1","position2","acos","cos","latitude","longitude","sin","parsePosition","top","left","tokens","toLocaleLowerCase","split","slice","undefined","positions","xFirst","token","reverse","parsed","join","bottom","right","center","parseSpeed","speed","toString","trim","speed_value","parseFloat","replace","speed_unit","degToRad","PSVError","parseAngle","angle","zeroCenter","halfCircle","toLowerCase","unit","cleanTHREEScene","scene","children","forEach","item","Mesh","geometry","dispose","material","materials","throttle","debounce","isPlainObject","deepmerge","target","src","mixin","clone","normalizeWheel","object","callback","each"],"mappings":";;;;;;;AAAAA,QACE,sBACA,wBACA,wBACA,sBACA,qBACA,sBACA,sBACA,+BACA,+BACA,8BACA,wBACA,kBACA,wDACA,0CACA,eACA,SACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,aACAH,EAAMC,0BAA4BA,EAClCD,EAAME,aAAeA,EAMrB,IAAIE,KAilBJ,OAzkBAD,EAAkBE,MAAQD,EAO1BA,EAASE,MAAkB,EAAVC,KAAKC,GAOtBJ,EAASK,OAASF,KAAKC,GAAK,EAO5BJ,EAASM,MAAQ,6BAOjBN,EAASO,WAAa,SAASC,GAC7B,IAAK,IAAIC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAC3C,KAAME,UAAUF,KAAMb,GACpB,OAAO,EAIX,OAAO,GAOTI,EAASa,kBAAoB,WAC3B,IAAIC,EAASC,SAASC,cAAc,UACpC,SAAUF,EAAOG,aAAcH,EAAOG,WAAW,QAOnDjB,EAASkB,YAAcvB,EAAMuB,YAM7BlB,EAASmB,iBAAmBxB,EAAMwB,iBAOlCnB,EAASoB,6BAA+B1B,EAAY0B,6BAKpDpB,EAASqB,eAAiB5B,EAAM4B,eAMhCrB,EAASsB,mBAAqB3B,EAAM2B,mBAQpCtB,EAASuB,YAAajC,EAAOiC,YAM7BvB,EAASwB,WAAalC,EAAOmC,SAO7BzB,EAAS0B,cAAiBpC,EAAOqC,YAOjC3B,EAAS4B,UAAYvC,EAAMwC,UAQ3B7B,EAAS8B,WAAavC,EAAOwC,QAO7B/B,EAASgC,gBAAkBxC,EAAMwC,gBAMjChC,EAASiC,YAAc,SAASC,GAC9B,IAAIC,EAAMD,EAAIC,KAAOnC,EAASiC,YAAYG,OAAOF,EAAIG,SAAWH,EAAII,OAMpE,OAJIH,GAAOnC,EAASiC,YAAYM,UAAUJ,KACxCA,EAAMnC,EAASiC,YAAYM,UAAUJ,IAGhCA,GASTnC,EAASiC,YAAYG,QACnBI,GAAI,QACJC,GAAI,SACJC,GAAI,IACJC,GAAI,SACJC,GAAI,WACJC,GAAI,YACJC,GAAI,UACJC,GAAI,aACJC,GAAI,YACJC,GAAI,SACJC,IAAK,IACLC,IAAK,KAUPnD,EAASiC,YAAYM,WACnBa,IAAK,IACLC,IAAK,SACLC,KAAM,YACNC,IAAK,SACLC,KAAM,YACNC,MAAO,aACPC,SAAU,IACVC,SAAU,IACVC,GAAI,WAON5D,EAAS6D,gBAAkB,WACzB,IAAIC,GACFC,eAAkB,mBAClBC,qBAAwB,yBACxBC,oBAAuB,sBACvBC,iBAAoB,sBAGtB,IAAK,IAAIC,KAAQL,EACf,GAAIA,EAAIM,eAAeD,IAASA,KAAQpD,SACtC,OAAO+C,EAAIK,GAIf,OAAO,MAUTnE,EAASqE,MAAQ,SAASC,EAAGC,EAAKC,GAChC,OAAOrE,KAAKqE,IAAID,EAAKpE,KAAKoE,IAAIC,EAAKF,KASrCtE,EAASyE,UAAYC,OAAOD,WAAa,SAASE,GAC9C,MAAwB,iBAAVA,GAAsBC,SAASD,IAAUxE,KAAK0E,MAAMF,KAAWA,GAQjF3E,EAAS8E,IAAM,SAASC,GACtB,OAAOA,EAAMC,OAAO,SAASC,EAAGC,GAC9B,OAAOD,EAAIC,GACV,IASLlF,EAASmF,UAAYhG,EAAQgG,UAQ7BnF,EAASoF,YAAc,SAASC,EAAMC,GACpC,IAAIC,EAEJ,OAA+E,QAA1EA,EAASF,EAAKG,MAAM,UAAYF,EAAO,gBAAkBA,EAAO,MAC5DC,EAAO,GAGiD,QAAvDA,EAASF,EAAKG,MAAM,SAAWF,EAAO,aACvCC,EAAO,GAGP,MASXvF,EAASyF,oBAAsB,SAASC,GACtC,OAAQ3E,SAAS4E,mBAAqB5E,SAAS6E,sBAAwB7E,SAAS8E,yBAA2B9E,SAAS+E,uBAAyBJ,GAO/I1F,EAAS+F,kBAAoB,SAASL,IACnCA,EAAIK,mBAAqBL,EAAIM,sBAAwBN,EAAIO,yBAA2BP,EAAIQ,qBAAqBC,KAAKT,IAMrH1F,EAAS+D,eAAiB,YACvBhD,SAASgD,gBAAkBhD,SAASkD,qBAAuBlD,SAASiD,sBAAwBjD,SAASmD,kBAAkBiC,KAAKpF,WAS/Hf,EAASoG,SAAW9G,EAAO+G,IAQ3BrG,EAASsG,eAAiB,SAASC,EAAMC,GAOvC,OALE,EACAxG,EAASE,OACRF,EAASE,OAGO8E,OAAO,SAASL,EAAO8B,GAExC,OADAA,EAAYD,EAAKD,EAAOE,EACjBtG,KAAKuG,IAAID,GAAatG,KAAKuG,IAAI/B,GAAS8B,EAAY9B,GAC1DgC,EAAAA,IASL3G,EAAS4G,SAAW,SAASC,EAAWC,GACtC,OAAO3G,KAAK4G,KACV5G,KAAK6G,IAAIH,EAAUI,UACnB9G,KAAK6G,IAAIF,EAAUG,UACnB9G,KAAK6G,IAAIH,EAAUK,UAAYJ,EAAUI,WACzC/G,KAAKgH,IAAIN,EAAUI,UACnB9G,KAAKgH,IAAIL,EAAUG,YAWvBjH,EAASoH,cAAgB,SAASzC,GAChC,IAAKA,EACH,OAAS0C,IAAK,GAAKC,KAAM,IAG3B,GAAqB,iBAAV3C,EACT,OAAOA,EAGT,IAAI4C,EAAS5C,EAAM6C,oBAAoBC,MAAM,KAAKC,MAAM,EAAG,GAErC,IAAlBH,EAAO3G,SAEP2G,OADkDI,IAAhD3H,EAASoH,cAAcQ,UAAUL,EAAO,KAChCA,EAAO,GAAI,WAGXA,EAAO,GAAIA,EAAO,KAIhC,IAAIM,EAAuB,SAAdN,EAAO,IAA+B,UAAdA,EAAO,IAAgC,QAAdA,EAAO,IAA8B,WAAdA,EAAO,GAE5FA,EAASA,EAAOzD,IAAI,SAASgE,GAC3B,OAAO9H,EAASoH,cAAcQ,UAAUE,IAAUA,IAG/CD,GACHN,EAAOQ,UAGT,IAAIC,EAAST,EAAOU,KAAK,KAAKzC,MAAM,2BAEpC,OAAIwC,GAEAV,KAAMU,EAAO,GAAK,IAClBX,IAAKW,EAAO,GAAK,MAIVX,IAAK,GAAKC,KAAM,KAI7BtH,EAASoH,cAAcQ,WAAcP,IAAO,KAAMa,OAAU,OAAQZ,KAAQ,KAAMa,MAAS,OAAQC,OAAU,OAQ7GpI,EAASqI,WAAa,SAASC,GAC7B,GAAqB,iBAAVA,EAAoB,CAC7BA,EAAQA,EAAMC,WAAWC,OAGzB,IAAIC,EAAcC,WAAWJ,EAAMK,QAAQ,8BAA+B,OACtEC,EAAaN,EAAMK,QAAQ,8BAA+B,MAAMH,OAQpE,OALII,EAAWpD,MAAM,sBACnBiD,GAAe,IAITG,GAEN,IAAK,MACL,IAAK,qBACL,IAAK,MACL,IAAK,qBACHN,EAAQ1I,EAAMO,KAAK0I,SAASJ,GAC5B,MAGF,IAAK,qBACL,IAAK,qBACHH,EAAQG,EACR,MAGF,IAAK,MACL,IAAK,yBACL,IAAK,MACL,IAAK,yBACHH,EAAQG,EAAczI,EAASE,MAC/B,MAGF,QACE,MAAM,IAAI4I,SAAS,uBAAyBF,EAAa,MAI/D,OAAON,GAWTtI,EAAS+I,WAAa,SAASC,EAAOC,EAAYC,GAKhD,QAJmBvB,IAAfuB,IACFA,EAAaD,GAGM,iBAAVD,EAAoB,CAC7B,IAAIxD,EAAQwD,EAAMG,cAAcX,OAAOhD,MAAM,iCAE7C,IAAKA,EACH,MAAM,IAAIsD,SAAS,kBAAoBE,EAAQ,KAGjD,IAAIrE,EAAQ+D,WAAWlD,EAAM,IACzB4D,EAAO5D,EAAM,GAEjB,GAAI4D,EACF,OAAQA,GACN,IAAK,MACL,IAAK,OACHJ,EAAQpJ,EAAMO,KAAK0I,SAASlE,GAC5B,MACF,IAAK,MACL,IAAK,OACHqE,EAAQrE,EACR,MACF,QACE,MAAM,IAAImE,SAAS,uBAAyBM,EAAO,UAIvDJ,EAAQrE,EAUZ,OANAqE,GAASC,EAAaD,EAAQ7I,KAAKC,GAAK4I,GAAShJ,EAASE,OAE9C,IACV8I,EAAQhJ,EAASE,MAAQ8I,GAGpBC,EAAajJ,EAASqE,MAAM2E,EAAQ7I,KAAKC,IAAKD,KAAKC,IAAM8I,EAAa,EAAI,GAAI/I,KAAKC,IAAM8I,EAAa,EAAI,IAAMF,GAOzHhJ,EAASqJ,gBAAkB,SAASC,GAClCA,EAAMC,SAASC,QAAQ,SAASC,GAC1BA,aAAgB7J,EAAM8J,OACpBD,EAAKE,WACPF,EAAKE,SAASC,UACdH,EAAKE,SAAW,MAGdF,EAAKI,WACHJ,EAAKI,SAASC,WAChBL,EAAKI,SAASC,UAAUN,QAAQ,SAASK,GACnCA,EAAS/F,MACX+F,EAAS/F,IAAI8F,UACbC,EAAS/F,IAAM,MAGjB+F,EAASD,YAGXH,EAAKI,SAASC,UAAUlJ,OAAS,IAG7B6I,EAAKI,SAAS/F,MAChB2F,EAAKI,SAAS/F,IAAI8F,UAClBH,EAAKI,SAAS/F,IAAM,MAGtB2F,EAAKI,SAASD,WAGhBH,EAAKI,SAAW,SAItBP,EAAMC,SAAS3I,OAAS,GAU1BZ,EAAS+J,SAAW3K,EAAM4K,SAW1BhK,EAASiK,cAAiBhL,EAAMgL,cAShCjK,EAASkK,UAAY,SAASC,EAAQC,GAEpC,OAAOlL,EAAQmL,MAAMF,EAAOC,GAAI,IASlCpK,EAASsK,MAAQpL,EAAQoL,MAUzBtK,EAASuK,eAAiB/K,EAAM+K,eAchCvK,EAASwJ,QAAU,SAASgB,EAAQC,GAClC,OAAOvL,EAAQwL,KAAKF,EAAOC,GAAS,IAG/BzK","file":"../PSVUtils.js","sourcesContent":["define([\n  \"skylark-langx-types\",\n  \"skylark-langx-objects\",\n  \"skylark-langx-strings\",\n  \"skylark-langx-funcs\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-styler\",\n  \"skylark-domx-finder\",\n  \"skylark-devices-points/mouse\",\n  \"skylark-devices-points/touch\",\n  \"skylark-devices-orientation\",\n  \"skylark-devices-webgl\",\n  \"skylark-threejs\",\n  \"skylark-threejs-ex/controls/DeviceOrientationControls\",\n  \"skylark-threejs-ex/effects/StereoEffect\",\n  \"./_psv/ctoc\"\n],function(\n  types,\n  objects,\n  strings,\n  funcs,\n  noder,\n  styler,\n  finder,\n  mouse,\n  touch,\n  orientation,\n  webgl,\n  THREE,\n  DeviceOrientationControls,\n  StereoEffect,\n  PhotoSphereViewer\n){\n  \"use strict\";\n  THREE.DeviceOrientationControls = DeviceOrientationControls;\n  THREE.StereoEffect = StereoEffect;\n\n  /**\n   * Static utilities for PSV\n   * @namespace\n   */\n  var PSVUtils = {};\n\n  /**\n   * @summary exposes {@link PSVUtils}\n   * @member {object}\n   * @memberof PhotoSphereViewer\n   * @readonly\n   */\n  PhotoSphereViewer.Utils = PSVUtils;\n\n  /**\n   * @summary Short-Hand for PI*2\n   * @type {float}\n   * @readonly\n   */\n  PSVUtils.TwoPI = Math.PI * 2.0;\n\n  /**\n   * @summary Short-Hand for PI/2\n   * @type {float}\n   * @readonly\n   */\n  PSVUtils.HalfPI = Math.PI / 2.0;\n\n  /**\n   * @summary Namespace for SVG creation\n   * @type {string}\n   * @readonly\n   */\n  PSVUtils.svgNS = 'http://www.w3.org/2000/svg';\n\n  /**\n   * @summary Checks if some three.js components are loaded\n   * @param {...string} components\n   * @returns {boolean}\n   */\n  PSVUtils.checkTHREE = function(components) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      if (!(arguments[i] in THREE)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * @summary Detects if canvas is supported\n   * @returns {boolean}\n   */\n  PSVUtils.isCanvasSupported = function() {\n    var canvas = document.createElement('canvas');\n    return !!(canvas.getContext && canvas.getContext('2d'));\n  };\n\n  /**\n   * @summary Tries to return a canvas webgl context\n   * @returns {WebGLRenderingContext}\n   */\n  PSVUtils.getWebGLCtx = webgl.getWebGLCtx;\n\n  /**\n   * @summary Detects if WebGL is supported\n   * @returns {boolean}\n   */\n  PSVUtils.isWebGLSupported = webgl.isWebGLSupported;\n\n  /**\n   * @summary Detects if device orientation is supported\n   * @description We can only be sure device orientation is supported once received an event with coherent data\n   * @returns {Promise<boolean>}\n   */\n  PSVUtils.isDeviceOrientationSupported = orientation.isDeviceOrientationSupported;\n  /**\n   * @summary Detects if the user is using a touch screen\n   * @returns {Promise<boolean>}\n   */\n  PSVUtils.isTouchEnabled = touch.isTouchEnabled;\n\n  /**\n   * @summary Gets max texture width in WebGL context\n   * @returns {int}\n   */\n  PSVUtils.getMaxTextureWidth = webgl.getMaxTextureWidth;\n\n  /**\n   * @summary Toggles a CSS class\n   * @param {HTMLElement|SVGElement} element\n   * @param {string} className\n   * @param {boolean} [active] - forced state\n   */\n  PSVUtils.toggleClass =styler.toggleClass;\n  /**\n   * @summary Adds one or several CSS classes to an element\n   * @param {HTMLElement} element\n   * @param {string} className\n   */\n  PSVUtils.addClasses = styler.addClass;\n\n  /**\n   * @summary Removes one or several CSS classes to an element\n   * @param {HTMLElement} element\n   * @param {string} className\n   */\n  PSVUtils.removeClasses =  styler.removeClass;\n  /**\n   * @summary Searches if an element has a particular parent at any level including itself\n   * @param {HTMLElement} el\n   * @param {HTMLElement} parent\n   * @returns {boolean}\n   */\n  PSVUtils.hasParent = noder.isChildOf;\n\n  /**\n   * @summary Gets the closest parent (can by itself)\n   * @param {HTMLElement|SVGElement} el\n   * @param {string} selector\n   * @returns {HTMLElement}\n   */\n  PSVUtils.getClosest = finder.closest;\n\n\n  /**\n   * @summary Gets the event name for mouse wheel\n   * @returns {string}\n   */\n  PSVUtils.mouseWheelEvent = mouse.mouseWheelEvent;\n  /**\n   * @summary Returns the key name of a KeyboardEvent\n   * @param {KeyboardEvent} evt\n   * @returns {string}\n   */\n  PSVUtils.getEventKey = function(evt) {\n    var key = evt.key || PSVUtils.getEventKey.KEYMAP[evt.keyCode || evt.which];\n\n    if (key && PSVUtils.getEventKey.MS_KEYMAP[key]) {\n      key = PSVUtils.getEventKey.MS_KEYMAP[key];\n    }\n\n    return key;\n  };\n\n  /**\n   * @summary Map between keyboard events `keyCode|which` and `key`\n   * @type {Object.<int, string>}\n   * @readonly\n   * @protected\n   */\n  PSVUtils.getEventKey.KEYMAP = {\n    13: 'Enter',\n    27: 'Escape',\n    32: ' ',\n    33: 'PageUp',\n    34: 'PageDown',\n    37: 'ArrowLeft',\n    38: 'ArrowUp',\n    39: 'ArrowRight',\n    40: 'ArrowDown',\n    46: 'Delete',\n    107: '+',\n    109: '-'\n  };\n\n  /**\n   * @summary Map for non standard keyboard events `key` for IE and Edge\n   * @see https://github.com/shvaikalesh/shim-keyboard-event-key\n   * @type {Object.<string, string>}\n   * @readonly\n   * @protected\n   */\n  PSVUtils.getEventKey.MS_KEYMAP = {\n    Add: '+',\n    Del: 'Delete',\n    Down: 'ArrowDown',\n    Esc: 'Escape',\n    Left: 'ArrowLeft',\n    Right: 'ArrowRight',\n    Spacebar: ' ',\n    Subtract: '-',\n    Up: 'ArrowUp'\n  };\n\n  /**\n   * @summary  Gets the event name for fullscreen\n   * @returns {string}\n   */\n  PSVUtils.fullscreenEvent = function() {\n    var map = {\n      'exitFullscreen': 'fullscreenchange',\n      'webkitExitFullscreen': 'webkitfullscreenchange',\n      'mozCancelFullScreen': 'mozfullscreenchange',\n      'msExitFullscreen': 'MSFullscreenChange'\n    };\n\n    for (var exit in map) {\n      if (map.hasOwnProperty(exit) && exit in document) {\n        return map[exit];\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @summary Ensures that a number is in a given interval\n   * @param {number} x\n   * @param {number} min\n   * @param {number} max\n   * @returns {number}\n   */\n  PSVUtils.bound = function(x, min, max) {\n    return Math.max(min, Math.min(max, x));\n  };\n\n  /**\n   * @summary Checks if a value is an integer\n   * @function\n   * @param {*} value\n   * @returns {boolean}\n   */\n  PSVUtils.isInteger = Number.isInteger || function(value) {\n      return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n    };\n\n  /**\n   * @summary Computes the sum of an array\n   * @param {number[]} array\n   * @returns {number}\n   */\n  PSVUtils.sum = function(array) {\n    return array.reduce(function(a, b) {\n      return a + b;\n    }, 0);\n  };\n\n  /**\n   * @summary Transforms a string to dash-case\n   * {@link https://github.com/shahata/dasherize}\n   * @param {string} str\n   * @returns {string}\n   */\n  PSVUtils.dasherize = strings.dasherize;\n\n  /**\n   * @summary Returns the value of a given attribute in the panorama metadata\n   * @param {string} data\n   * @param {string} attr\n   * @returns (string)\n   */\n  PSVUtils.getXMPValue = function(data, attr) {\n    var result;\n    // XMP data are stored in children\n    if ((result = data.match('<GPano:' + attr + '>(.*)</GPano:' + attr + '>')) !== null) {\n      return result[1];\n    }\n    // XMP data are stored in attributes\n    else if ((result = data.match('GPano:' + attr + '=\"(.*?)\"')) !== null) {\n      return result[1];\n    }\n    else {\n      return null;\n    }\n  };\n\n  /**\n   * @summary Detects if fullscreen is enabled\n   * @param {HTMLElement} elt\n   * @returns {boolean}\n   */\n  PSVUtils.isFullscreenEnabled = function(elt) {\n    return (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement) === elt;\n  };\n\n  /**\n   * @summary Enters fullscreen mode\n   * @param {HTMLElement} elt\n   */\n  PSVUtils.requestFullscreen = function(elt) {\n    (elt.requestFullscreen || elt.mozRequestFullScreen || elt.webkitRequestFullscreen || elt.msRequestFullscreen).call(elt);\n  };\n\n  /**\n   * @summary Exits fullscreen mode\n   */\n  PSVUtils.exitFullscreen = function() {\n    (document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen).call(document);\n  };\n\n  /**\n   * @summary Gets an element style\n   * @param {HTMLElement} elt\n   * @param {string} prop\n   * @returns {*}\n   */\n  PSVUtils.getStyle = styler.css;\n\n  /**\n   * @summary Compute the shortest offset between two longitudes\n   * @param {float} from\n   * @param {float} to\n   * @returns {float}\n   */\n  PSVUtils.getShortestArc = function(from, to) {\n    var tCandidates = [\n      0, // direct\n      PSVUtils.TwoPI, // clock-wise cross zero\n      -PSVUtils.TwoPI // counter-clock-wise cross zero\n    ];\n\n    return tCandidates.reduce(function(value, candidate) {\n      candidate = to - from + candidate;\n      return Math.abs(candidate) < Math.abs(value) ? candidate : value;\n    }, Infinity);\n  };\n\n  /**\n   * @summary Computes the angle between the current position and a target position\n   * @param {PhotoSphereViewer.Position} position1\n   * @param {PhotoSphereViewer.Position} position2\n   * @returns {number}\n   */\n  PSVUtils.getAngle = function(position1, position2) {\n    return Math.acos(\n      Math.cos(position1.latitude) *\n      Math.cos(position2.latitude) *\n      Math.cos(position1.longitude - position2.longitude) +\n      Math.sin(position1.latitude) *\n      Math.sin(position2.latitude)\n    );\n  };\n\n  /**\n   * @summary Translate CSS values like \"top center\" or \"10% 50%\" as top and left positions\n   * @description The implementation is as close as possible to the \"background-position\" specification\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/background-position}\n   * @param {string} value\n   * @returns {{top: float, left: float}}\n   */\n  PSVUtils.parsePosition = function(value) {\n    if (!value) {\n      return { top: 0.5, left: 0.5 };\n    }\n\n    if (typeof value === 'object') {\n      return value;\n    }\n\n    var tokens = value.toLocaleLowerCase().split(' ').slice(0, 2);\n\n    if (tokens.length === 1) {\n      if (PSVUtils.parsePosition.positions[tokens[0]] !== undefined) {\n        tokens = [tokens[0], 'center'];\n      }\n      else {\n        tokens = [tokens[0], tokens[0]];\n      }\n    }\n\n    var xFirst = tokens[1] !== 'left' && tokens[1] !== 'right' && tokens[0] !== 'top' && tokens[0] !== 'bottom';\n\n    tokens = tokens.map(function(token) {\n      return PSVUtils.parsePosition.positions[token] || token;\n    });\n\n    if (!xFirst) {\n      tokens.reverse();\n    }\n\n    var parsed = tokens.join(' ').match(/^([0-9.]+)% ([0-9.]+)%$/);\n\n    if (parsed) {\n      return {\n        left: parsed[1] / 100,\n        top: parsed[2] / 100\n      };\n    }\n    else {\n      return { top: 0.5, left: 0.5 };\n    }\n  };\n\n  PSVUtils.parsePosition.positions = { 'top': '0%', 'bottom': '100%', 'left': '0%', 'right': '100%', 'center': '50%' };\n\n  /**\n   * @summary Parses an speed\n   * @param {string} speed - The speed, in radians/degrees/revolutions per second/minute\n   * @returns {float} radians per second\n   * @throws {PSVError} when the speed cannot be parsed\n   */\n  PSVUtils.parseSpeed = function(speed) {\n    if (typeof speed === 'string') {\n      speed = speed.toString().trim();\n\n      // Speed extraction\n      var speed_value = parseFloat(speed.replace(/^(-?[0-9]+(?:\\.[0-9]*)?).*$/, '$1'));\n      var speed_unit = speed.replace(/^-?[0-9]+(?:\\.[0-9]*)?(.*)$/, '$1').trim();\n\n      // \"per minute\" -> \"per second\"\n      if (speed_unit.match(/(pm|per minute)$/)) {\n        speed_value /= 60;\n      }\n\n      // Which unit?\n      switch (speed_unit) {\n        // Degrees per minute / second\n        case 'dpm':\n        case 'degrees per minute':\n        case 'dps':\n        case 'degrees per second':\n          speed = THREE.Math.degToRad(speed_value);\n          break;\n\n        // Radians per minute / second\n        case 'radians per minute':\n        case 'radians per second':\n          speed = speed_value;\n          break;\n\n        // Revolutions per minute / second\n        case 'rpm':\n        case 'revolutions per minute':\n        case 'rps':\n        case 'revolutions per second':\n          speed = speed_value * PSVUtils.TwoPI;\n          break;\n\n        // Unknown unit\n        default:\n          throw new PSVError('unknown speed unit \"' + speed_unit + '\"');\n      }\n    }\n\n    return speed;\n  };\n\n  /**\n   * @summary Parses an angle value in radians or degrees and returns a normalized value in radians\n   * @param {string|number} angle - eg: 3.14, 3.14rad, 180deg\n   * @param {boolean} [zeroCenter=false] - normalize between -Pi/2 - Pi/2 instead of 0 - 2*Pi\n   * @param {boolean} [halfCircle=zeroCenter] - normalize between -Pi - Pi instead of -Pi/2 - Pi/2\n   * @returns {float}\n   * @throws {PSVError} when the angle cannot be parsed\n   */\n  PSVUtils.parseAngle = function(angle, zeroCenter, halfCircle) {\n    if (halfCircle === undefined) {\n      halfCircle = zeroCenter;\n    }\n\n    if (typeof angle === 'string') {\n      var match = angle.toLowerCase().trim().match(/^(-?[0-9]+(?:\\.[0-9]*)?)(.*)$/);\n\n      if (!match) {\n        throw new PSVError('unknown angle \"' + angle + '\"');\n      }\n\n      var value = parseFloat(match[1]);\n      var unit = match[2];\n\n      if (unit) {\n        switch (unit) {\n          case 'deg':\n          case 'degs':\n            angle = THREE.Math.degToRad(value);\n            break;\n          case 'rad':\n          case 'rads':\n            angle = value;\n            break;\n          default:\n            throw new PSVError('unknown angle unit \"' + unit + '\"');\n        }\n      }\n      else {\n        angle = value;\n      }\n    }\n\n    angle = (zeroCenter ? angle + Math.PI : angle) % PSVUtils.TwoPI;\n\n    if (angle < 0) {\n      angle = PSVUtils.TwoPI + angle;\n    }\n\n    return zeroCenter ? PSVUtils.bound(angle - Math.PI, -Math.PI / (halfCircle ? 2 : 1), Math.PI / (halfCircle ? 2 : 1)) : angle;\n  };\n\n  /**\n   * @summary Removes all children of a three.js scene and dispose all textures\n   * @param {THREE.Scene} scene\n   */\n  PSVUtils.cleanTHREEScene = function(scene) {\n    scene.children.forEach(function(item) {\n      if (item instanceof THREE.Mesh) {\n        if (item.geometry) {\n          item.geometry.dispose();\n          item.geometry = null;\n        }\n\n        if (item.material) {\n          if (item.material.materials) {\n            item.material.materials.forEach(function(material) {\n              if (material.map) {\n                material.map.dispose();\n                material.map = null;\n              }\n\n              material.dispose();\n            });\n\n            item.material.materials.length = 0;\n          }\n          else {\n            if (item.material.map) {\n              item.material.map.dispose();\n              item.material.map = null;\n            }\n\n            item.material.dispose();\n          }\n\n          item.material = null;\n        }\n      }\n    });\n    scene.children.length = 0;\n  };\n\n  /**\n   * @summary Returns a function, that, when invoked, will only be triggered at most once during a given window of time.\n   * @copyright underscore.js - modified by Clément Prévost {@link http://stackoverflow.com/a/27078401}\n   * @param {Function} func\n   * @param {int} wait\n   * @returns {Function}\n   */\n  PSVUtils.throttle = funcs.debounce;\n  /**\n   * @summary Test if an object is a plain object\n   * @description Test if an object is a plain object, i.e. is constructed\n   * by the built-in Object constructor and inherits directly from Object.prototype\n   * or null. Some built-in objects pass the test, e.g. Math which is a plain object\n   * and some host or exotic objects may pass also.\n   * {@link http://stackoverflow.com/a/5878101/1207670}\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  PSVUtils.isPlainObject =  types.isPlainObject;\n  /**\n   * @summary Merges the enumerable attributes of two objects\n   * @description Replaces arrays and alters the target object.\n   * @copyright Nicholas Fisher <nfisher110@gmail.com>\n   * @param {Object} target\n   * @param {Object} src\n   * @returns {Object} target\n   */\n  PSVUtils.deepmerge = function(target, src) {\n    \n    return objects.mixin(target,src,true);\n\n  };\n\n  /**\n   * @summary Clones an object\n   * @param {Object} src\n   * @returns {Object}\n   */\n  PSVUtils.clone = objects.clone;\n\n  /**\n   * @summary Normalize mousewheel values accross browsers\n   * @description From Facebook's Fixed Data Table\n   * {@link https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js}\n   * @copyright Facebook\n   * @param {MouseWheelEvent} event\n   * @returns {{spinX: number, spinY: number, pixelX: number, pixelY: number}}\n   */\n  PSVUtils.normalizeWheel = mouse.normalizeWheel;\n\n  /**\n   * @callback ForEach\n   * @memberOf PSVUtils\n   * @param {*} value\n   * @param {string} key\n   */\n\n  /**\n   * Loops over enumerable properties of an object\n   * @param {object} object\n   * @param {ForEach} callback\n   */\n  PSVUtils.forEach = function(object, callback) {\n    return objects.each(object,callback,true);\n  };\n\n  return PSVUtils;\n});"]}