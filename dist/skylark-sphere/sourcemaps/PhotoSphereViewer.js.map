{"version":3,"sources":["PhotoSphereViewer.js"],"names":["define","THREE","PhotoSphereViewer","PSVError","PSVUtils","PSVMarker","PSVAnimation","prototype","load","this","config","panorama","setPanorama","getPosition","longitude","prop","position","latitude","getZoomLevel","zoom_lvl","getSize","width","size","height","isAutorotateEnabled","autorotate_cb","isGyroscopeEnabled","orientation_cb","isStereoEnabled","stereoEffect","isFullscreenEnabled","container","needsUpdate","render","_render","destroy","window","cancelAnimationFrame","main_reqid","_stopAll","stopKeyboardControl","stopNoSleep","exitFullscreen","unlockOrientation","_unbindEvents","tooltip","notification","hud","loader","navbar","panel","overlay","scene","cleanTHREEScene","canvas_container","removeChild","parent","photoSphereViewer","renderer","noSleep","camera","mesh","raycaster","passes","cache","length","path","options","transition","loading_promise","undefined","default_long","default_lat","zoom","default_zoom_lvl","sphere_correction","positionProvided","isExtendedPosition","zoomProvided","done","hide","style","opacity","bind","show","_loadTexture","then","texture","_transition","_setTexture","isCubemap","_setSphereCorrection","rotate","startAutorotate","_getAutorotateUpdate","on","trigger","last","elapsed","timestamp","anim_speed","anim_lat","stopAutorotate","start_timeout","clearTimeout","off","toggleAutorotate","startGyroscopeControl","checkTHREE","SYSTEM","deviceOrientationSupported","supported","console","warn","Promise","reject","doControls","DeviceOrientationControls","alphaOffset","update","direction","getWorldDirection","Vector3","sphericalCoords","vector3ToSphericalCoords","gyro_alpha_offset","_getOrientationUpdate","multiplyScalar","SPHERE_RADIUS","stopGyroscopeControl","disconnect","toggleGyroscopeControl","startNoSleep","NoSleep","enable","disable","startStereoView","enterFullscreen","lockOrientation","StereoEffect","hidePanel","showNotification","content","lang","stereo_notification","timeout","stopStereoView","displayRotateMessageTimeout","displayRotateMessage","innerHeight","innerWidth","showOverlay","image","ICONS","text","please_rotate","subtext","screen","orientation","lock","setTimeout","apply","unlock","hideOverlay","toggleStereoView","ignoreRange","cleanPosition","applyRanges","forEach","animate","speed","duration","animProperties","currentPosition","dLongitude","Math","abs","dLatitude","ANGLE_THRESHOLD","tOffset","getShortestArc","start","end","speedToDuration","getAngle","dZoom","PI","animation_promise","properties","easing","onTick","resolve","stopAnimation","finally","cancel","level","bound","vFov","max_fov","min_fov","hFov","radToDeg","atan","tan","degToRad","aspect","zoomIn","zoom_speed","zoomOut","resize","_onResize","requestFullscreen","toggleFullscreen","startKeyboardControl","addEventListener","removeEventListener","preloadPanorama","cache_texture","clearPanoramaCache","i","l","splice","getPanoramaCache","filter","shift","Error"],"mappings":"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","file":"../PhotoSphereViewer.js","sourcesContent":["define([\n  \"skylark-threejs\",\n  \"./_psv/ctoc\",\n   \"./PSVError\",\n  \"./PSVUtils\",\n  \"./PSVMarker\",\n  \"./PSVAnimation\",\n  \"./_psv/core\",\n  \"./_psv/defaults\",\n  \"./_psv/events\",\n  \"./_psv/utils\"\n ],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVError,\n  PSVUtils,\n  PSVMarker,\n  PSVAnimation\n){\n  \"use strict\";\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Point\n   * @summary Object defining a point\n   * @property {int} x\n   * @property {int} y\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Size\n   * @summary Object defining a size\n   * @property {int} width\n   * @property {int} height\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.CssSize\n   * @summary Object defining a size in CSS (px, % or auto)\n   * @property {string} [width]\n   * @property {string} [height]\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Position\n   * @summary Object defining a spherical position\n   * @property {float} longitude\n   * @property {float} latitude\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.Position} PhotoSphereViewer.ExtendedPosition\n   * @summary Object defining a spherical or texture position\n   * @description A position that can be expressed either in spherical coordinates (radians or degrees) or in texture coordinates (pixels)\n   * @property {int} x\n   * @property {int} y\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.ExtendedPosition} PhotoSphereViewer.AnimateOptions\n   * @summary Object defining animation options\n   * @property {number} zoom - target zoom level between 0 and 100\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.SphereCorrection\n   * @property {number} pan\n   * @property {number} tilt\n   * @property {number} roll\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.AnimateOptions} PhotoSphereViewer.PanoramaOptions\n   * @summary Object defining panorama and animation options\n   * @property {PhotoSphereViewer.SphereCorrection} sphere_correction - new sphere correction to apply to the panorama\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.CacheItem\n   * @summary An entry in the memory cache\n   * @property {string} panorama\n   * @property {THREE.Texture} image\n   * @property {PhotoSphereViewer.PanoData} pano_data\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.PanoData\n   * @summary Crop information of the panorama\n   * @property {int} full_width\n   * @property {int} full_height\n   * @property {int} cropped_width\n   * @property {int} cropped_height\n   * @property {int} cropped_x\n   * @property {int} cropped_y\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.ClickData\n   * @summary Data of the `click` event\n   * @property {int} client_x - position in the browser window\n   * @property {int} client_y - position in the browser window\n   * @property {int} viewer_x - position in the viewer\n   * @property {int} viewer_y - position in the viewer\n   * @property {float} longitude - position in spherical coordinates\n   * @property {float} latitude - position in spherical coordinates\n   * @property {int} texture_x - position on the texture\n   * @property {int} texture_y - position on the texture\n   * @property {PSVMarker} [marker] - clicked marker\n   */\n\n\n\n  /**\n   * @summary Triggers an event on the viewer\n   * @function trigger\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string} name\n   * @param {...*} [arguments]\n   * @returns {uEvent.Event}\n   */\n\n  /**\n   * @summary Triggers an event on the viewer and returns the modified value\n   * @function change\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string} name\n   * @param {*} value\n   * @param {...*} [arguments]\n   * @returns {*}\n   */\n\n  /**\n   * @summary Attaches an event listener on the viewer\n   * @function on\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  /**\n   * @summary Removes an event listener from the viewer\n   * @function off\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  /**\n   * @summary Attaches an event listener called once on the viewer\n   * @function once\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  //uEvent.mixin(PhotoSphereViewer);\n\n\n\n\n  /**\n   * @summary Starts to load the panorama\n   * @returns {Promise}\n   * @throws {PSVError} when the panorama is not configured\n   * @deprecated Use {@link PhotoSphereViewer#setPanorama} instead\n   */\n  PhotoSphereViewer.prototype.load = function() {\n    if (!this.config.panorama) {\n      throw new PSVError('No value given for panorama.');\n    }\n\n    return this.setPanorama(this.config.panorama, false);\n  };\n\n  /**\n   * @summary Returns the current position of the camera\n   * @returns {PhotoSphereViewer.Position}\n   */\n  PhotoSphereViewer.prototype.getPosition = function() {\n    return {\n      longitude: this.prop.position.longitude,\n      latitude: this.prop.position.latitude\n    };\n  };\n\n  /**\n   * @summary Returns the current zoom level\n   * @returns {int}\n   */\n  PhotoSphereViewer.prototype.getZoomLevel = function() {\n    return this.prop.zoom_lvl;\n  };\n\n  /**\n   * @summary Returns the current viewer size\n   * @returns {PhotoSphereViewer.Size}\n   */\n  PhotoSphereViewer.prototype.getSize = function() {\n    return {\n      width: this.prop.size.width,\n      height: this.prop.size.height\n    };\n  };\n\n  /**\n   * @summary Checks if the automatic rotation is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isAutorotateEnabled = function() {\n    return !!this.prop.autorotate_cb;\n  };\n\n  /**\n   * @summary Checks if the gyroscope is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isGyroscopeEnabled = function() {\n    return !!this.prop.orientation_cb;\n  };\n\n  /**\n   * @summary Checks if the stereo viewx is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isStereoEnabled = function() {\n    return !!this.stereoEffect;\n  };\n\n  /**\n   * @summary Checks if the viewer is in fullscreen\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isFullscreenEnabled = function() {\n    return PSVUtils.isFullscreenEnabled(this.container);\n  };\n\n  /**\n   * @summary Flags the view has changed for the next render\n   */\n  PhotoSphereViewer.prototype.needsUpdate = function() {\n    this.prop.needsUpdate = true;\n  };\n\n  /**\n   * @summary Performs a render\n   * @deprecated Use {@link PhotoSphereViewer.event:before-render} instead\n   */\n  PhotoSphereViewer.prototype.render = function() {\n    this._render();\n  };\n\n  /**\n   * @summary Destroys the viewer\n   * @description The memory used by the ThreeJS context is not totally cleared. This will be fixed as soon as possible.\n   */\n  PhotoSphereViewer.prototype.destroy = function() {\n    window.cancelAnimationFrame(this.prop.main_reqid);\n\n    this._stopAll();\n    this.stopKeyboardControl();\n    this.stopNoSleep();\n    this.exitFullscreen();\n    this.unlockOrientation();\n\n    // remove listeners\n    this._unbindEvents();\n\n    // destroy components\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    if (this.notification) {\n      this.notification.destroy();\n    }\n    if (this.hud) {\n      this.hud.destroy();\n    }\n    if (this.loader) {\n      this.loader.destroy();\n    }\n    if (this.navbar) {\n      this.navbar.destroy();\n    }\n    if (this.panel) {\n      this.panel.destroy();\n    }\n    if (this.overlay) {\n      this.overlay.destroy();\n    }\n\n    // destroy ThreeJS view\n    if (this.scene) {\n      PSVUtils.cleanTHREEScene(this.scene);\n    }\n\n    // remove container\n    if (this.canvas_container) {\n      this.container.removeChild(this.canvas_container);\n    }\n    this.parent.removeChild(this.container);\n\n    delete this.parent.photoSphereViewer;\n\n    // clean references\n    delete this.parent;\n    delete this.container;\n    delete this.loader;\n    delete this.navbar;\n    delete this.hud;\n    delete this.panel;\n    delete this.tooltip;\n    delete this.notification;\n    delete this.overlay;\n    delete this.canvas_container;\n    delete this.renderer;\n    delete this.noSleep;\n    delete this.scene;\n    delete this.camera;\n    delete this.mesh;\n    delete this.raycaster;\n    delete this.passes;\n    delete this.config;\n    this.prop.cache.length = 0;\n  };\n\n  /**\n   * @summary Loads a new panorama file\n   * @description Loads a new panorama file, optionally changing the camera position and activating the transition animation.<br>\n   * If the \"position\" is not defined, the camera will not move and the ongoing animation will continue<br>\n   * \"config.transition\" must be configured for \"transition\" to be taken in account\n   * @param {string|string[]} path - URL of the new panorama file\n   * @param {PhotoSphereViewer.PanoramaOptions} [options]\n   * @param {boolean} [transition=false]\n   * @returns {Promise}\n   * @throws {PSVError} when another panorama is already loading\n   */\n  PhotoSphereViewer.prototype.setPanorama = function(path, options, transition) {\n    if (this.prop.loading_promise !== null) {\n      throw new PSVError('Loading already in progress');\n    }\n\n    if (typeof options === 'boolean') {\n      transition = options;\n      options = undefined;\n    }\n    if (!options && !this.scene) {\n      options = {\n        longitude: this.config.default_long,\n        latitude: this.config.default_lat,\n        zoom: this.config.default_zoom_lvl,\n        sphere_correction: this.config.sphere_correction\n      };\n    }\n    else if (!options) {\n      options = {};\n    }\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = 'zoom' in options;\n\n    if (positionProvided || zoomProvided) {\n      this._stopAll();\n    }\n\n    this.config.panorama = path;\n\n    var done = function() {\n      this.loader.hide();\n      this.canvas_container.style.opacity = 1;\n\n      this.prop.loading_promise = null;\n    }.bind(this);\n\n    if (!transition || !this.config.transition || !this.scene) {\n      this.loader.show();\n      if (this.canvas_container) {\n        this.canvas_container.style.opacity = 0;\n      }\n\n      this.prop.loading_promise = this._loadTexture(this.config.panorama)\n        .then(function(texture) {\n          this._setTexture(texture);\n\n          if (options.sphere_correction && !this.prop.isCubemap) {\n            this._setSphereCorrection(this.mesh, options.sphere_correction);\n          }\n\n          if (positionProvided) {\n            this.rotate(options);\n          }\n          if (zoomProvided) {\n            this.zoom(options.zoom);\n          }\n        }.bind(this))\n        .then(done, done);\n    }\n    else {\n      if (this.config.transition.loader) {\n        this.loader.show();\n      }\n\n      this.prop.loading_promise = this._loadTexture(this.config.panorama)\n        .then(function(texture) {\n          this.loader.hide();\n\n          return this._transition(texture, options);\n        }.bind(this))\n        .then(done, done);\n    }\n\n    return this.prop.loading_promise;\n  };\n\n  /**\n   * @summary Starts the automatic rotation\n   * @fires PhotoSphereViewer.autorotate\n   */\n  PhotoSphereViewer.prototype.startAutorotate = function() {\n    this._stopAll();\n\n    this.prop.autorotate_cb = this._getAutorotateUpdate();\n    this.on('before-render', this.prop.autorotate_cb);\n\n    /**\n     * @event autorotate\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the automatic rotation is enabled/disabled\n     * @param {boolean} enabled\n     */\n    this.trigger('autorotate', true);\n  };\n\n  /**\n   * @summary Create an animation callback for the automatic rotation\n   * @returns {function}\n   * @private\n   */\n  PhotoSphereViewer.prototype._getAutorotateUpdate = function() {\n    var last;\n    var elapsed;\n\n    return function(timestamp) {\n      elapsed = last === undefined ? 0 : timestamp - last;\n      last = timestamp;\n\n      this.rotate({\n        longitude: this.prop.position.longitude + this.config.anim_speed * elapsed / 1000,\n        latitude: this.prop.position.latitude - (this.prop.position.latitude - this.config.anim_lat) / 200\n      });\n    };\n  };\n\n  /**\n   * @summary Stops the automatic rotation\n   * @fires PhotoSphereViewer.autorotate\n   */\n  PhotoSphereViewer.prototype.stopAutorotate = function() {\n    if (this.prop.start_timeout) {\n      window.clearTimeout(this.prop.start_timeout);\n      this.prop.start_timeout = null;\n    }\n\n    if (this.isAutorotateEnabled()) {\n      this.off('before-render', this.prop.autorotate_cb);\n      this.prop.autorotate_cb = null;\n\n      this.trigger('autorotate', false);\n    }\n  };\n\n  /**\n   * @summary Starts or stops the automatic rotation\n   */\n  PhotoSphereViewer.prototype.toggleAutorotate = function() {\n    if (this.isAutorotateEnabled()) {\n      this.stopAutorotate();\n    }\n    else {\n      this.startAutorotate();\n    }\n  };\n\n  /**\n   * @summary Enables the gyroscope navigation if available\n   * @fires PhotoSphereViewer.gyroscope-updated\n   * @throws {PSVError} if DeviceOrientationControls.js is missing\n   */\n  PhotoSphereViewer.prototype.startGyroscopeControl = function() {\n    if (PSVUtils.checkTHREE('DeviceOrientationControls')) {\n      return PhotoSphereViewer.SYSTEM.deviceOrientationSupported.then(function(supported) {\n        if (supported) {\n          this._stopAll();\n\n          this.doControls = new THREE.DeviceOrientationControls(this.camera);\n\n          // compute the alpha offset to keep the current orientation\n          this.doControls.alphaOffset = this.prop.position.longitude;\n          this.doControls.update();\n\n          var direction = this.camera.getWorldDirection(new THREE.Vector3());\n          var sphericalCoords = this.vector3ToSphericalCoords(direction);\n\n          this.prop.gyro_alpha_offset = sphericalCoords.longitude;\n\n          this.prop.orientation_cb = this._getOrientationUpdate();\n          this.on('before-render', this.prop.orientation_cb);\n\n          /**\n           * @event gyroscope-updated\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the gyroscope mode is enabled/disabled\n           * @param {boolean} enabled\n           */\n          this.trigger('gyroscope-updated', true);\n        }\n        else {\n          console.warn('PhotoSphereViewer: gyroscope not available');\n          return Promise.reject();\n        }\n      }.bind(this));\n    }\n    else {\n      throw new PSVError('Missing Three.js components: DeviceOrientationControls. Get them from three.js-examples package.');\n    }\n  };\n\n  /**\n   * @summary Create an animation callback for the orientation controls\n   * @returns {function}\n   * @private\n   */\n  PhotoSphereViewer.prototype._getOrientationUpdate = function() {\n    return function() {\n      this.doControls.alphaOffset = this.prop.gyro_alpha_offset;\n      this.doControls.update();\n\n      this.camera.getWorldDirection(this.prop.direction);\n      this.prop.direction.multiplyScalar(PhotoSphereViewer.SPHERE_RADIUS);\n\n      var sphericalCoords = this.vector3ToSphericalCoords(this.prop.direction);\n      this.prop.position.longitude = sphericalCoords.longitude;\n      this.prop.position.latitude = sphericalCoords.latitude;\n      this.needsUpdate();\n    };\n  };\n\n  /**\n   * @summary Disables the gyroscope navigation\n   * @fires PhotoSphereViewer.gyroscope-updated\n   */\n  PhotoSphereViewer.prototype.stopGyroscopeControl = function() {\n    if (this.isGyroscopeEnabled()) {\n      this.off('before-render', this.prop.orientation_cb);\n      this.prop.orientation_cb = null;\n\n      this.doControls.disconnect();\n      this.doControls = null;\n\n      this.trigger('gyroscope-updated', false);\n    }\n  };\n\n  /**\n   * @summary Enables or disables the gyroscope navigation\n   */\n  PhotoSphereViewer.prototype.toggleGyroscopeControl = function() {\n    if (this.isGyroscopeEnabled()) {\n      this.stopGyroscopeControl();\n    }\n    else {\n      this.startGyroscopeControl();\n    }\n  };\n\n  /**\n   * @summary Enables NoSleep.js\n   */\n  PhotoSphereViewer.prototype.startNoSleep = function() {\n    if (!('NoSleep' in window)) {\n      console.warn('PhotoSphereViewer: NoSleep is not available');\n      return;\n    }\n\n    if (!this.noSleep) {\n      this.noSleep = new NoSleep();\n    }\n\n    this.noSleep.enable();\n  };\n\n  /**\n   * @summary Disables NoSleep.js\n   */\n  PhotoSphereViewer.prototype.stopNoSleep = function() {\n    if (this.noSleep) {\n      this.noSleep.disable();\n    }\n  };\n\n  /**\n   * @summary Enables the stereo view\n   * @description\n   *  - enables NoSleep.js\n   *  - enables full screen\n   *  - starts gyroscope controle\n   *  - hides hud, navbar and panel\n   *  - instanciate StereoEffect\n   * @throws {PSVError} if StereoEffect.js is not available\n   */\n  PhotoSphereViewer.prototype.startStereoView = function() {\n    if (PSVUtils.checkTHREE('DeviceOrientationControls', 'StereoEffect')) {\n      // Need to be in the main event queue\n      this.startNoSleep();\n      this.enterFullscreen();\n      this.lockOrientation();\n\n      this.startGyroscopeControl().then(\n        function() {\n          this.stereoEffect = new THREE.StereoEffect(this.renderer);\n          this.needsUpdate();\n\n          this.hud.hide();\n          this.navbar.hide();\n          this.panel.hidePanel();\n\n          /**\n           * @event stereo-updated\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the stereo view is enabled/disabled\n           * @param {boolean} enabled\n           */\n          this.trigger('stereo-updated', true);\n\n          this.notification.showNotification({\n            content: this.config.lang.stereo_notification,\n            timeout: 3000\n          });\n        }.bind(this),\n        function() {\n          this.unlockOrientation();\n          this.exitFullscreen();\n          this.stopNoSleep();\n        }.bind(this)\n      );\n    }\n    else {\n      throw new PSVError('Missing Three.js components: StereoEffect, DeviceOrientationControls. Get them from three.js-examples package.');\n    }\n  };\n\n  /**\n   * @summary Disables the stereo view\n   */\n  PhotoSphereViewer.prototype.stopStereoView = function() {\n    if (this.isStereoEnabled()) {\n      this.stereoEffect = null;\n      this.needsUpdate();\n\n      this.hud.show();\n      this.navbar.show();\n\n      this.unlockOrientation();\n      this.exitFullscreen();\n      this.stopNoSleep();\n      this.stopGyroscopeControl();\n\n      this.trigger('stereo-updated', false);\n    }\n  };\n\n  /**\n   * @summary Tries to lock the device in landscape or display a message\n   */\n  PhotoSphereViewer.prototype.lockOrientation = function() {\n    var displayRotateMessageTimeout;\n\n    var displayRotateMessage = function() {\n      if (this.isStereoEnabled() && window.innerHeight > window.innerWidth) {\n        this.overlay.showOverlay({\n          image: PhotoSphereViewer.ICONS['mobile-rotate.svg'],\n          text: this.config.lang.please_rotate[0],\n          subtext: this.config.lang.please_rotate[1]\n        });\n      }\n\n      if (displayRotateMessageTimeout) {\n        window.clearTimeout(displayRotateMessageTimeout);\n      }\n    };\n\n    if (window.screen && window.screen.orientation) {\n      window.screen.orientation.lock('landscape').then(null, displayRotateMessage.bind(this));\n      displayRotateMessageTimeout = setTimeout(displayRotateMessage.bind(this), 500);\n    }\n    else {\n      displayRotateMessage.apply(this);\n    }\n  };\n\n  /**\n   * @summary Unlock the device orientation\n   */\n  PhotoSphereViewer.prototype.unlockOrientation = function() {\n    if (window.screen && window.screen.orientation) {\n      window.screen.orientation.unlock();\n    }\n    else {\n      this.overlay.hideOverlay();\n    }\n  };\n\n  /**\n   * @summary Enables or disables the stereo view\n   */\n  PhotoSphereViewer.prototype.toggleStereoView = function() {\n    if (this.isStereoEnabled()) {\n      this.stopStereoView();\n    }\n    else {\n      this.startStereoView();\n    }\n  };\n\n  /**\n   * @summary Rotates the view to specific longitude and latitude\n   * @param {PhotoSphereViewer.ExtendedPosition} position\n   * @param {boolean} [ignoreRange=false] - ignore longitude_range and latitude_range\n   * @fires PhotoSphereViewer._side-reached\n   * @fires PhotoSphereViewer.position-updated\n   */\n  PhotoSphereViewer.prototype.rotate = function(position, ignoreRange) {\n    this.cleanPosition(position);\n\n    if (!ignoreRange) {\n      /**\n       * @event _side-reached\n       * @memberof PhotoSphereViewer\n       * @param {string} side\n       * @private\n       */\n      this.applyRanges(position).forEach(\n        this.trigger.bind(this, '_side-reached')\n      );\n    }\n\n    this.prop.position.longitude = position.longitude;\n    this.prop.position.latitude = position.latitude;\n    this.needsUpdate();\n\n    /**\n     * @event position-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the view longitude and/or latitude changes\n     * @param {PhotoSphereViewer.Position} position\n     */\n    this.trigger('position-updated', this.getPosition());\n  };\n\n  /**\n   * @summary Rotates the view to specific longitude and latitude with a smooth animation\n   * @param {PhotoSphereViewer.AnimateOptions} options\n   * @param {string|int} [speed] - animation speed or duration (in milliseconds)\n   * @returns {PSVAnimation}\n   */\n  PhotoSphereViewer.prototype.animate = function(options, speed) {\n    this._stopAll();\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = 'zoom' in options;\n\n    var animProperties = {};\n    var duration;\n\n    // clean/filter position and compute duration\n    if (positionProvided) {\n      this.cleanPosition(options);\n      this.applyRanges(options);\n\n      var currentPosition = this.prop.position;\n      var dLongitude = Math.abs(options.longitude - currentPosition.longitude);\n      var dLatitude = Math.abs(options.latitude - currentPosition.latitude);\n\n      if (dLongitude >= PhotoSphereViewer.ANGLE_THRESHOLD || dLatitude >= PhotoSphereViewer.ANGLE_THRESHOLD) {\n        // longitude offset for shortest arc\n        var tOffset = PSVUtils.getShortestArc(this.prop.position.longitude, options.longitude);\n\n        animProperties.longitude = { start: currentPosition.longitude, end: currentPosition.longitude + tOffset };\n        animProperties.latitude = { start: currentPosition.latitude, end: options.latitude };\n\n        duration = this.speedToDuration(speed, PSVUtils.getAngle(currentPosition, options));\n      }\n    }\n\n    // clean/filter zoom and compute duration\n    if (zoomProvided) {\n      var dZoom = Math.abs(options.zoom - this.prop.zoom_lvl);\n\n      if (dZoom >= 1) {\n        animProperties.zoom = { start: this.prop.zoom_lvl, end: options.zoom };\n\n        if (!duration) {\n          // if animating zoom only and a speed is given, use an arbitrary PI/2 to compute the duration\n          duration = this.speedToDuration(speed, Math.PI / 4 * dZoom / 100);\n        }\n      }\n    }\n\n    // if no animation needed\n    if (!duration) {\n      if (positionProvided) {\n        this.rotate(options);\n      }\n      if (zoomProvided) {\n        this.zoom(options.zoom);\n      }\n\n      return PSVAnimation.resolve();\n    }\n\n    this.prop.animation_promise = new PSVAnimation({\n      properties: animProperties,\n      duration: duration,\n      easing: 'inOutSine',\n      onTick: function(properties) {\n        if (positionProvided) {\n          this.rotate(properties, true);\n        }\n        if (zoomProvided) {\n          this.zoom(properties.zoom);\n        }\n      }.bind(this)\n    });\n\n    return this.prop.animation_promise;\n  };\n\n  /**\n   * @summary Stops the ongoing animation\n   * @description The return value is a Promise because the is no guaranty the animation can be stopped synchronously.\n   * @returns {Promise} Resolved when the animation has ben cancelled\n   */\n  PhotoSphereViewer.prototype.stopAnimation = function() {\n    if (this.prop.animation_promise) {\n      return new Promise(function(resolve) {\n        this.prop.animation_promise.finally(resolve);\n        this.prop.animation_promise.cancel();\n        this.prop.animation_promise = null;\n      }.bind(this));\n    }\n    else {\n      return Promise.resolve();\n    }\n  };\n\n  /**\n   * @summary Zooms to a specific level between `max_fov` and `min_fov`\n   * @param {int} level - new zoom level from 0 to 100\n   * @fires PhotoSphereViewer.zoom-updated\n   */\n  PhotoSphereViewer.prototype.zoom = function(level) {\n    this.prop.zoom_lvl = PSVUtils.bound(level, 0, 100);\n    this.prop.vFov = this.config.max_fov + (this.prop.zoom_lvl / 100) * (this.config.min_fov - this.config.max_fov);\n    this.prop.hFov = THREE.Math.radToDeg(2 * Math.atan(Math.tan(THREE.Math.degToRad(this.prop.vFov) / 2) * this.prop.aspect));\n    this.needsUpdate();\n\n    /**\n     * @event zoom-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the zoom level changes\n     * @param {int} zoomLevel\n     */\n    this.trigger('zoom-updated', this.getZoomLevel());\n  };\n\n  /**\n   * @summary Increases the zoom level by 1\n   */\n  PhotoSphereViewer.prototype.zoomIn = function() {\n    if (this.prop.zoom_lvl < 100) {\n      this.zoom(this.prop.zoom_lvl + this.config.zoom_speed);\n    }\n  };\n\n  /**\n   * @summary Decreases the zoom level by 1\n   */\n  PhotoSphereViewer.prototype.zoomOut = function() {\n    if (this.prop.zoom_lvl > 0) {\n      this.zoom(this.prop.zoom_lvl - this.config.zoom_speed);\n    }\n  };\n\n  /**\n   * @summary Resizes the viewer\n   * @param {PhotoSphereViewer.CssSize} size\n   */\n  PhotoSphereViewer.prototype.resize = function(size) {\n    if (size.width) {\n      this.container.style.width = size.width;\n    }\n    if (size.height) {\n      this.container.style.height = size.height;\n    }\n\n    this._onResize();\n  };\n\n  PhotoSphereViewer.prototype.enterFullscreen = function() {\n    PSVUtils.requestFullscreen(this.container);\n  };\n\n  PhotoSphereViewer.prototype.exitFullscreen = function() {\n    if (this.isFullscreenEnabled()) {\n      PSVUtils.exitFullscreen();\n    }\n  };\n\n  /**\n   * @summary Enters or exits the fullscreen mode\n   */\n  PhotoSphereViewer.prototype.toggleFullscreen = function() {\n    if (!this.isFullscreenEnabled()) {\n      this.enterFullscreen();\n    }\n    else {\n      this.exitFullscreen();\n    }\n  };\n\n  /**\n   * @summary Enables the keyboard controls (done automatically when entering fullscreen)\n   */\n  PhotoSphereViewer.prototype.startKeyboardControl = function() {\n    window.addEventListener('keydown', this);\n  };\n\n  /**\n   * @summary Disables the keyboard controls (done automatically when exiting fullscreen)\n   */\n  PhotoSphereViewer.prototype.stopKeyboardControl = function() {\n    window.removeEventListener('keydown', this);\n  };\n\n  /**\n   * @summary Preload a panorama file without displaying it\n   * @param {string} panorama\n   * @returns {Promise}\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.preloadPanorama = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot preload panorama, cache_texture is disabled');\n    }\n\n    return this._loadTexture(panorama);\n  };\n\n  /**\n   * @summary Removes a panorama from the cache or clears the entire cache\n   * @param {string} [panorama]\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.clearPanoramaCache = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot clear cache, cache_texture is disabled');\n    }\n\n    if (panorama) {\n      for (var i = 0, l = this.prop.cache.length; i < l; i++) {\n        if (this.prop.cache[i].panorama === panorama) {\n          this.prop.cache.splice(i, 1);\n          break;\n        }\n      }\n    }\n    else {\n      this.prop.cache.length = 0;\n    }\n  };\n\n  /**\n   * @summary Retrieves the cache for a panorama\n   * @param {string} panorama\n   * @returns {PhotoSphereViewer.CacheItem}\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.getPanoramaCache = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot query cache, cache_texture is disabled');\n    }\n\n    return this.prop.cache.filter(function(cache) {\n      return cache.panorama === panorama;\n    }).shift();\n  };\n\n\n  /**\n   * @summary exposes {@link PSVError}\n   * @memberof PhotoSphereViewer\n   * @readonly\n   */\n  PhotoSphereViewer.Error = PSVError;\n\n\n\n  return PhotoSphereViewer;\n});"]}