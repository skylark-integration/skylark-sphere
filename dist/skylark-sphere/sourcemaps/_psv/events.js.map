{"version":3,"sources":["_psv/events.js"],"names":["define","PhotoSphereViewer","PSVUtils","PSVAnimation","prototype","_bindEvents","window","addEventListener","this","config","mousemove","hud","container","style","cursor","mousemove_hover","SYSTEM","fullscreenEvent","document","mousewheel","mouseWheelEvent","on","side","isAutorotateEnabled","_reverseAutorotate","_unbindEvents","removeEventListener","off","handleEvent","evt","type","throttle","_onResize","_onKeyDown","_onMouseDown","_onTouchStart","_onMouseUp","_onTouchEnd","_onMouseMove","_onTouchMove","_fullscreenToggled","_onMouseWheel","clientWidth","prop","size","width","clientHeight","height","parseInt","aspect","needsUpdate","renderer","stereoEffect","setSize","trigger","getSize","dLong","dLat","dZoom","key","getEventKey","keyboard","toggleAutorotate","zoom","zoom_lvl","zoom_speed","rotate","longitude","position","move_speed","hFov","latitude","vFov","_startMove","_stopMove","isStereoEnabled","stopStereoView","buttons","preventDefault","_move","_moveAbsolute","touches","length","touchmove_two_fingers","_startMoveZoom","_stopMoveZoom","changedTouches","overlay","hideOverlay","showOverlay","image","ICONS","text","lang","two_fingers","_moveZoom","stopAutorotate","stopAnimation","then","mouse_x","start_mouse_x","clientX","mouse_y","start_mouse_y","clientY","moving","zooming","mouse_history","_logMouseMove","bind","t","x","y","pinch_dist","Math","sqrt","pow","getClosest","target","abs","MOVE_THRESHOLD","_click","move_inertia","isGyroscopeEnabled","_stopMoveInertia","direction","norm","animation_promise","properties","start","end","duration","INERTIA_WINDOW","easing","onTick","finally","boundingRect","getBoundingClientRect","data","client_x","client_y","viewer_x","left","viewer_y","top","intersect","viewerCoordsToVector3","sphericalCoords","vector3ToSphericalCoords","isCubemap","textureCoords","sphericalCoordsToTextureCoords","texture_x","texture_y","dblclick_timeout","dblclick_data","clearTimeout","clone","setTimeout","DBLCLICK_DELAY","log","rotation","pixelRatio","gyro_alpha_offset","offsetLeft","offsetWidth","TwoPI","offsetTop","offsetHeight","PI","p","delta","stopPropagation","normalizeWheel","spinY","mousewheel_factor","enabled","isFullscreenEnabled","startKeyboardControl","stopKeyboardControl","now","Date","push","previous","i","splice"],"mappings":";;;;;;;AAAAA,QACE,SACA,cACA,mBACA,SACAC,EACAC,EACAC,GAEA,aA6jBA,OAxjBAF,EAAkBG,UAAUC,YAAc,WACxCC,OAAOC,iBAAiB,SAAUC,MAG9BA,KAAKC,OAAOC,YACdF,KAAKG,IAAIC,UAAUC,MAAMC,OAAS,OAE9BN,KAAKC,OAAOM,iBACdP,KAAKG,IAAIC,UAAUL,iBAAiB,aAAcC,MAClDA,KAAKG,IAAIC,UAAUL,iBAAiB,aAAcC,QAGlDA,KAAKG,IAAIC,UAAUL,iBAAiB,YAAaC,MACjDF,OAAOC,iBAAiB,UAAWC,OAGrCA,KAAKG,IAAIC,UAAUL,iBAAiB,aAAcC,MAClDF,OAAOC,iBAAiB,WAAYC,MAEpCA,KAAKG,IAAIC,UAAUL,iBAAiB,YAAaC,MACjDA,KAAKG,IAAIC,UAAUL,iBAAiB,YAAaC,OAG/CP,EAAkBe,OAAOC,iBAC3BC,SAASX,iBAAiBN,EAAkBe,OAAOC,gBAAiBT,MAGlEA,KAAKC,OAAOU,YACdX,KAAKG,IAAIC,UAAUL,iBAAiBN,EAAkBe,OAAOI,gBAAiBZ,MAGhFA,KAAKa,GAAG,gBAAiB,SAASC,GAC5Bd,KAAKe,wBACM,SAATD,GAA4B,UAATA,GACrBd,KAAKgB,yBAUbvB,EAAkBG,UAAUqB,cAAgB,WAC1CnB,OAAOoB,oBAAoB,SAAUlB,MAEjCA,KAAKC,OAAOC,YACdF,KAAKG,IAAIC,UAAUc,oBAAoB,YAAalB,MACpDA,KAAKG,IAAIC,UAAUc,oBAAoB,aAAclB,MACrDA,KAAKG,IAAIC,UAAUc,oBAAoB,aAAclB,MACrDF,OAAOoB,oBAAoB,UAAWlB,MACtCF,OAAOoB,oBAAoB,WAAYlB,MACvCA,KAAKG,IAAIC,UAAUc,oBAAoB,aAAclB,MACrDA,KAAKG,IAAIC,UAAUc,oBAAoB,YAAalB,MACpDA,KAAKG,IAAIC,UAAUc,oBAAoB,YAAalB,OAGlDP,EAAkBe,OAAOC,iBAC3BC,SAASQ,oBAAoBzB,EAAkBe,OAAOC,gBAAiBT,MAGrEA,KAAKC,OAAOU,YACdX,KAAKG,IAAIC,UAAUc,oBAAoBzB,EAAkBe,OAAOI,gBAAiBZ,MAGnFA,KAAKmB,IAAI,kBAQX1B,EAAkBG,UAAUwB,YAAc,SAASC,GACjD,OAAQA,EAAIC,MAEV,IAAK,SAAU5B,EAAS6B,SAASvB,KAAKwB,YAAa,IAAK,MACxD,IAAK,UAAexB,KAAKyB,WAAWJ,GAAU,MAC9C,IAAK,YACL,IAAK,aAAerB,KAAK0B,aAAaL,GAAQ,MAC9C,IAAK,aAAerB,KAAK2B,cAAcN,GAAO,MAC9C,IAAK,UACL,IAAK,aAAerB,KAAK4B,WAAWP,GAAU,MAC9C,IAAK,WAAerB,KAAK6B,YAAYR,GAAS,MAC9C,IAAK,YAAerB,KAAK8B,aAAaT,GAAQ,MAC9C,IAAK,YAAerB,KAAK+B,aAAaV,GAAQ,MAC9C,KAAK5B,EAAkBe,OAAOC,gBAAkBT,KAAKgC,qBAAuB,MAC5E,KAAKvC,EAAkBe,OAAOI,gBAAkBZ,KAAKiC,cAAcZ,KAUvE5B,EAAkBG,UAAU4B,UAAY,WAClCxB,KAAKI,UAAU8B,cAAgBlC,KAAKmC,KAAKC,KAAKC,OAASrC,KAAKI,UAAUkC,eAAiBtC,KAAKmC,KAAKC,KAAKG,SACxGvC,KAAKmC,KAAKC,KAAKC,MAAQG,SAASxC,KAAKI,UAAU8B,aAC/ClC,KAAKmC,KAAKC,KAAKG,OAASC,SAASxC,KAAKI,UAAUkC,cAChDtC,KAAKmC,KAAKM,OAASzC,KAAKmC,KAAKC,KAAKC,MAAQrC,KAAKmC,KAAKC,KAAKG,OACzDvC,KAAK0C,cAED1C,KAAK2C,WACN3C,KAAK4C,cAAgB5C,KAAK2C,UAAUE,QAAQ7C,KAAKmC,KAAKC,KAAKC,MAAOrC,KAAKmC,KAAKC,KAAKG,QASpFvC,KAAK8C,QAAQ,eAAgB9C,KAAK+C,aAStCtD,EAAkBG,UAAU6B,WAAa,SAASJ,GAChD,IAAI2B,EAAQ,EACRC,EAAO,EACPC,EAAQ,EAERC,EAAMzD,EAAS0D,YAAY/B,GAG/B,OAFarB,KAAKC,OAAOoD,SAASF,IAIhC,IAAK,mBAAoBF,EAAO,IAAM,MACtC,IAAK,qBAAsBA,GAAQ,IAAM,MACzC,IAAK,uBAAwBD,EAAQ,IAAM,MAC3C,IAAK,sBAAuBA,GAAS,IAAM,MAC3C,IAAK,SAAUE,EAAQ,EAAG,MAC1B,IAAK,UAAWA,GAAS,EAAG,MAC5B,IAAK,mBAAoBlD,KAAKsD,mBAIlB,IAAVJ,EACFlD,KAAKuD,KAAKvD,KAAKmC,KAAKqB,SAAWN,EAAQlD,KAAKC,OAAOwD,YAEnC,IAATR,GAAwB,IAAVD,GACrBhD,KAAK0D,QACHC,UAAW3D,KAAKmC,KAAKyB,SAASD,UAAYX,EAAQhD,KAAKmC,KAAK0B,WAAa7D,KAAKmC,KAAK2B,KACnFC,SAAU/D,KAAKmC,KAAKyB,SAASG,SAAWd,EAAOjD,KAAKmC,KAAK0B,WAAa7D,KAAKmC,KAAK6B,QAUtFvE,EAAkBG,UAAU8B,aAAe,SAASL,GAClDrB,KAAKiE,WAAW5C,IAQlB5B,EAAkBG,UAAUgC,WAAa,SAASP,GAChDrB,KAAKkE,UAAU7C,GAEXrB,KAAKmE,mBACPnE,KAAKoE,kBAST3E,EAAkBG,UAAUkC,aAAe,SAAST,GAC9B,IAAhBA,EAAIgD,SACNhD,EAAIiD,iBACJtE,KAAKuE,MAAMlD,IAEJrB,KAAKC,OAAOM,iBACnBP,KAAKwE,cAAcnD,IASvB5B,EAAkBG,UAAU+B,cAAgB,SAASN,GACxB,IAAvBA,EAAIoD,QAAQC,OACT1E,KAAKC,OAAO0E,uBACf3E,KAAKiE,WAAW5C,EAAIoD,QAAQ,IAGA,IAAvBpD,EAAIoD,QAAQC,QACnB1E,KAAK4E,eAAevD,IASxB5B,EAAkBG,UAAUiC,YAAc,SAASR,GACtB,IAAvBA,EAAIoD,QAAQC,OACd1E,KAAK6E,gBAEyB,IAAvBxD,EAAIoD,QAAQC,SACnB1E,KAAKkE,UAAU7C,EAAIyD,eAAe,IAE9B9E,KAAKC,OAAO0E,uBACd3E,KAAK+E,QAAQC,gBAUnBvF,EAAkBG,UAAUmC,aAAe,SAASV,GACvB,IAAvBA,EAAIoD,QAAQC,OACV1E,KAAKC,OAAO0E,sBACd3E,KAAK+E,QAAQE,aACXC,MAAOzF,EAAkB0F,MAAM,eAC/BC,KAAMpF,KAAKC,OAAOoF,KAAKC,YAAY,MAIrCjE,EAAIiD,iBACJtE,KAAKuE,MAAMlD,EAAIoD,QAAQ,KAGK,IAAvBpD,EAAIoD,QAAQC,SACnBrD,EAAIiD,iBACJtE,KAAKuF,UAAUlE,KASnB5B,EAAkBG,UAAUqE,WAAa,SAAS5C,GAChDrB,KAAKwF,iBACLxF,KAAKyF,gBACFC,KAAK,WACJ1F,KAAKmC,KAAKwD,QAAU3F,KAAKmC,KAAKyD,cAAgBpD,SAASnB,EAAIwE,SAC3D7F,KAAKmC,KAAK2D,QAAU9F,KAAKmC,KAAK4D,cAAgBvD,SAASnB,EAAI2E,SAC3DhG,KAAKmC,KAAK8D,QAAS,EACnBjG,KAAKmC,KAAK+D,SAAU,EAEpBlG,KAAKmC,KAAKgE,cAAczB,OAAS,EACjC1E,KAAKoG,cAAc/E,IACnBgF,KAAKrG,QAQXP,EAAkBG,UAAUgF,eAAiB,SAASvD,GACpD,IAAIiF,IACAC,EAAG/D,SAASnB,EAAIoD,QAAQ,GAAGoB,SAAUW,EAAGhE,SAASnB,EAAIoD,QAAQ,GAAGuB,WAChEO,EAAG/D,SAASnB,EAAIoD,QAAQ,GAAGoB,SAAUW,EAAGhE,SAASnB,EAAIoD,QAAQ,GAAGuB,WAGpEhG,KAAKmC,KAAKsE,WAAaC,KAAKC,KAAKD,KAAKE,IAAIN,EAAE,GAAGC,EAAID,EAAE,GAAGC,EAAG,GAAKG,KAAKE,IAAIN,EAAE,GAAGE,EAAIF,EAAE,GAAGE,EAAG,IAC1FxG,KAAKmC,KAAKwD,QAAU3F,KAAKmC,KAAKyD,eAAiBU,EAAE,GAAGC,EAAID,EAAE,GAAGC,GAAK,EAClEvG,KAAKmC,KAAK2D,QAAU9F,KAAKmC,KAAKyD,eAAiBU,EAAE,GAAGE,EAAIF,EAAE,GAAGE,GAAK,EAClExG,KAAKmC,KAAK8D,QAAS,EACnBjG,KAAKmC,KAAK+D,SAAU,GAStBzG,EAAkBG,UAAUsE,UAAY,SAAS7C,GAC1C3B,EAASmH,WAAWxF,EAAIyF,OAAQ,aAIjC9G,KAAKmC,KAAK8D,SAERS,KAAKK,IAAI1F,EAAIwE,QAAU7F,KAAKmC,KAAKyD,eAAiBnG,EAAkBuH,gBAAkBN,KAAKK,IAAI1F,EAAI2E,QAAUhG,KAAKmC,KAAK4D,eAAiBtG,EAAkBuH,gBAC5JhH,KAAKiH,OAAO5F,GACZrB,KAAKmC,KAAK8D,QAAS,GAGZjG,KAAKC,OAAOiH,eAAiBlH,KAAKmH,sBACzCnH,KAAKoG,cAAc/E,GACnBrB,KAAKoH,iBAAiB/F,IAGtBrB,KAAKmC,KAAK8D,QAAS,EAGrBjG,KAAKmC,KAAKgE,cAAczB,OAAS,IAQrCjF,EAAkBG,UAAUiF,cAAgB,WAC1C7E,KAAKmC,KAAKgE,cAAczB,OAAS,EACjC1E,KAAKmC,KAAK8D,QAAS,EACnBjG,KAAKmC,KAAK+D,SAAU,GAQtBzG,EAAkBG,UAAUwH,iBAAmB,SAAS/F,GACtD,IAAIgG,EACChG,EAAIwE,QAAU7F,KAAKmC,KAAKgE,cAAc,GAAG,GAD1CkB,EAEChG,EAAI2E,QAAUhG,KAAKmC,KAAKgE,cAAc,GAAG,GAG1CmB,EAAOZ,KAAKC,KAAKU,EAAcA,EAAcA,EAAcA,GAE/DrH,KAAKmC,KAAKoF,kBAAoB,IAAI5H,GAChC6H,YACE3B,SAAW4B,MAAOpG,EAAIwE,QAAS6B,IAAKrG,EAAIwE,QAAUwB,GAClDrB,SAAWyB,MAAOpG,EAAI2E,QAAS0B,IAAKrG,EAAI2E,QAAUqB,IAEpDM,SAAUL,EAAO7H,EAAkBmI,eAAiB,IACpDC,OAAQ,UACRC,OAAQ,SAASN,GACfxH,KAAKuE,MAAMiD,GAAY,IACvBnB,KAAKrG,QAEN+H,QAAQ,WACP/H,KAAKmC,KAAK8D,QAAS,GACnBI,KAAKrG,QAUXP,EAAkBG,UAAUqH,OAAS,SAAS5F,GAC5C,IAAI2G,EAAehI,KAAKI,UAAU6H,wBAE9BC,GACFpB,OAAQzF,EAAIyF,OACZqB,SAAU9G,EAAIwE,QACduC,SAAU/G,EAAI2E,QACdqC,SAAU7F,SAASnB,EAAIwE,QAAUmC,EAAaM,MAC9CC,SAAU/F,SAASnB,EAAI2E,QAAUgC,EAAaQ,MAG5CC,EAAYzI,KAAK0I,uBAAwBnC,EAAG2B,EAAKG,SAAU7B,EAAG0B,EAAKK,WAEvE,GAAIE,EAAW,CACb,IAAIE,EAAkB3I,KAAK4I,yBAAyBH,GAKpD,GAJAP,EAAKvE,UAAYgF,EAAgBhF,UACjCuE,EAAKnE,SAAW4E,EAAgB5E,UAG3B/D,KAAKmC,KAAK0G,UAAW,CACxB,IAAIC,EAAgB9I,KAAK+I,gCAAiCpF,UAAWuE,EAAKvE,UAAWI,SAAUmE,EAAKnE,WACpGmE,EAAKc,UAAYF,EAAcvC,EAC/B2B,EAAKe,UAAYH,EAActC,EAG5BxG,KAAKmC,KAAK+G,kBAgBTxC,KAAKK,IAAI/G,KAAKmC,KAAKgH,cAAchB,SAAWD,EAAKC,UAAY1I,EAAkBuH,gBACjFN,KAAKK,IAAI/G,KAAKmC,KAAKgH,cAAcf,SAAWF,EAAKE,UAAY3I,EAAkBuH,gBAO/EhH,KAAK8C,QAAQ,WAAY9C,KAAKmC,KAAKgH,eAGrCC,aAAapJ,KAAKmC,KAAK+G,kBACvBlJ,KAAKmC,KAAK+G,iBAAmB,KAC7BlJ,KAAKmC,KAAKgH,cAAgB,OAtB1BnJ,KAAK8C,QAAQ,QAASoF,GAEtBlI,KAAKmC,KAAKgH,cAAgBzJ,EAAS2J,MAAMnB,GACzClI,KAAKmC,KAAK+G,iBAAmBI,WAAW,WACtCtJ,KAAKmC,KAAK+G,iBAAmB,KAC7BlJ,KAAKmC,KAAKgH,cAAgB,MAC1B9C,KAAKrG,MAAOP,EAAkB8J,mBA2BtC9J,EAAkBG,UAAU2E,MAAQ,SAASlD,EAAKmI,GAChD,GAAIxJ,KAAKmC,KAAK8D,OAAQ,CACpB,IAAIM,EAAI/D,SAASnB,EAAIwE,SACjBW,EAAIhE,SAASnB,EAAI2E,SAEjByD,GACF9F,WAAY4C,EAAIvG,KAAKmC,KAAKwD,SAAW3F,KAAKmC,KAAKC,KAAKC,MAAQrC,KAAKmC,KAAK0B,WAAa7D,KAAKmC,KAAK2B,KAAOrE,EAAkBe,OAAOkJ,WAC7H3F,UAAWyC,EAAIxG,KAAKmC,KAAK2D,SAAW9F,KAAKmC,KAAKC,KAAKG,OAASvC,KAAKmC,KAAK0B,WAAa7D,KAAKmC,KAAK6B,KAAOvE,EAAkBe,OAAOkJ,YAG3H1J,KAAKmH,qBACPnH,KAAKmC,KAAKwH,mBAAqBF,EAAS9F,UAGxC3D,KAAK0D,QACHC,UAAW3D,KAAKmC,KAAKyB,SAASD,UAAY8F,EAAS9F,UACnDI,SAAU/D,KAAKmC,KAAKyB,SAASG,SAAW0F,EAAS1F,WAIrD/D,KAAKmC,KAAKwD,QAAUY,EACpBvG,KAAKmC,KAAK2D,QAAUU,GAER,IAARgD,GACFxJ,KAAKoG,cAAc/E,KAUzB5B,EAAkBG,UAAU4E,cAAgB,SAASnD,GAC/CrB,KAAKmC,KAAK8D,QACZjG,KAAK0D,QACHC,YAAatC,EAAIwE,QAAU7F,KAAKI,UAAUwJ,YAAc5J,KAAKI,UAAUyJ,YAAc,IAAOnK,EAASoK,MACrG/F,YAAa1C,EAAI2E,QAAUhG,KAAKI,UAAU2J,WAAa/J,KAAKI,UAAU4J,aAAe,IAAOtD,KAAKuD,MAUvGxK,EAAkBG,UAAU2F,UAAY,SAASlE,GAC/C,GAAIrB,KAAKmC,KAAK+D,SAAWlG,KAAKmC,KAAK8D,OAAQ,CACzC,IAAIK,IACAC,EAAG/D,SAASnB,EAAIoD,QAAQ,GAAGoB,SAAUW,EAAGhE,SAASnB,EAAIoD,QAAQ,GAAGuB,WAChEO,EAAG/D,SAASnB,EAAIoD,QAAQ,GAAGoB,SAAUW,EAAGhE,SAASnB,EAAIoD,QAAQ,GAAGuB,WAGhEkE,EAAIxD,KAAKC,KAAKD,KAAKE,IAAIN,EAAE,GAAGC,EAAID,EAAE,GAAGC,EAAG,GAAKG,KAAKE,IAAIN,EAAE,GAAGE,EAAIF,EAAE,GAAGE,EAAG,IACvE2D,EAAQ,IAAMD,EAAIlK,KAAKmC,KAAKsE,YAAczG,KAAKmC,KAAKC,KAAKC,MAE7DrC,KAAKuD,KAAKvD,KAAKmC,KAAKqB,SAAW2G,GAE/BnK,KAAKuE,OACHsB,SAAUS,EAAE,GAAGC,EAAID,EAAE,GAAGC,GAAK,EAC7BP,SAAUM,EAAE,GAAGE,EAAIF,EAAE,GAAGE,GAAK,IAG/BxG,KAAKmC,KAAKsE,WAAayD,IAS3BzK,EAAkBG,UAAUqC,cAAgB,SAASZ,GACnDA,EAAIiD,iBACJjD,EAAI+I,kBAEJ,IAAID,EAA6C,EAArCzK,EAAS2K,eAAehJ,GAAKiJ,MAE3B,IAAVH,GACFnK,KAAKuD,KAAKvD,KAAKmC,KAAKqB,SAAW2G,EAAQnK,KAAKC,OAAOsK,oBASvD9K,EAAkBG,UAAUoC,mBAAqB,WAC/C,IAAIwI,EAAUxK,KAAKyK,sBAEfzK,KAAKC,OAAOoD,WACVmH,EACFxK,KAAK0K,uBAGL1K,KAAK2K,uBAUT3K,KAAK8C,QAAQ,qBAAsB0H,IAUrC/K,EAAkBG,UAAUwG,cAAgB,SAAS/E,GACnD,IAAIuJ,EAAMC,KAAKD,MACf5K,KAAKmC,KAAKgE,cAAc2E,MAAMF,EAAKvJ,EAAIwE,QAASxE,EAAI2E,UAIpD,IAFA,IAAI+E,EAAW,KAENC,EAAI,EAAGA,EAAIhL,KAAKmC,KAAKgE,cAAczB,QACtC1E,KAAKmC,KAAKgE,cAAc,GAAG6E,GAAKJ,EAAMnL,EAAkBmI,eAC1D5H,KAAKmC,KAAKgE,cAAc8E,OAAOD,EAAG,GAE3BD,GAAY/K,KAAKmC,KAAKgE,cAAc,GAAG6E,GAAKD,EAAWtL,EAAkBmI,eAAiB,IACjG5H,KAAKmC,KAAKgE,cAAc8E,OAAO,EAAGD,GAClCA,EAAI,EACJD,EAAW/K,KAAKmC,KAAKgE,cAAc,GAAG6E,KAGtCA,IACAD,EAAW/K,KAAKmC,KAAKgE,cAAc,GAAG6E,KAKrCvL","file":"../../_psv/events.js","sourcesContent":["define([\n  \"./ctoc\",\n  \"../PSVUtils\",\n  \"../PSVAnimation\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVAnimation\n){\n  \"use strict\";\n  /**\n   * @summary Adds all needed event listeners\n   * @private\n   */\n  PhotoSphereViewer.prototype._bindEvents = function() {\n    window.addEventListener('resize', this);\n\n    // all interation events are binded to the HUD only\n    if (this.config.mousemove) {\n      this.hud.container.style.cursor = 'move';\n\n      if (this.config.mousemove_hover) {\n        this.hud.container.addEventListener('mouseenter', this);\n        this.hud.container.addEventListener('mouseleave', this);\n      }\n      else {\n        this.hud.container.addEventListener('mousedown', this);\n        window.addEventListener('mouseup', this);\n      }\n\n      this.hud.container.addEventListener('touchstart', this);\n      window.addEventListener('touchend', this);\n\n      this.hud.container.addEventListener('mousemove', this);\n      this.hud.container.addEventListener('touchmove', this);\n    }\n\n    if (PhotoSphereViewer.SYSTEM.fullscreenEvent) {\n      document.addEventListener(PhotoSphereViewer.SYSTEM.fullscreenEvent, this);\n    }\n\n    if (this.config.mousewheel) {\n      this.hud.container.addEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, this);\n    }\n\n    this.on('_side-reached', function(side) {\n      if (this.isAutorotateEnabled()) {\n        if (side === 'left' || side === 'right') {\n          this._reverseAutorotate();\n        }\n      }\n    });\n  };\n\n  /**\n   * @summary Removes all event listeners\n   * @private\n   */\n  PhotoSphereViewer.prototype._unbindEvents = function() {\n    window.removeEventListener('resize', this);\n\n    if (this.config.mousemove) {\n      this.hud.container.removeEventListener('mousedown', this);\n      this.hud.container.removeEventListener('mouseenter', this);\n      this.hud.container.removeEventListener('touchstart', this);\n      window.removeEventListener('mouseup', this);\n      window.removeEventListener('touchend', this);\n      this.hud.container.removeEventListener('mouseleave', this);\n      this.hud.container.removeEventListener('mousemove', this);\n      this.hud.container.removeEventListener('touchmove', this);\n    }\n\n    if (PhotoSphereViewer.SYSTEM.fullscreenEvent) {\n      document.removeEventListener(PhotoSphereViewer.SYSTEM.fullscreenEvent, this);\n    }\n\n    if (this.config.mousewheel) {\n      this.hud.container.removeEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, this);\n    }\n\n    this.off('_side-reached');\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype.handleEvent = function(evt) {\n    switch (evt.type) {\n      // @formatter:off\n      case 'resize': PSVUtils.throttle(this._onResize(), 50); break;\n      case 'keydown':     this._onKeyDown(evt);     break;\n      case 'mousedown':   this._onMouseDown(evt);   break;\n      case 'mouseenter':  this._onMouseDown(evt);   break;\n      case 'touchstart':  this._onTouchStart(evt);  break;\n      case 'mouseup':     this._onMouseUp(evt);     break;\n      case 'mouseleave':  this._onMouseUp(evt);     break;\n      case 'touchend':    this._onTouchEnd(evt);    break;\n      case 'mousemove':   this._onMouseMove(evt);   break;\n      case 'touchmove':   this._onTouchMove(evt);   break;\n      case PhotoSphereViewer.SYSTEM.fullscreenEvent:  this._fullscreenToggled();  break;\n      case PhotoSphereViewer.SYSTEM.mouseWheelEvent:  this._onMouseWheel(evt);    break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Resizes the canvas when the window is resized\n   * @fires PhotoSphereViewer.size-updated\n   * @private\n   */\n  PhotoSphereViewer.prototype._onResize = function() {\n    if (this.container.clientWidth !== this.prop.size.width || this.container.clientHeight !== this.prop.size.height) {\n      this.prop.size.width = parseInt(this.container.clientWidth);\n      this.prop.size.height = parseInt(this.container.clientHeight);\n      this.prop.aspect = this.prop.size.width / this.prop.size.height;\n      this.needsUpdate();\n\n      if (this.renderer) {\n        (this.stereoEffect || this.renderer).setSize(this.prop.size.width, this.prop.size.height);\n      }\n\n      /**\n       * @event size-updated\n       * @memberof PhotoSphereViewer\n       * @summary Triggered when the viewer size changes\n       * @param {PhotoSphereViewer.Size} size\n       */\n      this.trigger('size-updated', this.getSize());\n    }\n  };\n\n  /**\n   * @summary Handles keyboard events\n   * @param {KeyboardEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onKeyDown = function(evt) {\n    var dLong = 0;\n    var dLat = 0;\n    var dZoom = 0;\n\n    var key = PSVUtils.getEventKey(evt);\n    var action = this.config.keyboard[key];\n\n    switch (action) {\n      // @formatter:off\n      case 'rotateLatitudeUp': dLat = 0.01; break;\n      case 'rotateLatitudeDown': dLat = -0.01; break;\n      case 'rotateLongitudeRight': dLong = 0.01; break;\n      case 'rotateLongitudeLeft': dLong = -0.01; break;\n      case 'zoomIn': dZoom = 1; break;\n      case 'zoomOut': dZoom = -1; break;\n      case 'toggleAutorotate': this.toggleAutorotate(); break;\n      // @formatter:on\n    }\n\n    if (dZoom !== 0) {\n      this.zoom(this.prop.zoom_lvl + dZoom * this.config.zoom_speed);\n    }\n    else if (dLat !== 0 || dLong !== 0) {\n      this.rotate({\n        longitude: this.prop.position.longitude + dLong * this.prop.move_speed * this.prop.hFov,\n        latitude: this.prop.position.latitude + dLat * this.prop.move_speed * this.prop.vFov\n      });\n    }\n  };\n\n  /**\n   * @summary Handles mouse button events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseDown = function(evt) {\n    this._startMove(evt);\n  };\n\n  /**\n   * @summary Handles mouse buttons events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseUp = function(evt) {\n    this._stopMove(evt);\n\n    if (this.isStereoEnabled()) {\n      this.stopStereoView();\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseMove = function(evt) {\n    if (evt.buttons !== 0) {\n      evt.preventDefault();\n      this._move(evt);\n    }\n    else if (this.config.mousemove_hover) {\n      this._moveAbsolute(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchStart = function(evt) {\n    if (evt.touches.length === 1) {\n      if (!this.config.touchmove_two_fingers) {\n        this._startMove(evt.touches[0]);\n      }\n    }\n    else if (evt.touches.length === 2) {\n      this._startMoveZoom(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchEnd = function(evt) {\n    if (evt.touches.length === 1) {\n      this._stopMoveZoom();\n    }\n    else if (evt.touches.length === 0) {\n      this._stopMove(evt.changedTouches[0]);\n\n      if (this.config.touchmove_two_fingers) {\n        this.overlay.hideOverlay();\n      }\n    }\n  };\n\n  /**\n   * @summary Handles touch move events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchMove = function(evt) {\n    if (evt.touches.length === 1) {\n      if (this.config.touchmove_two_fingers) {\n        this.overlay.showOverlay({\n          image: PhotoSphereViewer.ICONS['gesture.svg'],\n          text: this.config.lang.two_fingers[0]\n        });\n      }\n      else {\n        evt.preventDefault();\n        this._move(evt.touches[0]);\n      }\n    }\n    else if (evt.touches.length === 2) {\n      evt.preventDefault();\n      this._moveZoom(evt);\n    }\n  };\n\n  /**\n   * @summary Initializes the movement\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._startMove = function(evt) {\n    this.stopAutorotate();\n    this.stopAnimation()\n      .then(function() {\n        this.prop.mouse_x = this.prop.start_mouse_x = parseInt(evt.clientX);\n        this.prop.mouse_y = this.prop.start_mouse_y = parseInt(evt.clientY);\n        this.prop.moving = true;\n        this.prop.zooming = false;\n\n        this.prop.mouse_history.length = 0;\n        this._logMouseMove(evt);\n      }.bind(this));\n  };\n\n  /**\n   * @summary Initializes the combines move and zoom\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._startMoveZoom = function(evt) {\n    var t = [\n      { x: parseInt(evt.touches[0].clientX), y: parseInt(evt.touches[0].clientY) },\n      { x: parseInt(evt.touches[1].clientX), y: parseInt(evt.touches[1].clientY) }\n    ];\n\n    this.prop.pinch_dist = Math.sqrt(Math.pow(t[0].x - t[1].x, 2) + Math.pow(t[0].y - t[1].y, 2));\n    this.prop.mouse_x = this.prop.start_mouse_x = (t[0].x + t[1].x) / 2;\n    this.prop.mouse_y = this.prop.start_mouse_x = (t[0].y + t[1].y) / 2;\n    this.prop.moving = true;\n    this.prop.zooming = true;\n  };\n\n  /**\n   * @summary Stops the movement\n   * @description If the move threshold was not reached a click event is triggered, otherwise an animation is launched to simulate inertia\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMove = function(evt) {\n    if (!PSVUtils.getClosest(evt.target, '.psv-hud')) {\n      return;\n    }\n\n    if (this.prop.moving) {\n      // move threshold to trigger a click\n      if (Math.abs(evt.clientX - this.prop.start_mouse_x) < PhotoSphereViewer.MOVE_THRESHOLD && Math.abs(evt.clientY - this.prop.start_mouse_y) < PhotoSphereViewer.MOVE_THRESHOLD) {\n        this._click(evt); // deleted by lwf\n        this.prop.moving = false;\n      }\n      // inertia animation\n      else if (this.config.move_inertia && !this.isGyroscopeEnabled()) {\n        this._logMouseMove(evt);\n        this._stopMoveInertia(evt);\n      }\n      else {\n        this.prop.moving = false;\n      }\n\n      this.prop.mouse_history.length = 0;\n    }\n  };\n\n  /**\n   * @summary Stops the combined move and zoom\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMoveZoom = function() {\n    this.prop.mouse_history.length = 0;\n    this.prop.moving = false;\n    this.prop.zooming = false;\n  };\n\n  /**\n   * @summary Performs an animation to simulate inertia when the movement stops\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMoveInertia = function(evt) {\n    var direction = {\n      x: evt.clientX - this.prop.mouse_history[0][1],\n      y: evt.clientY - this.prop.mouse_history[0][2]\n    };\n\n    var norm = Math.sqrt(direction.x * direction.x + direction.y * direction.y);\n\n    this.prop.animation_promise = new PSVAnimation({\n      properties: {\n        clientX: { start: evt.clientX, end: evt.clientX + direction.x },\n        clientY: { start: evt.clientY, end: evt.clientY + direction.y }\n      },\n      duration: norm * PhotoSphereViewer.INERTIA_WINDOW / 100,\n      easing: 'outCirc',\n      onTick: function(properties) {\n        this._move(properties, false);\n      }.bind(this)\n    })\n      .finally(function() {\n        this.prop.moving = false;\n      }.bind(this));\n  };\n\n  /**\n   * @summary Triggers an event with all coordinates when a simple click is performed\n   * @param {MouseEvent|Touch} evt\n   * @fires PhotoSphereViewer.click\n   * @fires PhotoSphereViewer.dblclick\n   * @private\n   */\n  PhotoSphereViewer.prototype._click = function(evt) {\n    var boundingRect = this.container.getBoundingClientRect();\n\n    var data = {\n      target: evt.target,\n      client_x: evt.clientX,\n      client_y: evt.clientY,\n      viewer_x: parseInt(evt.clientX - boundingRect.left),\n      viewer_y: parseInt(evt.clientY - boundingRect.top)\n    };\n\n    var intersect = this.viewerCoordsToVector3({ x: data.viewer_x, y: data.viewer_y });\n\n    if (intersect) {\n      var sphericalCoords = this.vector3ToSphericalCoords(intersect);\n      data.longitude = sphericalCoords.longitude;\n      data.latitude = sphericalCoords.latitude;\n\n      // TODO: for cubemap, computes texture's index and coordinates\n      if (!this.prop.isCubemap) {\n        var textureCoords = this.sphericalCoordsToTextureCoords({ longitude: data.longitude, latitude: data.latitude });\n        data.texture_x = textureCoords.x;\n        data.texture_y = textureCoords.y;\n      }\n\n      if (!this.prop.dblclick_timeout) {\n        /**\n         * @event click\n         * @memberof PhotoSphereViewer\n         * @summary Triggered when the user clicks on the viewer (everywhere excluding the navbar and the side panel)\n         * @param {PhotoSphereViewer.ClickData} data\n         */\n        this.trigger('click', data);\n\n        this.prop.dblclick_data = PSVUtils.clone(data);\n        this.prop.dblclick_timeout = setTimeout(function() {\n          this.prop.dblclick_timeout = null;\n          this.prop.dblclick_data = null;\n        }.bind(this), PhotoSphereViewer.DBLCLICK_DELAY);\n      }\n      else {\n        if (Math.abs(this.prop.dblclick_data.client_x - data.client_x) < PhotoSphereViewer.MOVE_THRESHOLD &&\n          Math.abs(this.prop.dblclick_data.client_y - data.client_y) < PhotoSphereViewer.MOVE_THRESHOLD) {\n          /**\n           * @event dblclick\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the user double clicks on the viewer. The simple `click` event is always fired before `dblclick`\n           * @param {PhotoSphereViewer.ClickData} data\n           */\n          this.trigger('dblclick', this.prop.dblclick_data);\n        }\n\n        clearTimeout(this.prop.dblclick_timeout);\n        this.prop.dblclick_timeout = null;\n        this.prop.dblclick_data = null;\n      }\n    }\n  };\n\n  /**\n   * @summary Performs movement\n   * @param {MouseEvent|Touch} evt\n   * @param {boolean} [log=true]\n   * @private\n   */\n  PhotoSphereViewer.prototype._move = function(evt, log) {\n    if (this.prop.moving) {\n      var x = parseInt(evt.clientX);\n      var y = parseInt(evt.clientY);\n\n      var rotation = {\n        longitude: (x - this.prop.mouse_x) / this.prop.size.width * this.prop.move_speed * this.prop.hFov * PhotoSphereViewer.SYSTEM.pixelRatio,\n        latitude: (y - this.prop.mouse_y) / this.prop.size.height * this.prop.move_speed * this.prop.vFov * PhotoSphereViewer.SYSTEM.pixelRatio\n      };\n\n      if (this.isGyroscopeEnabled()) {\n        this.prop.gyro_alpha_offset += rotation.longitude;\n      }\n      else {\n        this.rotate({\n          longitude: this.prop.position.longitude - rotation.longitude,\n          latitude: this.prop.position.latitude + rotation.latitude\n        });\n      }\n\n      this.prop.mouse_x = x;\n      this.prop.mouse_y = y;\n\n      if (log !== false) {\n        this._logMouseMove(evt);\n      }\n    }\n  };\n\n  /**\n   * @summary Performs movement absolute to cursor position in viewer\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._moveAbsolute = function(evt) {\n    if (this.prop.moving) {\n      this.rotate({\n        longitude: ((evt.clientX - this.container.offsetLeft) / this.container.offsetWidth - 0.5) * PSVUtils.TwoPI,\n        latitude: -((evt.clientY - this.container.offsetTop) / this.container.offsetHeight - 0.5) * Math.PI\n      });\n    }\n  };\n\n  /**\n   * @summary Perfoms combines move and zoom\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._moveZoom = function(evt) {\n    if (this.prop.zooming && this.prop.moving) {\n      var t = [\n        { x: parseInt(evt.touches[0].clientX), y: parseInt(evt.touches[0].clientY) },\n        { x: parseInt(evt.touches[1].clientX), y: parseInt(evt.touches[1].clientY) }\n      ];\n\n      var p = Math.sqrt(Math.pow(t[0].x - t[1].x, 2) + Math.pow(t[0].y - t[1].y, 2));\n      var delta = 80 * (p - this.prop.pinch_dist) / this.prop.size.width;\n\n      this.zoom(this.prop.zoom_lvl + delta);\n\n      this._move({\n        clientX: (t[0].x + t[1].x) / 2,\n        clientY: (t[0].y + t[1].y) / 2\n      });\n\n      this.prop.pinch_dist = p;\n    }\n  };\n\n  /**\n   * @summary Handles mouse wheel events\n   * @param {MouseWheelEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseWheel = function(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    var delta = PSVUtils.normalizeWheel(evt).spinY * 5;\n\n    if (delta !== 0) {\n      this.zoom(this.prop.zoom_lvl - delta * this.config.mousewheel_factor);\n    }\n  };\n\n  /**\n   * @summary Handles fullscreen events\n   * @fires PhotoSphereViewer.fullscreen-updated\n   * @private\n   */\n  PhotoSphereViewer.prototype._fullscreenToggled = function() {\n    var enabled = this.isFullscreenEnabled();\n\n    if (this.config.keyboard) {\n      if (enabled) {\n        this.startKeyboardControl();\n      }\n      else {\n        this.stopKeyboardControl();\n      }\n    }\n\n    /**\n     * @event fullscreen-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the fullscreen mode is enabled/disabled\n     * @param {boolean} enabled\n     */\n    this.trigger('fullscreen-updated', enabled);\n  };\n\n  /**\n   * @summary Stores each mouse position during a mouse move\n   * @description Positions older than \"INERTIA_WINDOW\" are removed<br>\n   *     Positions before a pause of \"INERTIA_WINDOW\" / 10 are removed\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._logMouseMove = function(evt) {\n    var now = Date.now();\n    this.prop.mouse_history.push([now, evt.clientX, evt.clientY]);\n\n    var previous = null;\n\n    for (var i = 0; i < this.prop.mouse_history.length;) {\n      if (this.prop.mouse_history[0][i] < now - PhotoSphereViewer.INERTIA_WINDOW) {\n        this.prop.mouse_history.splice(i, 1);\n      }\n      else if (previous && this.prop.mouse_history[0][i] - previous > PhotoSphereViewer.INERTIA_WINDOW / 10) {\n        this.prop.mouse_history.splice(0, i);\n        i = 0;\n        previous = this.prop.mouse_history[0][i];\n      }\n      else {\n        i++;\n        previous = this.prop.mouse_history[0][i];\n      }\n    }\n  };\n\n  return PhotoSphereViewer;\n});"]}