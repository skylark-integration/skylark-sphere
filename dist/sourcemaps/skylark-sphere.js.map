{"version":3,"sources":["skylark-sphere.js"],"names":["define","Emitter","PhotoSphereViewer","inherit","prototype","off","event","f","call","this","on","e","args","Array","slice","arguments","handleEvent","arg1","arg2","arg3","one","PSVError","message","Error","captureStackTrace","stack","Object","create","name","constructor","THREE","object","scope","rotation","reorder","enabled","deviceOrientation","screenOrientation","alphaOffset","onDeviceOrientationChangeEvent","onScreenOrientationChangeEvent","window","orientation","setObjectQuaternion","zee","Vector3","euler","Euler","q0","Quaternion","q1","Math","sqrt","quaternion","alpha","beta","gamma","orient","set","setFromEuler","multiply","setFromAxisAngle","connect","undefined","DeviceOrientationEvent","requestPermission","then","response","addEventListener","catch","error","console","disconnect","removeEventListener","update","device","MathUtils","degToRad","dispose","renderer","_stereo","StereoCamera","aspect","size","Vector2","setEyeSeparation","eyeSep","setSize","width","height","render","scene","camera","updateMatrixWorld","parent","getSize","autoClear","clear","setScissorTest","setScissor","setViewport","cameraL","cameraR","DeviceOrientationControls","StereoEffect","PSVUtils","Utils","TwoPI","PI","HalfPI","svgNS","checkTHREE","components","i","l","length","isCanvasSupported","canvas","document","createElement","getContext","getWebGLCtx","context","some","getParameter","isWebGLSupported","WebGLRenderingContext","isDeviceOrientationSupported","Promise","resolve","listener","isNaN","setTimeout","isTouchEnabled","getMaxTextureWidth","ctx","MAX_TEXTURE_SIZE","toggleClass","element","className","active","classList","toggle","contains","add","remove","currentClassName","getAttribute","currentActive","indexOf","regex","RegExp","replace","setAttribute","addClasses","split","forEach","removeClasses","hasParent","el","parentNode","getClosest","selector","matches","msMatchesSelector","bind","SVGElement","parentElement","mouseWheelEvent","onmousewheel","getEventKey","evt","key","KEYMAP","keyCode","which","MS_KEYMAP","13","27","32","33","34","37","38","39","40","46","107","109","Add","Del","Down","Esc","Left","Right","Spacebar","Subtract","Up","fullscreenEvent","map","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","exit","hasOwnProperty","bound","x","min","max","isInteger","Number","value","isFinite","floor","sum","array","reduce","a","b","dasherize","str","s","toLowerCase","getXMPValue","data","attr","result","match","isFullscreenEnabled","elt","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","getStyle","prop","getComputedStyle","getShortestArc","from","to","tCandidates","candidate","abs","Infinity","getAngle","position1","position2","acos","cos","latitude","longitude","sin","parsePosition","top","left","tokens","toLocaleLowerCase","positions","xFirst","token","reverse","parsed","join","bottom","right","center","parseSpeed","speed","toString","trim","speed_value","parseFloat","speed_unit","parseAngle","angle","zeroCenter","halfCircle","unit","cleanTHREEScene","children","item","Mesh","geometry","material","materials","throttle","func","wait","self","timeout","previous","later","Date","now","apply","remaining","clearTimeout","isPlainObject","obj","getPrototypeOf","proto","deepmerge","target","src","first","merge","isArray","keys","clone","normalizeWheel","sX","sY","pX","pY","detail","wheelDelta","wheelDeltaY","wheelDeltaX","axis","HORIZONTAL_AXIS","deltaY","deltaX","deltaMode","spinX","spinY","pixelX","pixelY","callback","PSVAnimation","options","_cancelled","_resolved","_promise","reject","_resolve","_reject","easing","easings","_start","_options","delay","_delayTimeout","requestAnimationFrame","_run","linear","t","inQuad","outQuad","inOutQuad","inCubic","outCubic","inOutCubic","inQuart","outQuart","inOutQuart","inQuint","outQuint","inOutQuint","inSine","outSine","inOutSine","inExpo","pow","outExpo","inOutExpo","inCirc","outCirc","inOutCirc","timestamp","progress","duration","current","properties","start","end","onTick","onFulfilled","onRejected","p","cancel","finally","onFinally","cancelAnimationFrame","PSVMarker","psv","id","image","html","visible","_dynamicSize","$el","_id","_type","getType","defineProperties","configurable","enumerable","get","type","_def","isNormal","isPolygon","createElementNS","isPolyline","psvMarker","types","allowNone","found","push","destroy","isPoly","isSvg","getScale","zoomLevel","scale","newType","tooltip","content","style","anchor","_updateNormal","_updatePoly","_updateSvg","backgroundImage","innerHTML","transformOrigin","cleanPosition","position3D","sphericalCoordsToVector3","y","cx","cy","r","rx","ry","d","getOwnPropertyNames","setAttributeNS","svgStyle","key_rad","key_px","fill","polygon","splice","coord","sphericalCoords","textureCoordsToSphericalCoords","positions3D","_globals","doT","version","templateSettings","evaluate","interpolate","encode","use","useParams","defineParams","conditional","iterate","varname","strip","append","selfcontained","doNotSkipEncoded","template","compile","log","encodeHTMLSource","encodeHTMLRules","&","<",">","\"","'","/","matchHTML","code","m","eval","startend","startencode","skip","unescape","tmpl","c","def","needhtmlencode","indv","cse","sid","resolveDefs","block","assign","substring","param","v","arg","text","Function","rw","__exp","elsecase","vname","iname","_encodeHTML","PSVComponent","container","publicMethods","method","appendChild","removeChild","hide","display","show","PSVHUD","svgContainer","markers","currentMarker","hoveringMarker","panelOpened","panelOpening","markersButton","navbar","getNavbarButton","clearMarkers","_onMouseEnter","_onMouseLeave","_onMouseMove","_onClick","renderMarkers","_onPanelOpened","_onPanelClosed","addMarker","marker","getMarker","markerId","getCurrentMarker","updateMarker","removeMarker","hideTooltip","gotoMarker","animate","trigger","hideMarker","showMarker","toggleMarker","toggleMarkersList","hideMarkersList","showMarkersList","config","templates","markersList","panel","showPanel","querySelector","_onClickItem","hidePanel","isGyroscopeEnabled","radToDeg","z","isVisible","_getPolyPositions","position2D","_getPolyDimensions","points","pos","position","_getMarkerPosition","_isMarkerVisible","getZoomLevel","lockRotation","transform","dot","direction","rect","getBoundingClientRect","vector3ToViewerCoords","nbVectors","vector","toBeComputed","neighbours","neighbour","invisible","index","pair","_getPolyIntermediaryPoint","filter","P1","P2","C","normalize","N","crossVectors","V","H","addVectors","multiplyScalar","applyAxisAngle","SPHERE_RADIUS","minX","minY","maxX","maxY","showTooltip","box","relatedTarget","moving","boundingRect","clientY","arrow_size","clientX","dblclick","click_event_on_marker","stopImmediatePropagation","opened","stopPropagation","li","dataset","toggleActive","PSVLoader","loader","inner","pixelRatio","SYSTEM","clientWidth","tickness","offsetWidth","loading_img","loading_txt","round","maxWidth","maxHeight","setProgress","clearRect","lineWidth","strokeStyle","beginPath","arc","stroke","PSVNavBarButton","icon","iconActive","_setIcon","lang","title","supported","disable","enable","ICONS","PSVNavBarAutorotateButton","toggleAutorotate","PSVNavBarCustomButton","disabled","hidden","onClick","PSVNavBarDownloadButton","link","href","panorama","download","click","PSVNavBarFullscreenButton","toggleFullscreen","PSVNavBarGyroscopeButton","deviceOrientationSupported","toggleGyroscopeControl","PSVNavBarMarkersButton","hud","PSVNavBarStereoButton","toggleStereoView","PSVNavBarZoomButton","zoom_range","zoom_value","mousedown","buttondown","longPressInterval","longPressTimeout","zoom_minus","zoomOut","zoom_range_bg","zoom_plus","zoomIn","_zoomOut","_zoomIn","_moveZoomValue","zoom_lvl","_stopZoomChange","_initZoomChangeWithMouse","_initZoomChangeByTouch","_changeZoomWithMouse","_changeZoomByTouch","level","_changeZoom","changedTouches","_startLongPressInterval","setInterval","zoom","clearInterval","preventDefault","user_input","parseInt","zoom_level","PSVNavBarCaptionButton","caption","isNotificationVisible","hideNotification","showNotification","PSVNavBarCaption","button","setCaption","_onResize","PSVNavBar","items","DEFAULTS","warn","sort","silent","showNavbar","toggleNavbar","hideNavbar","PSVNotification","PSVOverlay","subtext","hideOverlay","isOverlayVisible","showOverlay","PSVPanel","mouse_x","mouse_y","closeBtn","mousewheel","resizer","_onMouseDown","_onTouchStart","_onTouchMove","_onMouseUp","noMargin","scrollTop","_startResize","_resize","touches","PSVTooltip","leftMap","0","0.5","1","topMap","arrow","isTooltipVisible","isUpdate","tempPos","posClass","arrow_top","arrow_left","_computeTooltipPosition","refresh","offset","topBottom","_construct","loaded","_loadSystem","longitude_range","latitude_range","tilt_up_max","tilt_down_max","max_fov","min_fov","temp_fov","cache_texture","sphere_correction","roll","panorama_roll","keyboard","default_fov","anim_lat","default_lat","anim_speed","fisheye","getElementById","notification","overlay","canvas_container","stereoEffect","noSleep","mesh","raycaster","doControls","needsUpdate","isCubemap","ready","vFov","hFov","move_speed","zooming","start_mouse_x","start_mouse_y","mouse_history","gyro_alpha_offset","pinch_dist","main_reqid","orientation_cb","autorotate_cb","animation_promise","loading_promise","start_timeout","dblclick_data","dblclick_timeout","cache","pano_data","full_width","full_height","cropped_width","cropped_height","cropped_x","cropped_y","TEMPLATES","tpl","photoSphereViewer","_setViewerSize","tempZoom","default_zoom_lvl","_bindEvents","setPanorama","time_anim","startAutorotate","touchEnabled","_render","lookAt","copy","negate","fov","updateProjectionMatrix","_loadXMP","usexmpdata","xhr","XMLHttpRequest","with_credentials","withCredentials","onreadystatechange","readyState","status","textContent","binary","responseText","onprogress","lengthComputable","new_progress","total","onerror","open","send","_loadTexture","tempPanorama","CUBE_MAP","CUBE_HASHMAP","every","side","_loadCubemapTexture","_loadEquirectangularTexture","getPanoramaCache","ImageLoader","setCrossOrigin","load","img","texture","ratio","maxTextureWidth","resized_pano_data","buffer","drawImage","Texture","minFilter","LinearFilter","generateMipmaps","_putPanoramaCache","done","onload","_setTexture","_createScene","Raycaster","WebGLRenderer","setPixelRatio","PerspectiveCamera","Scene","_createCubemap","_createSphere","domElement","SphereGeometry","SPHERE_VERTICES","MeshBasicMaterial","DoubleSide","_setSphereCorrection","cleanSphereCorrection","tilt","pan","BoxGeometry","CUBE_VERTICES","BackSide","_transition","positionProvided","isExtendedPosition","zoomProvided","transparent","opacity","verticalAxis","rotateOnWorldAxis","horizontalAxis","cross","getWorldDirection","transition","rotate","_reverseAutorotate","newSpeed","range","existingCache","unshift","_stopAll","stopAutorotate","stopAnimation","stopGyroscopeControl","stopStereoView","MOVE_THRESHOLD","ANGLE_THRESHOLD","DBLCLICK_DELAY","INERTIA_WINDOW","default_long","zoom_speed","autorotate","fullscreen","gyroscope","stereo","stereo_notification","please_rotate","two_fingers","mousewheel_factor","mousemove","mousemove_hover","touchmove_two_fingers","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","PageUp","PageDown","+","-"," ","move_inertia","cursor","isAutorotateEnabled","_unbindEvents","_onKeyDown","_onTouchEnd","_fullscreenToggled","_onMouseWheel","clientHeight","dLong","dLat","dZoom","action","_startMove","_stopMove","isStereoEnabled","buttons","_move","_moveAbsolute","_startMoveZoom","_stopMoveZoom","_moveZoom","_logMouseMove","_click","_stopMoveInertia","norm","client_x","client_y","viewer_x","viewer_y","intersect","viewerCoordsToVector3","vector3ToSphericalCoords","textureCoords","sphericalCoordsToTextureCoords","texture_x","texture_y","offsetLeft","offsetTop","offsetHeight","delta","startKeyboardControl","stopKeyboardControl","S","devicePixelRatio","dim","test","speedToDuration","point","relativeX","relativeY","relativeLong","relativeLat","phi","theta","atan2","viewerPoint","screen","setFromCamera","intersects","intersectObjects","project","applyRanges","sidesReached","getPosition","stopNoSleep","unlockOrientation","passes","path","_getAutorotateUpdate","last","elapsed","startGyroscopeControl","_getOrientationUpdate","startNoSleep","NoSleep","startStereoView","enterFullscreen","lockOrientation","displayRotateMessageTimeout","displayRotateMessage","innerHeight","innerWidth","lock","unlock","ignoreRange","animProperties","currentPosition","dLongitude","dLatitude","tOffset","atan","tan","resize","preloadPanorama","clearPanoramaCache","shift","main"],"mappings":"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","file":"../skylark-sphere.js","sourcesContent":["define('skylark-sphere/_psv/ctoc',[\r\n\t\"skylark-langx/Emitter\",\r\n],function(\r\n  Emitter\r\n){\r\n  \"use strict\";\r\n  /**\r\n   * Viewer class\r\n   * @param {Object} options - see {@link http://photo-sphere-viewer.js.org/#options}\r\n   * @constructor\r\n   * @fires PhotoSphereViewer.ready\r\n   * @throws {PSVError} when the configuration is incorrect\r\n   */\r\n  var PhotoSphereViewer = Emitter.inherit({\r\n  });\r\n\r\n  PhotoSphereViewer.prototype.off = function(event,f) {\r\n    return  Emitter.prototype.off.call(this,event,f[\"$$\" + event] || f);    \r\n  };\r\n\r\n  PhotoSphereViewer.prototype.on = function(event,f) {\r\n      if (typeof f === 'object') {\r\n\r\n        return Emitter.prototype.on.call(this,event,f[\"$$\" + event] = function(e){\r\n          e.args = Array.prototype.slice.call(arguments,1);\r\n          return f.handleEvent(e);\r\n        });\r\n     } else {\r\n        return Emitter.prototype.on.call(this,event,f[\"$$\" + event] = function(e,arg1,arg2,arg3) {\r\n          return f.call(this,arg1,arg2,arg3);\r\n        },this);\r\n     }\r\n\r\n  };\r\n\r\n  PhotoSphereViewer.prototype.one = function(event,f) {\r\n    if (typeof f === 'object') {\r\n\r\n        return Emitter.prototype.on.call(this,event,\"\",null,f[\"$$\" + event] = function(e){\r\n          e.args = Array.prototype.slice.call(arguments,1);\r\n          return f.handleEvent(e);\r\n        },this,true);\r\n     } else {\r\n        return Emitter.prototype.on.call(this,event,\"\",null,f,this,true);\r\n     }\r\n\r\n  };\r\n\r\n\r\n  return PhotoSphereViewer;\r\n\t\r\n});\ndefine('skylark-sphere/PSVError',[],function(){\n\t\"use strict\";\n\t/**\n\t * Custom error used in the lib\n\t * @param {string} message\n\t * @constructor\n\t */\n\tfunction PSVError(message) {\n\t  this.message = message;\n\n\t  // Use V8's native method if available, otherwise fallback\n\t  if ('captureStackTrace' in Error) {\n\t    Error.captureStackTrace(this, PSVError);\n\t  }\n\t  else {\n\t    this.stack = (new Error()).stack;\n\t  }\n\t}\n\n\tPSVError.prototype = Object.create(Error.prototype);\n\tPSVError.prototype.name = 'PSVError';\n\tPSVError.prototype.constructor = PSVError;\n\n\n\treturn PSVError;\n});\n\ndefine('skylark-threejs-ex/controls/DeviceOrientationControls',[\r\n    \"skylark-threejs\"\r\n], function (THREE) {\r\n    'use strict';\r\n    var DeviceOrientationControls = function (object) {\r\n        var scope = this;\r\n        this.object = object;\r\n        this.object.rotation.reorder('YXZ');\r\n        this.enabled = true;\r\n        this.deviceOrientation = {};\r\n        this.screenOrientation = 0;\r\n        this.alphaOffset = 0;\r\n        var onDeviceOrientationChangeEvent = function (event) {\r\n            scope.deviceOrientation = event;\r\n        };\r\n        var onScreenOrientationChangeEvent = function () {\r\n            scope.screenOrientation = window.orientation || 0;\r\n        };\r\n        var setObjectQuaternion = function () {\r\n            var zee = new THREE.Vector3(0, 0, 1);\r\n            var euler = new THREE.Euler();\r\n            var q0 = new THREE.Quaternion();\r\n            var q1 = new THREE.Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\r\n            return function (quaternion, alpha, beta, gamma, orient) {\r\n                euler.set(beta, alpha, -gamma, 'YXZ');\r\n                quaternion.setFromEuler(euler);\r\n                quaternion.multiply(q1);\r\n                quaternion.multiply(q0.setFromAxisAngle(zee, -orient));\r\n            };\r\n        }();\r\n        this.connect = function () {\r\n            onScreenOrientationChangeEvent();\r\n            if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\r\n                window.DeviceOrientationEvent.requestPermission().then(function (response) {\r\n                    if (response == 'granted') {\r\n                        window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\r\n                        window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\r\n                });\r\n            } else {\r\n                window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\r\n                window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\r\n            }\r\n            scope.enabled = true;\r\n        };\r\n        this.disconnect = function () {\r\n            window.removeEventListener('orientationchange', onScreenOrientationChangeEvent, false);\r\n            window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\r\n            scope.enabled = false;\r\n        };\r\n        this.update = function () {\r\n            if (scope.enabled === false)\r\n                return;\r\n            var device = scope.deviceOrientation;\r\n            if (device) {\r\n                var alpha = device.alpha ? THREE.MathUtils.degToRad(device.alpha) + scope.alphaOffset : 0;\r\n                var beta = device.beta ? THREE.MathUtils.degToRad(device.beta) : 0;\r\n                var gamma = device.gamma ? THREE.MathUtils.degToRad(device.gamma) : 0;\r\n                var orient = scope.screenOrientation ? THREE.MathUtils.degToRad(scope.screenOrientation) : 0;\r\n                setObjectQuaternion(scope.object.quaternion, alpha, beta, gamma, orient);\r\n            }\r\n        };\r\n        this.dispose = function () {\r\n            scope.disconnect();\r\n        };\r\n        this.connect();\r\n    };\r\n    return DeviceOrientationControls;\r\n});\ndefine('skylark-threejs-ex/effects/StereoEffect',[\r\n    \"skylark-threejs\"\r\n], function (THREE) {\r\n    'use strict';\r\n    var StereoEffect = function (renderer) {\r\n        var _stereo = new THREE.StereoCamera();\r\n        _stereo.aspect = 0.5;\r\n        var size = new THREE.Vector2();\r\n        this.setEyeSeparation = function (eyeSep) {\r\n            _stereo.eyeSep = eyeSep;\r\n        };\r\n        this.setSize = function (width, height) {\r\n            renderer.setSize(width, height);\r\n        };\r\n        this.render = function (scene, camera) {\r\n            scene.updateMatrixWorld();\r\n            if (camera.parent === null)\r\n                camera.updateMatrixWorld();\r\n            _stereo.update(camera);\r\n            renderer.getSize(size);\r\n            if (renderer.autoClear)\r\n                renderer.clear();\r\n            renderer.setScissorTest(true);\r\n            renderer.setScissor(0, 0, size.width / 2, size.height);\r\n            renderer.setViewport(0, 0, size.width / 2, size.height);\r\n            renderer.render(scene, _stereo.cameraL);\r\n            renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);\r\n            renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);\r\n            renderer.render(scene, _stereo.cameraR);\r\n            renderer.setScissorTest(false);\r\n        };\r\n    };\r\n\r\n    return StereoEffect;\r\n});\ndefine('skylark-sphere/PSVUtils',[\n  \"skylark-threejs\",\n  \"skylark-threejs-ex/controls/DeviceOrientationControls\",\n  \"skylark-threejs-ex/effects/StereoEffect\",\n  \"./_psv/ctoc\"\n],function(\n  THREE,\n  DeviceOrientationControls,\n  StereoEffect,\n  PhotoSphereViewer\n){\n  \"use strict\";\n  THREE.DeviceOrientationControls = DeviceOrientationControls;\n  THREE.StereoEffect = StereoEffect;\n\n  /**\n   * Static utilities for PSV\n   * @namespace\n   */\n  var PSVUtils = {};\n\n  /**\n   * @summary exposes {@link PSVUtils}\n   * @member {object}\n   * @memberof PhotoSphereViewer\n   * @readonly\n   */\n  PhotoSphereViewer.Utils = PSVUtils;\n\n  /**\n   * @summary Short-Hand for PI*2\n   * @type {float}\n   * @readonly\n   */\n  PSVUtils.TwoPI = Math.PI * 2.0;\n\n  /**\n   * @summary Short-Hand for PI/2\n   * @type {float}\n   * @readonly\n   */\n  PSVUtils.HalfPI = Math.PI / 2.0;\n\n  /**\n   * @summary Namespace for SVG creation\n   * @type {string}\n   * @readonly\n   */\n  PSVUtils.svgNS = 'http://www.w3.org/2000/svg';\n\n  /**\n   * @summary Checks if some three.js components are loaded\n   * @param {...string} components\n   * @returns {boolean}\n   */\n  PSVUtils.checkTHREE = function(components) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      if (!(arguments[i] in THREE)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * @summary Detects if canvas is supported\n   * @returns {boolean}\n   */\n  PSVUtils.isCanvasSupported = function() {\n    var canvas = document.createElement('canvas');\n    return !!(canvas.getContext && canvas.getContext('2d'));\n  };\n\n  /**\n   * @summary Tries to return a canvas webgl context\n   * @returns {WebGLRenderingContext}\n   */\n  PSVUtils.getWebGLCtx = function() {\n    var canvas = document.createElement('canvas');\n    var names = ['webgl', 'experimental-webgl', 'moz-webgl', 'webkit-3d'];\n    var context = null;\n\n    if (!canvas.getContext) {\n      return null;\n    }\n\n    if (names.some(function(name) {\n        try {\n          context = canvas.getContext(name);\n          return (context && typeof context.getParameter === 'function');\n        } catch (e) {\n          return false;\n        }\n      })) {\n      return context;\n    }\n    else {\n      return null;\n    }\n  };\n\n  /**\n   * @summary Detects if WebGL is supported\n   * @returns {boolean}\n   */\n  PSVUtils.isWebGLSupported = function() {\n    return !!window.WebGLRenderingContext && PSVUtils.getWebGLCtx() !== null;\n  };\n\n  /**\n   * @summary Detects if device orientation is supported\n   * @description We can only be sure device orientation is supported once received an event with coherent data\n   * @returns {Promise<boolean>}\n   */\n  PSVUtils.isDeviceOrientationSupported = function() {\n    return new Promise(function(resolve) {\n      if ('DeviceOrientationEvent' in window) {\n        var listener = function(e) {\n          if (e && e.alpha !== null && !isNaN(e.alpha)) {\n            resolve(true);\n          }\n          else {\n            resolve(false);\n          }\n\n          window.removeEventListener('deviceorientation', listener);\n        };\n\n        window.addEventListener('deviceorientation', listener, false);\n\n        // after 2 secs, auto-reject the promise\n        setTimeout(listener, 2000);\n      }\n      else {\n        resolve(false);\n      }\n    });\n  };\n\n  /**\n   * @summary Detects if the user is using a touch screen\n   * @returns {Promise<boolean>}\n   */\n  PSVUtils.isTouchEnabled = function() {\n    return new Promise(function(resolve) {\n      var listener = function(e) {\n        if (e) {\n          resolve(true);\n        }\n        else {\n          resolve(false);\n        }\n\n        window.removeEventListener('touchstart', listener);\n      };\n\n      window.addEventListener('touchstart', listener, false);\n\n      // after 10 secs auto-reject the promise\n      setTimeout(listener, 10000);\n    });\n  };\n\n  /**\n   * @summary Gets max texture width in WebGL context\n   * @returns {int}\n   */\n  PSVUtils.getMaxTextureWidth = function() {\n    var ctx = PSVUtils.getWebGLCtx();\n    if (ctx !== null) {\n      return ctx.getParameter(ctx.MAX_TEXTURE_SIZE);\n    }\n    else {\n      return 0;\n    }\n  };\n\n  /**\n   * @summary Toggles a CSS class\n   * @param {HTMLElement|SVGElement} element\n   * @param {string} className\n   * @param {boolean} [active] - forced state\n   */\n  PSVUtils.toggleClass = function(element, className, active) {\n    // manual implementation for IE11 and SVGElement\n    if (!element.classList) {\n      var currentClassName = element.getAttribute('class') || '';\n      var currentActive = currentClassName.indexOf(className) !== -1;\n      var regex = new RegExp('(?:^|\\\\s)' + className + '(?:\\\\s|$)');\n\n      if ((active === undefined || active) && !currentActive) {\n        currentClassName += currentClassName.length > 0 ? ' ' + className : className;\n      }\n      else if (!active) {\n        currentClassName = currentClassName.replace(regex, ' ');\n      }\n\n      element.setAttribute('class', currentClassName);\n    }\n    else {\n      if (active === undefined) {\n        element.classList.toggle(className);\n      }\n      else if (active && !element.classList.contains(className)) {\n        element.classList.add(className);\n      }\n      else if (!active) {\n        element.classList.remove(className);\n      }\n    }\n  };\n\n  /**\n   * @summary Adds one or several CSS classes to an element\n   * @param {HTMLElement} element\n   * @param {string} className\n   */\n  PSVUtils.addClasses = function(element, className) {\n    if (!className) {\n      return;\n    }\n    className.split(' ').forEach(function(name) {\n      PSVUtils.toggleClass(element, name, true);\n    });\n  };\n\n  /**\n   * @summary Removes one or several CSS classes to an element\n   * @param {HTMLElement} element\n   * @param {string} className\n   */\n  PSVUtils.removeClasses = function(element, className) {\n    if (!className) {\n      return;\n    }\n    className.split(' ').forEach(function(name) {\n      PSVUtils.toggleClass(element, name, false);\n    });\n  };\n\n  /**\n   * @summary Searches if an element has a particular parent at any level including itself\n   * @param {HTMLElement} el\n   * @param {HTMLElement} parent\n   * @returns {boolean}\n   */\n  PSVUtils.hasParent = function(el, parent) {\n    do {\n      if (el === parent) {\n        return true;\n      }\n    } while (!!(el = el.parentNode));\n\n    return false;\n  };\n\n  /**\n   * @summary Gets the closest parent (can by itself)\n   * @param {HTMLElement|SVGElement} el\n   * @param {string} selector\n   * @returns {HTMLElement}\n   */\n  PSVUtils.getClosest = function(el, selector) {\n    var matches = el.matches || el.msMatchesSelector;\n\n    do {\n      if (matches.bind(el)(selector)) {\n        return el;\n      }\n    } while (!!(el instanceof SVGElement ? el = el.parentNode : el = el.parentElement));\n\n    return null;\n  };\n\n  /**\n   * @summary Gets the event name for mouse wheel\n   * @returns {string}\n   */\n  PSVUtils.mouseWheelEvent = function() {\n    return 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support \"wheel\"\n      document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least \"mousewheel\"\n        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\n  };\n\n  /**\n   * @summary Returns the key name of a KeyboardEvent\n   * @param {KeyboardEvent} evt\n   * @returns {string}\n   */\n  PSVUtils.getEventKey = function(evt) {\n    var key = evt.key || PSVUtils.getEventKey.KEYMAP[evt.keyCode || evt.which];\n\n    if (key && PSVUtils.getEventKey.MS_KEYMAP[key]) {\n      key = PSVUtils.getEventKey.MS_KEYMAP[key];\n    }\n\n    return key;\n  };\n\n  /**\n   * @summary Map between keyboard events `keyCode|which` and `key`\n   * @type {Object.<int, string>}\n   * @readonly\n   * @protected\n   */\n  PSVUtils.getEventKey.KEYMAP = {\n    13: 'Enter',\n    27: 'Escape',\n    32: ' ',\n    33: 'PageUp',\n    34: 'PageDown',\n    37: 'ArrowLeft',\n    38: 'ArrowUp',\n    39: 'ArrowRight',\n    40: 'ArrowDown',\n    46: 'Delete',\n    107: '+',\n    109: '-'\n  };\n\n  /**\n   * @summary Map for non standard keyboard events `key` for IE and Edge\n   * @see https://github.com/shvaikalesh/shim-keyboard-event-key\n   * @type {Object.<string, string>}\n   * @readonly\n   * @protected\n   */\n  PSVUtils.getEventKey.MS_KEYMAP = {\n    Add: '+',\n    Del: 'Delete',\n    Down: 'ArrowDown',\n    Esc: 'Escape',\n    Left: 'ArrowLeft',\n    Right: 'ArrowRight',\n    Spacebar: ' ',\n    Subtract: '-',\n    Up: 'ArrowUp'\n  };\n\n  /**\n   * @summary  Gets the event name for fullscreen\n   * @returns {string}\n   */\n  PSVUtils.fullscreenEvent = function() {\n    var map = {\n      'exitFullscreen': 'fullscreenchange',\n      'webkitExitFullscreen': 'webkitfullscreenchange',\n      'mozCancelFullScreen': 'mozfullscreenchange',\n      'msExitFullscreen': 'MSFullscreenChange'\n    };\n\n    for (var exit in map) {\n      if (map.hasOwnProperty(exit) && exit in document) {\n        return map[exit];\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @summary Ensures that a number is in a given interval\n   * @param {number} x\n   * @param {number} min\n   * @param {number} max\n   * @returns {number}\n   */\n  PSVUtils.bound = function(x, min, max) {\n    return Math.max(min, Math.min(max, x));\n  };\n\n  /**\n   * @summary Checks if a value is an integer\n   * @function\n   * @param {*} value\n   * @returns {boolean}\n   */\n  PSVUtils.isInteger = Number.isInteger || function(value) {\n      return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n    };\n\n  /**\n   * @summary Computes the sum of an array\n   * @param {number[]} array\n   * @returns {number}\n   */\n  PSVUtils.sum = function(array) {\n    return array.reduce(function(a, b) {\n      return a + b;\n    }, 0);\n  };\n\n  /**\n   * @summary Transforms a string to dash-case\n   * {@link https://github.com/shahata/dasherize}\n   * @param {string} str\n   * @returns {string}\n   */\n  PSVUtils.dasherize = function(str) {\n    return str.replace(/[A-Z](?:(?=[^A-Z])|[A-Z]*(?=[A-Z][^A-Z]|$))/g, function(s, i) {\n      return (i > 0 ? '-' : '') + s.toLowerCase();\n    });\n  };\n\n  /**\n   * @summary Returns the value of a given attribute in the panorama metadata\n   * @param {string} data\n   * @param {string} attr\n   * @returns (string)\n   */\n  PSVUtils.getXMPValue = function(data, attr) {\n    var result;\n    // XMP data are stored in children\n    if ((result = data.match('<GPano:' + attr + '>(.*)</GPano:' + attr + '>')) !== null) {\n      return result[1];\n    }\n    // XMP data are stored in attributes\n    else if ((result = data.match('GPano:' + attr + '=\"(.*?)\"')) !== null) {\n      return result[1];\n    }\n    else {\n      return null;\n    }\n  };\n\n  /**\n   * @summary Detects if fullscreen is enabled\n   * @param {HTMLElement} elt\n   * @returns {boolean}\n   */\n  PSVUtils.isFullscreenEnabled = function(elt) {\n    return (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement) === elt;\n  };\n\n  /**\n   * @summary Enters fullscreen mode\n   * @param {HTMLElement} elt\n   */\n  PSVUtils.requestFullscreen = function(elt) {\n    (elt.requestFullscreen || elt.mozRequestFullScreen || elt.webkitRequestFullscreen || elt.msRequestFullscreen).call(elt);\n  };\n\n  /**\n   * @summary Exits fullscreen mode\n   */\n  PSVUtils.exitFullscreen = function() {\n    (document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen).call(document);\n  };\n\n  /**\n   * @summary Gets an element style\n   * @param {HTMLElement} elt\n   * @param {string} prop\n   * @returns {*}\n   */\n  PSVUtils.getStyle = function(elt, prop) {\n    return window.getComputedStyle(elt, null)[prop];\n  };\n\n  /**\n   * @summary Compute the shortest offset between two longitudes\n   * @param {float} from\n   * @param {float} to\n   * @returns {float}\n   */\n  PSVUtils.getShortestArc = function(from, to) {\n    var tCandidates = [\n      0, // direct\n      PSVUtils.TwoPI, // clock-wise cross zero\n      -PSVUtils.TwoPI // counter-clock-wise cross zero\n    ];\n\n    return tCandidates.reduce(function(value, candidate) {\n      candidate = to - from + candidate;\n      return Math.abs(candidate) < Math.abs(value) ? candidate : value;\n    }, Infinity);\n  };\n\n  /**\n   * @summary Computes the angle between the current position and a target position\n   * @param {PhotoSphereViewer.Position} position1\n   * @param {PhotoSphereViewer.Position} position2\n   * @returns {number}\n   */\n  PSVUtils.getAngle = function(position1, position2) {\n    return Math.acos(\n      Math.cos(position1.latitude) *\n      Math.cos(position2.latitude) *\n      Math.cos(position1.longitude - position2.longitude) +\n      Math.sin(position1.latitude) *\n      Math.sin(position2.latitude)\n    );\n  };\n\n  /**\n   * @summary Translate CSS values like \"top center\" or \"10% 50%\" as top and left positions\n   * @description The implementation is as close as possible to the \"background-position\" specification\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/background-position}\n   * @param {string} value\n   * @returns {{top: float, left: float}}\n   */\n  PSVUtils.parsePosition = function(value) {\n    if (!value) {\n      return { top: 0.5, left: 0.5 };\n    }\n\n    if (typeof value === 'object') {\n      return value;\n    }\n\n    var tokens = value.toLocaleLowerCase().split(' ').slice(0, 2);\n\n    if (tokens.length === 1) {\n      if (PSVUtils.parsePosition.positions[tokens[0]] !== undefined) {\n        tokens = [tokens[0], 'center'];\n      }\n      else {\n        tokens = [tokens[0], tokens[0]];\n      }\n    }\n\n    var xFirst = tokens[1] !== 'left' && tokens[1] !== 'right' && tokens[0] !== 'top' && tokens[0] !== 'bottom';\n\n    tokens = tokens.map(function(token) {\n      return PSVUtils.parsePosition.positions[token] || token;\n    });\n\n    if (!xFirst) {\n      tokens.reverse();\n    }\n\n    var parsed = tokens.join(' ').match(/^([0-9.]+)% ([0-9.]+)%$/);\n\n    if (parsed) {\n      return {\n        left: parsed[1] / 100,\n        top: parsed[2] / 100\n      };\n    }\n    else {\n      return { top: 0.5, left: 0.5 };\n    }\n  };\n\n  PSVUtils.parsePosition.positions = { 'top': '0%', 'bottom': '100%', 'left': '0%', 'right': '100%', 'center': '50%' };\n\n  /**\n   * @summary Parses an speed\n   * @param {string} speed - The speed, in radians/degrees/revolutions per second/minute\n   * @returns {float} radians per second\n   * @throws {PSVError} when the speed cannot be parsed\n   */\n  PSVUtils.parseSpeed = function(speed) {\n    if (typeof speed === 'string') {\n      speed = speed.toString().trim();\n\n      // Speed extraction\n      var speed_value = parseFloat(speed.replace(/^(-?[0-9]+(?:\\.[0-9]*)?).*$/, '$1'));\n      var speed_unit = speed.replace(/^-?[0-9]+(?:\\.[0-9]*)?(.*)$/, '$1').trim();\n\n      // \"per minute\" -> \"per second\"\n      if (speed_unit.match(/(pm|per minute)$/)) {\n        speed_value /= 60;\n      }\n\n      // Which unit?\n      switch (speed_unit) {\n        // Degrees per minute / second\n        case 'dpm':\n        case 'degrees per minute':\n        case 'dps':\n        case 'degrees per second':\n          speed = THREE.Math.degToRad(speed_value);\n          break;\n\n        // Radians per minute / second\n        case 'radians per minute':\n        case 'radians per second':\n          speed = speed_value;\n          break;\n\n        // Revolutions per minute / second\n        case 'rpm':\n        case 'revolutions per minute':\n        case 'rps':\n        case 'revolutions per second':\n          speed = speed_value * PSVUtils.TwoPI;\n          break;\n\n        // Unknown unit\n        default:\n          throw new PSVError('unknown speed unit \"' + speed_unit + '\"');\n      }\n    }\n\n    return speed;\n  };\n\n  /**\n   * @summary Parses an angle value in radians or degrees and returns a normalized value in radians\n   * @param {string|number} angle - eg: 3.14, 3.14rad, 180deg\n   * @param {boolean} [zeroCenter=false] - normalize between -Pi/2 - Pi/2 instead of 0 - 2*Pi\n   * @param {boolean} [halfCircle=zeroCenter] - normalize between -Pi - Pi instead of -Pi/2 - Pi/2\n   * @returns {float}\n   * @throws {PSVError} when the angle cannot be parsed\n   */\n  PSVUtils.parseAngle = function(angle, zeroCenter, halfCircle) {\n    if (halfCircle === undefined) {\n      halfCircle = zeroCenter;\n    }\n\n    if (typeof angle === 'string') {\n      var match = angle.toLowerCase().trim().match(/^(-?[0-9]+(?:\\.[0-9]*)?)(.*)$/);\n\n      if (!match) {\n        throw new PSVError('unknown angle \"' + angle + '\"');\n      }\n\n      var value = parseFloat(match[1]);\n      var unit = match[2];\n\n      if (unit) {\n        switch (unit) {\n          case 'deg':\n          case 'degs':\n            angle = THREE.Math.degToRad(value);\n            break;\n          case 'rad':\n          case 'rads':\n            angle = value;\n            break;\n          default:\n            throw new PSVError('unknown angle unit \"' + unit + '\"');\n        }\n      }\n      else {\n        angle = value;\n      }\n    }\n\n    angle = (zeroCenter ? angle + Math.PI : angle) % PSVUtils.TwoPI;\n\n    if (angle < 0) {\n      angle = PSVUtils.TwoPI + angle;\n    }\n\n    return zeroCenter ? PSVUtils.bound(angle - Math.PI, -Math.PI / (halfCircle ? 2 : 1), Math.PI / (halfCircle ? 2 : 1)) : angle;\n  };\n\n  /**\n   * @summary Removes all children of a three.js scene and dispose all textures\n   * @param {THREE.Scene} scene\n   */\n  PSVUtils.cleanTHREEScene = function(scene) {\n    scene.children.forEach(function(item) {\n      if (item instanceof THREE.Mesh) {\n        if (item.geometry) {\n          item.geometry.dispose();\n          item.geometry = null;\n        }\n\n        if (item.material) {\n          if (item.material.materials) {\n            item.material.materials.forEach(function(material) {\n              if (material.map) {\n                material.map.dispose();\n                material.map = null;\n              }\n\n              material.dispose();\n            });\n\n            item.material.materials.length = 0;\n          }\n          else {\n            if (item.material.map) {\n              item.material.map.dispose();\n              item.material.map = null;\n            }\n\n            item.material.dispose();\n          }\n\n          item.material = null;\n        }\n      }\n    });\n    scene.children.length = 0;\n  };\n\n  /**\n   * @summary Returns a function, that, when invoked, will only be triggered at most once during a given window of time.\n   * @copyright underscore.js - modified by Clément Prévost {@link http://stackoverflow.com/a/27078401}\n   * @param {Function} func\n   * @param {int} wait\n   * @returns {Function}\n   */\n  PSVUtils.throttle = function(func, wait) {\n    var self, args, result;\n    var timeout = null;\n    var previous = 0;\n    var later = function() {\n      previous = Date.now();\n      timeout = null;\n      result = func.apply(self, args);\n      if (!timeout) {\n        self = args = null;\n      }\n    };\n    return function() {\n      var now = Date.now();\n      if (!previous) {\n        previous = now;\n      }\n      var remaining = wait - (now - previous);\n      self = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(self, args);\n        if (!timeout) {\n          self = args = null;\n        }\n      }\n      else if (!timeout) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  /**\n   * @summary Test if an object is a plain object\n   * @description Test if an object is a plain object, i.e. is constructed\n   * by the built-in Object constructor and inherits directly from Object.prototype\n   * or null. Some built-in objects pass the test, e.g. Math which is a plain object\n   * and some host or exotic objects may pass also.\n   * {@link http://stackoverflow.com/a/5878101/1207670}\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  PSVUtils.isPlainObject = function(obj) {\n    // Basic check for Type object that's not null\n    if (typeof obj === 'object' && obj !== null) {\n      // If Object.getPrototypeOf supported, use it\n      if (typeof Object.getPrototypeOf === 'function') {\n        var proto = Object.getPrototypeOf(obj);\n        return proto === Object.prototype || proto === null;\n      }\n\n      // Otherwise, use internal class\n      // This should be reliable as if getPrototypeOf not supported, is pre-ES5\n      return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n\n    // Not an object\n    return false;\n  };\n\n  /**\n   * @summary Merges the enumerable attributes of two objects\n   * @description Replaces arrays and alters the target object.\n   * @copyright Nicholas Fisher <nfisher110@gmail.com>\n   * @param {Object} target\n   * @param {Object} src\n   * @returns {Object} target\n   */\n  PSVUtils.deepmerge = function(target, src) {\n    var first = src;\n\n    return (function merge(target, src) {\n      if (Array.isArray(src)) {\n        if (!target || !Array.isArray(target)) {\n          target = [];\n        }\n        else {\n          target.length = 0;\n        }\n        src.forEach(function(e, i) {\n          target[i] = merge(null, e);\n        });\n      }\n      else if (typeof src === 'object') {\n        if (!target || Array.isArray(target)) {\n          target = {};\n        }\n        Object.keys(src).forEach(function(key) {\n          if (typeof src[key] !== 'object' || !src[key] || !PSVUtils.isPlainObject(src[key])) {\n            target[key] = src[key];\n          }\n          else if (src[key] != first) {\n            if (!target[key]) {\n              target[key] = merge(null, src[key]);\n            }\n            else {\n              merge(target[key], src[key]);\n            }\n          }\n        });\n      }\n      else {\n        target = src;\n      }\n\n      return target;\n    }(target, src));\n  };\n\n  /**\n   * @summary Clones an object\n   * @param {Object} src\n   * @returns {Object}\n   */\n  PSVUtils.clone = function(src) {\n    return PSVUtils.deepmerge(null, src);\n  };\n\n  /**\n   * @summary Normalize mousewheel values accross browsers\n   * @description From Facebook's Fixed Data Table\n   * {@link https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js}\n   * @copyright Facebook\n   * @param {MouseWheelEvent} event\n   * @returns {{spinX: number, spinY: number, pixelX: number, pixelY: number}}\n   */\n  PSVUtils.normalizeWheel = function(event) {\n    var PIXEL_STEP  = 10;\n    var LINE_HEIGHT = 40;\n    var PAGE_HEIGHT = 800;\n\n    var sX = 0, sY = 0; // spinX, spinY\n    var pX = 0, pY = 0; // pixelX, pixelY\n\n    // Legacy\n    if ('detail'      in event) { sY = event.detail; }\n    if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }\n    if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }\n    if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }\n\n    // side scrolling on FF with DOMMouseScroll\n    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in event) { pY = event.deltaY; }\n    if ('deltaX' in event) { pX = event.deltaX; }\n\n    if ((pX || pY) && event.deltaMode) {\n      if (event.deltaMode === 1) { // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      }\n      else {                      // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    }\n\n    // Fall-back if spin cannot be determined\n    if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }\n    if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }\n\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  };\n\n  /**\n   * @callback ForEach\n   * @memberOf PSVUtils\n   * @param {*} value\n   * @param {string} key\n   */\n\n  /**\n   * Loops over enumerable properties of an object\n   * @param {object} object\n   * @param {ForEach} callback\n   */\n  PSVUtils.forEach = function(object, callback) {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        callback(object[key], key);\n      }\n    }\n  };\n\n  return PSVUtils;\n});\ndefine('skylark-sphere/PSVAnimation',[],function(){\n  \"use strict\";\n  /**\n   * @callback OnTick\n   * @memberOf PSVAnimation\n   * @param {Object[]} properties - current values\n   * @param {float} progress - 0 to 1\n   */\n\n  /**\n   * @summary Interpolation helper for animations\n   * @description\n   * Implements the Promise API with an additional \"cancel\" method.\n   * The promise is resolved when the animation is complete and rejected if the animation is cancelled.\n   * @param {Object} options\n   * @param {Object[]} options.properties\n   * @param {number} options.properties[].start\n   * @param {number} options.properties[].end\n   * @param {int} options.duration\n   * @param {int} [options.delay=0]\n   * @param {string} [options.easing='linear']\n   * @param {PSVAnimation.OnTick} options.onTick - called on each frame\n   * @constructor\n   */\n  function PSVAnimation(options) {\n    if (!(this instanceof PSVAnimation)) {\n      return new PSVAnimation(options);\n    }\n\n    this._cancelled = false;\n    this._resolved = false;\n\n    var self = this;\n\n    this._promise = new Promise(function(resolve, reject) {\n      self._resolve = resolve;\n      self._reject = reject;\n    });\n\n    if (options) {\n      if (!options.easing || typeof options.easing === 'string') {\n        options.easing = PSVAnimation.easings[options.easing || 'linear'];\n      }\n      this._start = null;\n      this._options = options;\n\n      if (options.delay) {\n        this._delayTimeout = window.setTimeout(function() {\n          this._delayTimeout = null;\n          window.requestAnimationFrame(this._run.bind(this));\n        }.bind(this), options.delay);\n      }\n      else {\n\n        window.requestAnimationFrame(this._run.bind(this));\n      }\n    }\n  }\n\n  /**\n   * @summary Collection of easing functions\n   * {@link https://gist.github.com/frederickk/6165768}\n   * @type {Object.<string, Function>}\n   */\n  // @formatter:off\n  // jscs:disable\n  /* jshint ignore:start */\n  PSVAnimation.easings = {\n    linear: function(t) { return t; },\n\n    inQuad: function(t) { return t*t; },\n    outQuad: function(t) { return t*(2-t); },\n    inOutQuad: function(t) { return t<.5 ? 2*t*t : -1+(4-2*t)*t; },\n\n    inCubic: function(t) { return t*t*t; },\n    outCubic: function(t) { return (--t)*t*t+1; },\n    inOutCubic: function(t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1; },\n\n    inQuart: function(t) { return t*t*t*t; },\n    outQuart: function(t) { return 1-(--t)*t*t*t; },\n    inOutQuart: function(t) { return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t; },\n\n    inQuint: function(t) { return t*t*t*t*t; },\n    outQuint: function(t) { return 1+(--t)*t*t*t*t; },\n    inOutQuint: function(t) { return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t; },\n\n    inSine: function(t) { return 1-Math.cos(t*(Math.PI/2)); },\n    outSine: function(t) { return Math.sin(t*(Math.PI/2)); },\n    inOutSine: function(t) { return .5-.5*Math.cos(Math.PI*t); },\n\n    inExpo: function(t) { return Math.pow(2, 10*(t-1)); },\n    outExpo: function(t) { return 1-Math.pow(2, -10*t); },\n    inOutExpo: function(t) { t=t*2-1; return t<0 ? .5*Math.pow(2, 10*t) : 1-.5*Math.pow(2, -10*t); },\n\n    inCirc: function(t) { return 1-Math.sqrt(1-t*t); },\n    outCirc: function(t) { t--; return Math.sqrt(1-t*t); },\n    inOutCirc: function(t) { t*=2; return t<1 ? .5-.5*Math.sqrt(1-t*t) : .5+.5*Math.sqrt(1-(t-=2)*t); }\n  };\n  /* jshint ignore:end */\n  // jscs:enable\n  // @formatter:on\n\n  /**\n   * @summary Main loop for the animation\n   * @param {int} timestamp\n   * @private\n   */\n  PSVAnimation.prototype._run = function(timestamp) {\n    // the animation has been cancelled\n    if (this._cancelled) {\n      return;\n    }\n\n    // first iteration\n    if (this._start === null) {\n      this._start = timestamp;\n    }\n\n    // compute progress\n    var progress = (timestamp - this._start) / this._options.duration;\n    var current = {};\n    var name;\n\n    if (progress < 1.0) {\n      // interpolate properties\n      for (name in this._options.properties) {\n        if (this._options.properties[name]) {\n          current[name] = this._options.properties[name].start + (this._options.properties[name].end - this._options.properties[name].start) * this._options.easing(progress);\n        }\n      }\n\n      this._options.onTick(current, progress);\n\n      window.requestAnimationFrame(this._run.bind(this));\n    }\n    else {\n      // call onTick one last time with final values\n      for (name in this._options.properties) {\n        if (this._options.properties[name]) {\n          current[name] = this._options.properties[name].end;\n        }\n      }\n\n      this._options.onTick(current, 1.0);\n\n      window.requestAnimationFrame(function() {\n        this._resolved = true;\n        this._resolve();\n      }.bind(this));\n    }\n  };\n\n  /**\n   * @summary Animation chaining\n   * @param {function} onFulfilled - Called when the animation is complete, can return a new animation\n   * @param {function} onRejected - Called when the animation is cancelled\n   * @returns {PSVAnimation}\n   */\n  PSVAnimation.prototype.then = function(onFulfilled, onRejected) {\n    var p = new PSVAnimation();\n\n    // Allow cancellation to climb up the promise chain\n    p._promise.then(null, this.cancel.bind(this));\n\n    this._promise.then(function() {\n      p._resolve(onFulfilled ? onFulfilled() : undefined);\n    }, function() {\n      p._reject(onRejected ? onRejected() : undefined);\n    });\n\n    return p;\n  };\n\n  /**\n   * @summary Alias to `.then(null, onRejected)`\n   * @param {function} onRejected - Called when the animation has been cancelled\n   * @returns {PSVAnimation}\n   */\n  PSVAnimation.prototype.catch = function(onRejected) {\n    return this.then(undefined, onRejected);\n  };\n\n  /**\n   * @summary Alias to `.then(onFinally, onFinally)`\n   * @param {function} onFinally - Called when the animation is either complete or cancelled\n   * @returns {PSVAnimation}\n   */\n  PSVAnimation.prototype.finally = function(onFinally) {\n    return this.then(onFinally, onFinally);\n  };\n\n  /**\n   * @summary Cancels the animation\n   */\n  PSVAnimation.prototype.cancel = function() {\n    if (!this._cancelled && !this._resolved) {\n      this._cancelled = true;\n      this._reject();\n\n      if (this._delayTimeout) {\n        window.cancelAnimationFrame(this._delayTimeout);\n        this._delayTimeout = null;\n      }\n    }\n  };\n\n  return PSVAnimation;\n});\n\ndefine('skylark-sphere/PSVMarker',[\n  \"./PSVError\",\n  \"./PSVAnimation\",\n  \"./PSVUtils\"\n],function(\n  PSVError,\n  PSVAnimation,\n  PSVUtils\n){\n  \"use strict\";\n  /**\n   * Object representing a marker\n   * @param {Object} properties - see {@link http://photo-sphere-viewer.js.org/markers.html#config} (merged with the object itself)\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @throws {PSVError} when the configuration is incorrect\n   */\n  function PSVMarker(properties, psv) {\n    if (!properties.id) {\n      throw new PSVError('missing marker id');\n    }\n\n    if (properties.image && (!properties.width || !properties.height)) {\n      throw new PSVError('missing marker width/height');\n    }\n\n    if (properties.image || properties.html) {\n      if ((!properties.hasOwnProperty('x') || !properties.hasOwnProperty('y')) && (!properties.hasOwnProperty('latitude') || !properties.hasOwnProperty('longitude'))) {\n        throw new PSVError('missing marker position, latitude/longitude or x/y');\n      }\n    }\n\n    /**\n     * @member {PhotoSphereViewer}\n     * @readonly\n     * @protected\n     */\n    this.psv = psv;\n\n    /**\n     * @member {boolean}\n     */\n    this.visible = true;\n\n    /**\n     * @member {boolean}\n     * @readonly\n     * @private\n     */\n    this._dynamicSize = false;\n\n    // private properties\n    var _id = properties.id;\n    var _type = PSVMarker.getType(properties, false);\n    var $el;\n\n    // readonly properties\n    Object.defineProperties(this, {\n      /**\n       * @memberof PSVMarker\n       * @type {string}\n       * @readonly\n       */\n      id: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return _id;\n        },\n        set: function() {\n        }\n      },\n      /**\n       * @memberof PSVMarker\n       * @type {string}\n       * @see PSVMarker.types\n       * @readonly\n       */\n      type: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return _type;\n        },\n        set: function() {\n        }\n      },\n      /**\n       * @memberof PSVMarker\n       * @type {HTMLDivElement|SVGElement}\n       * @readonly\n       */\n      $el: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return $el;\n        },\n        set: function() {\n        }\n      },\n      /**\n       * @summary Quick access to self value of key `type`\n       * @memberof PSVMarker\n       * @type {*}\n       * @private\n       */\n      _def: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return this[_type];\n        },\n        set: function(value) {\n          this[_type] = value;\n        }\n      }\n    });\n\n    // create element\n    if (this.isNormal()) {\n      $el = document.createElement('div');\n    }\n    else if (this.isPolygon()) {\n      $el = document.createElementNS(PSVUtils.svgNS, 'polygon');\n    }\n    else if (this.isPolyline()) {\n      $el = document.createElementNS(PSVUtils.svgNS, 'polyline');\n    }\n    else {\n      $el = document.createElementNS(PSVUtils.svgNS, this.type);\n    }\n\n    $el.id = 'psv-marker-' + this.id;\n    $el.psvMarker = this;\n\n    this.update(properties);\n  }\n\n  /**\n   * @summary Types of markers\n   * @type {string[]}\n   * @readonly\n   */\n  PSVMarker.types = ['image', 'html', 'polygon_px', 'polygon_rad', 'polyline_px', 'polyline_rad', 'rect', 'circle', 'ellipse', 'path'];\n\n  /**\n   * @summary Determines the type of a marker by the available properties\n   * @param {object} properties\n   * @param {boolean} [allowNone=false]\n   * @returns {string}\n   * @throws {PSVError} when the marker's type cannot be found\n   */\n  PSVMarker.getType = function(properties, allowNone) {\n    var found = [];\n\n    PSVMarker.types.forEach(function(type) {\n      if (properties[type]) {\n        found.push(type);\n      }\n    });\n\n    if (found.length === 0 && !allowNone) {\n      throw new PSVError('missing marker content, either ' + PSVMarker.types.join(', '));\n    }\n    else if (found.length > 1) {\n      throw new PSVError('multiple marker content, either ' + PSVMarker.types.join(', '));\n    }\n\n    return found[0];\n  };\n\n  /**\n   * @summary Destroys the marker\n   */\n  PSVMarker.prototype.destroy = function() {\n    delete this.$el.psvMarker;\n  };\n\n  /**\n   * @summary Checks if it is a normal marker (image or html)\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isNormal = function() {\n    return this.type === 'image' || this.type === 'html';\n  };\n\n  /**\n   * @summary Checks if it is a polygon/polyline marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isPoly = function() {\n    return this.isPolygon() || this.isPolyline();\n  };\n\n  /**\n   * @summary Checks if it is a polygon marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isPolygon = function() {\n    return this.type === 'polygon_px' || this.type === 'polygon_rad';\n  };\n\n  /**\n   * @summary Checks if it is a polyline marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isPolyline = function() {\n    return this.type === 'polyline_px' || this.type === 'polyline_rad';\n  };\n\n  /**\n   * @summary Checks if it is an SVG marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isSvg = function() {\n    return this.type === 'rect' || this.type === 'circle' || this.type === 'ellipse' || this.type === 'path';\n  };\n\n  /**\n   * @summary Computes marker scale from zoom level\n   * @param {float} zoomLevel\n   * @returns {float}\n   */\n  PSVMarker.prototype.getScale = function(zoomLevel) {\n    if (Array.isArray(this.scale)) {\n      return this.scale[0] + (this.scale[1] - this.scale[0]) * PSVAnimation.easings.inQuad(zoomLevel / 100);\n    }\n    else if (typeof this.scale === 'function') {\n      return this.scale(zoomLevel);\n    }\n    else if (typeof this.scale === 'number') {\n      return this.scale * PSVAnimation.easings.inQuad(zoomLevel / 100);\n    }\n    else {\n      return 1;\n    }\n  };\n\n  /**\n   * @summary Updates the marker with new properties\n   * @param {object} [properties]\n   * @throws {PSVError} when trying to change the marker's type\n   */\n  PSVMarker.prototype.update = function(properties) {\n    // merge objects\n    if (properties && properties !== this) {\n      var newType = PSVMarker.getType(properties, true);\n\n      if (newType !== undefined && newType !== this.type) {\n        throw new PSVError('cannot change marker type');\n      }\n\n      PSVUtils.deepmerge(this, properties);\n    }\n\n    // reset CSS class\n    if (this.isNormal()) {\n      this.$el.setAttribute('class', 'psv-marker psv-marker--normal');\n    }\n    else {\n      this.$el.setAttribute('class', 'psv-marker psv-marker--svg');\n    }\n\n    // add CSS classes\n    if (this.className) {\n      PSVUtils.addClasses(this.$el, this.className);\n    }\n    if (this.tooltip) {\n      PSVUtils.addClasses(this.$el, 'has-tooltip');\n      if (typeof this.tooltip === 'string') {\n        this.tooltip = { content: this.tooltip };\n      }\n    }\n\n    // apply style\n    if (this.style) {\n      PSVUtils.deepmerge(this.$el.style, this.style);\n    }\n\n    // parse anchor\n    this.anchor = PSVUtils.parsePosition(this.anchor);\n\n    if (this.isNormal()) {\n      this._updateNormal();\n    }\n    else if (this.isPolygon()) {\n      this._updatePoly('polygon_rad', 'polygon_px');\n    }\n    else if (this.isPolyline()) {\n      this._updatePoly('polyline_rad', 'polyline_px');\n    }\n    else {\n      this._updateSvg();\n    }\n  };\n\n  /**\n   * @summary Updates a normal marker\n   * @private\n   */\n  PSVMarker.prototype._updateNormal = function() {\n    if (this.width && this.height) {\n      this.$el.style.width = this.width + 'px';\n      this.$el.style.height = this.height + 'px';\n      this._dynamicSize = false;\n    }\n    else {\n      this._dynamicSize = true;\n    }\n\n    if (this.image) {\n      this.$el.style.backgroundImage = 'url(' + this.image + ')';\n    }\n    else {\n      this.$el.innerHTML = this.html;\n    }\n\n    // set anchor\n    this.$el.style.transformOrigin = this.anchor.left * 100 + '% ' + this.anchor.top * 100 + '%';\n\n    // convert texture coordinates to spherical coordinates\n    this.psv.cleanPosition(this);\n\n    // compute x/y/z position\n    this.position3D = this.psv.sphericalCoordsToVector3(this);\n  };\n\n  /**\n   * @summary Updates an SVG marker\n   * @private\n   */\n  PSVMarker.prototype._updateSvg = function() {\n    this._dynamicSize = true;\n\n    // set content\n    switch (this.type) {\n      case 'rect':\n        if (typeof this._def === 'number') {\n          this._def = {\n            x: 0,\n            y: 0,\n            width: this._def,\n            height: this._def\n          };\n        }\n        else if (Array.isArray(this._def)) {\n          this._def = {\n            x: 0,\n            y: 0,\n            width: this._def[0],\n            height: this._def[1]\n          };\n        }\n        else {\n          this._def.x = this._def.y = 0;\n        }\n        break;\n\n      case 'circle':\n        if (typeof this._def === 'number') {\n          this._def = {\n            cx: this._def,\n            cy: this._def,\n            r: this._def\n          };\n        }\n        else if (Array.isArray(this._def)) {\n          this._def = {\n            cx: this._def[0],\n            cy: this._def[0],\n            r: this._def[0]\n          };\n        }\n        else {\n          this._def.cx = this._def.cy = this._def.r;\n        }\n        break;\n\n      case 'ellipse':\n        if (typeof this._def === 'number') {\n          this._def = {\n            cx: this._def,\n            cy: this._def,\n            rx: this._def,\n            ry: this._def\n          };\n        }\n        else if (Array.isArray(this._def)) {\n          this._def = {\n            cx: this._def[0],\n            cy: this._def[1],\n            rx: this._def[0],\n            ry: this._def[1]\n          };\n        }\n        else {\n          this._def.cx = this._def.rx;\n          this._def.cy = this._def.ry;\n        }\n        break;\n\n      case 'path':\n        if (typeof this._def === 'string') {\n          this._def = {\n            d: this._def\n          };\n        }\n        break;\n    }\n\n    Object.getOwnPropertyNames(this._def).forEach(function(prop) {\n      this.$el.setAttributeNS(null, prop, this._def[prop]);\n    }, this);\n\n    // set style\n    if (this.svgStyle) {\n      Object.getOwnPropertyNames(this.svgStyle).forEach(function(prop) {\n        this.$el.setAttributeNS(null, PSVUtils.dasherize(prop), this.svgStyle[prop]);\n      }, this);\n    }\n    else {\n      this.$el.setAttributeNS(null, 'fill', 'rgba(0,0,0,0.5)');\n    }\n\n    // convert texture coordinates to spherical coordinates\n    this.psv.cleanPosition(this);\n\n    // compute x/y/z position\n    this.position3D = this.psv.sphericalCoordsToVector3(this);\n  };\n\n  /**\n   * @summary Updates a polygon marker\n   * @param {'polygon_rad'|'polyline_rad'} key_rad\n   * @param {'polygon_px'|'polyline_px'} key_px\n   * @private\n   */\n  PSVMarker.prototype._updatePoly = function(key_rad, key_px) {\n    this._dynamicSize = true;\n\n    // set style\n    if (this.svgStyle) {\n      Object.getOwnPropertyNames(this.svgStyle).forEach(function(prop) {\n        this.$el.setAttributeNS(null, PSVUtils.dasherize(prop), this.svgStyle[prop]);\n      }, this);\n\n      if (this.isPolyline() && !this.svgStyle.fill) {\n        this.$el.setAttributeNS(null, 'fill', 'none');\n      }\n    }\n    else if (this.isPolygon()) {\n      this.$el.setAttributeNS(null, 'fill', 'rgba(0,0,0,0.5)');\n    }\n    else if (this.isPolyline()) {\n      this.$el.setAttributeNS(null, 'fill', 'none');\n      this.$el.setAttributeNS(null, 'stroke', 'rgb(0,0,0)');\n    }\n\n    // fold arrays: [1,2,3,4] => [[1,2],[3,4]]\n    [this[key_rad], this[key_px]].forEach(function(polygon) {\n      if (polygon && typeof polygon[0] !== 'object') {\n        for (var i = 0; i < polygon.length; i++) {\n          polygon.splice(i, 2, [polygon[i], polygon[i + 1]]);\n        }\n      }\n    });\n\n    // convert texture coordinates to spherical coordinates\n    if (this[key_px]) {\n      this[key_rad] = this[key_px].map(function(coord) {\n        var sphericalCoords = this.psv.textureCoordsToSphericalCoords({ x: coord[0], y: coord[1] });\n        return [sphericalCoords.longitude, sphericalCoords.latitude];\n      }, this);\n    }\n    // clean angles\n    else {\n      this[key_rad] = this[key_rad].map(function(coord) {\n        return [\n          PSVUtils.parseAngle(coord[0]),\n          PSVUtils.parseAngle(coord[1], true)\n        ];\n      });\n    }\n\n    // TODO : compute the center of the polygon\n    this.longitude = this[key_rad][0][0];\n    this.latitude = this[key_rad][0][1];\n\n    // compute x/y/z positions\n    this.positions3D = this[key_rad].map(function(coord) {\n      return this.psv.sphericalCoordsToVector3({ longitude: coord[0], latitude: coord[1] });\n    }, this);\n  };\n\n  return PSVMarker;\n});\ndefine('skylark-sphere/doT',[],function(){\r\n// doT.js\r\n// 2011-2014, Laura Doktorova, https://github.com/olado/doT\r\n// Licensed under the MIT license.\r\n\r\n\t\"use strict\";\r\n\r\n\tvar doT = {\r\n\t\tname: \"doT\",\r\n\t\tversion: \"1.1.1\",\r\n\t\ttemplateSettings: {\r\n\t\t\tevaluate:    /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\r\n\t\t\tinterpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\r\n\t\t\tencode:      /\\{\\{!([\\s\\S]+?)\\}\\}/g,\r\n\t\t\tuse:         /\\{\\{#([\\s\\S]+?)\\}\\}/g,\r\n\t\t\tuseParams:   /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\r\n\t\t\tdefine:      /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\r\n\t\t\tdefineParams:/^\\s*([\\w$]+):([\\s\\S]+)/,\r\n\t\t\tconditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\r\n\t\t\titerate:     /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\r\n\t\t\tvarname:\t\"it\",\r\n\t\t\tstrip:\t\ttrue,\r\n\t\t\tappend:\t\ttrue,\r\n\t\t\tselfcontained: false,\r\n\t\t\tdoNotSkipEncoded: false\r\n\t\t},\r\n\t\ttemplate: undefined, //fn, compile template\r\n\t\tcompile:  undefined, //fn, for express\r\n\t\tlog: true\r\n\t}, _globals;\r\n\r\n\tdoT.encodeHTMLSource = function(doNotSkipEncoded) {\r\n\t\tvar encodeHTMLRules = { \"&\": \"&#38;\", \"<\": \"&#60;\", \">\": \"&#62;\", '\"': \"&#34;\", \"'\": \"&#39;\", \"/\": \"&#47;\" },\r\n\t\t\tmatchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\r\n\t\treturn function(code) {\r\n\t\t\treturn code ? code.toString().replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : \"\";\r\n\t\t};\r\n\t};\r\n\r\n\t_globals = (function(){ return this || (0,eval)(\"this\"); }());\r\n\r\n\r\n\tvar startend = {\r\n\t\tappend: { start: \"'+(\",      end: \")+'\",      startencode: \"'+encodeHTML(\" },\r\n\t\tsplit:  { start: \"';out+=(\", end: \");out+='\", startencode: \"';out+=encodeHTML(\" }\r\n\t}, skip = /$^/;\r\n\r\n\tfunction resolveDefs(c, block, def) {\r\n\t\treturn ((typeof block === \"string\") ? block : block.toString())\r\n\t\t.replace(c.define || skip, function(m, code, assign, value) {\r\n\t\t\tif (code.indexOf(\"def.\") === 0) {\r\n\t\t\t\tcode = code.substring(4);\r\n\t\t\t}\r\n\t\t\tif (!(code in def)) {\r\n\t\t\t\tif (assign === \":\") {\r\n\t\t\t\t\tif (c.defineParams) value.replace(c.defineParams, function(m, param, v) {\r\n\t\t\t\t\t\tdef[code] = {arg: param, text: v};\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (!(code in def)) def[code]= value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnew Function(\"def\", \"def['\"+code+\"']=\" + value)(def);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t})\r\n\t\t.replace(c.use || skip, function(m, code) {\r\n\t\t\tif (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {\r\n\t\t\t\tif (def[d] && def[d].arg && param) {\r\n\t\t\t\t\tvar rw = (d+\":\"+param).replace(/'|\\\\/g, \"_\");\r\n\t\t\t\t\tdef.__exp = def.__exp || {};\r\n\t\t\t\t\tdef.__exp[rw] = def[d].text.replace(new RegExp(\"(^|[^\\\\w$])\" + def[d].arg + \"([^\\\\w$])\", \"g\"), \"$1\" + param + \"$2\");\r\n\t\t\t\t\treturn s + \"def.__exp['\"+rw+\"']\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar v = new Function(\"def\", \"return \" + code)(def);\r\n\t\t\treturn v ? resolveDefs(c, v, def) : v;\r\n\t\t});\r\n\t}\r\n\r\n\tfunction unescape(code) {\r\n\t\treturn code.replace(/\\\\('|\\\\)/g, \"$1\").replace(/[\\r\\t\\n]/g, \" \");\r\n\t}\r\n\r\n\tdoT.template = function(tmpl, c, def) {\r\n\t\tc = c || doT.templateSettings;\r\n\t\tvar cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,\r\n\t\t\tstr  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;\r\n\r\n\t\tstr = (\"var out='\" + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g,\" \")\r\n\t\t\t\t\t.replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g,\"\"): str)\r\n\t\t\t.replace(/'|\\\\/g, \"\\\\$&\")\r\n\t\t\t.replace(c.interpolate || skip, function(m, code) {\r\n\t\t\t\treturn cse.start + unescape(code) + cse.end;\r\n\t\t\t})\r\n\t\t\t.replace(c.encode || skip, function(m, code) {\r\n\t\t\t\tneedhtmlencode = true;\r\n\t\t\t\treturn cse.startencode + unescape(code) + cse.end;\r\n\t\t\t})\r\n\t\t\t.replace(c.conditional || skip, function(m, elsecase, code) {\r\n\t\t\t\treturn elsecase ?\r\n\t\t\t\t\t(code ? \"';}else if(\" + unescape(code) + \"){out+='\" : \"';}else{out+='\") :\r\n\t\t\t\t\t(code ? \"';if(\" + unescape(code) + \"){out+='\" : \"';}out+='\");\r\n\t\t\t})\r\n\t\t\t.replace(c.iterate || skip, function(m, iterate, vname, iname) {\r\n\t\t\t\tif (!iterate) return \"';} } out+='\";\r\n\t\t\t\tsid+=1; indv=iname || \"i\"+sid; iterate=unescape(iterate);\r\n\t\t\t\treturn \"';var arr\"+sid+\"=\"+iterate+\";if(arr\"+sid+\"){var \"+vname+\",\"+indv+\"=-1,l\"+sid+\"=arr\"+sid+\".length-1;while(\"+indv+\"<l\"+sid+\"){\"\r\n\t\t\t\t\t+vname+\"=arr\"+sid+\"[\"+indv+\"+=1];out+='\";\r\n\t\t\t})\r\n\t\t\t.replace(c.evaluate || skip, function(m, code) {\r\n\t\t\t\treturn \"';\" + unescape(code) + \"out+='\";\r\n\t\t\t})\r\n\t\t\t+ \"';return out;\")\r\n\t\t\t.replace(/\\n/g, \"\\\\n\").replace(/\\t/g, '\\\\t').replace(/\\r/g, \"\\\\r\")\r\n\t\t\t.replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, \"\");\r\n\t\t\t//.replace(/(\\s|;|\\}|^|\\{)out\\+=''\\+/g,'$1out+=');\r\n\r\n\t\tif (needhtmlencode) {\r\n\t\t\tif (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);\r\n\t\t\tstr = \"var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (\"\r\n\t\t\t\t+ doT.encodeHTMLSource.toString() + \"(\" + (c.doNotSkipEncoded || '') + \"));\"\r\n\t\t\t\t+ str;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn new Function(c.varname, str);\r\n\t\t} catch (e) {\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (typeof console !== \"undefined\") console.log(\"Could not create a template function: \" + str);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t};\r\n\r\n\tdoT.compile = function(tmpl, def) {\r\n\t\treturn doT.template(tmpl, null, def);\r\n\t};\r\n\r\n\treturn doT;\r\n});\ndefine('skylark-sphere/components/PSVComponent',[\n  \"../_psv/ctoc\"\n],function(\n  PhotoSphereViewer\n){\n  \"use strict\";\n  /**\n   * @module components\n   */\n\n  /**\n   * Base sub-component class\n   * @param {PhotoSphereViewer | module:components.PSVComponent} parent\n   * @constructor\n   * @memberof module:components\n   */\n  function PSVComponent(parent) {\n    /**\n     * @member {PhotoSphereViewer}\n     * @readonly\n     */\n    this.psv = parent instanceof PhotoSphereViewer ? parent : parent.psv;\n\n    /**\n     * @member {PhotoSphereViewer|module:components.PSVComponent}\n     * @readonly\n     */\n    this.parent = parent;\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     */\n    this.container = null;\n\n    /**\n     * @summary Visibility of the component\n     * @member {boolean}\n     * @readonly\n     */\n    this.visible = true;\n\n    // expose some methods to the viewer\n    if (this.constructor.publicMethods) {\n      this.constructor.publicMethods.forEach(function(method) {\n        this.psv[method] = this[method].bind(this);\n      }, this);\n    }\n  }\n\n  /**\n   * @summary CSS class added to the component's container\n   * @member {string}\n   * @readonly\n   */\n  PSVComponent.className = null;\n\n  /**\n   * @summary List of component's methods which are bound the the main viewer\n   * @member {string[]}\n   * @readonly\n   */\n  PSVComponent.publicMethods = [];\n\n  /**\n   * @summary Creates the component\n   * @protected\n   */\n  PSVComponent.prototype.create = function() {\n    this.container = document.createElement('div');\n\n    if (this.constructor.className) {\n      this.container.className = this.constructor.className;\n    }\n\n    this.parent.container.appendChild(this.container);\n  };\n\n  /**\n   * @summary Destroys the component\n   * @protected\n   */\n  PSVComponent.prototype.destroy = function() {\n    this.parent.container.removeChild(this.container);\n\n    if (this.constructor.publicMethods) {\n      this.constructor.publicMethods.forEach(function(method) {\n        delete this.psv[method];\n      }, this);\n    }\n\n    delete this.container;\n    delete this.psv;\n    delete this.parent;\n  };\n\n  /**\n   * @summary Hides the component\n   * @protected\n   */\n  PSVComponent.prototype.hide = function() {\n    this.container.style.display = 'none';\n    this.visible = false;\n  };\n\n  /**\n   * @summary Displays the component\n   * @protected\n   */\n  PSVComponent.prototype.show = function() {\n    this.container.style.display = '';\n    this.visible = true;\n  };\n\n  return PSVComponent;\n});\ndefine('skylark-sphere/components/PSVHUD',[\n  \"skylark-threejs\",\n  \"../_psv/ctoc\",\n  \"../PSVError\",\n  \"../PSVUtils\",\n  \"../PSVMarker\",\n  \"./PSVComponent\"\n],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVError,\n  PSVUtils,\n  PSVMarker,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * HUD class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVHUD(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @member {SVGElement}\n     * @readonly\n     */\n    this.svgContainer = null;\n\n    /**\n     * @summary All registered markers\n     * @member {Object.<string, PSVMarker>}\n     */\n    this.markers = {};\n\n    /**\n     * @summary Last selected marker\n     * @member {PSVMarker}\n     * @readonly\n     */\n    this.currentMarker = null;\n\n    /**\n     * @summary Marker under the cursor\n     * @member {PSVMarker}\n     * @readonly\n     */\n    this.hoveringMarker = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      panelOpened: false,\n      panelOpening: false,\n      markersButton: this.psv.navbar.getNavbarButton('markers', true)\n    };\n\n    this.create();\n  }\n\n  PSVHUD.prototype = Object.create(PSVComponent.prototype);\n  PSVHUD.prototype.constructor = PSVHUD;\n\n  PSVHUD.className = 'psv-hud';\n  PSVHUD.publicMethods = [\n    'addMarker',\n    'removeMarker',\n    'updateMarker',\n    'clearMarkers',\n    'getMarker',\n    'getCurrentMarker',\n    'gotoMarker',\n    'hideMarker',\n    'showMarker',\n    'toggleMarker',\n    'toggleMarkersList',\n    'showMarkersList',\n    'hideMarkersList'\n  ];\n\n  /**\n   * @override\n   */\n  PSVHUD.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.svgContainer = document.createElementNS(PSVUtils.svgNS, 'svg');\n    this.svgContainer.setAttribute('class', 'psv-hud-svg-container');\n    this.container.appendChild(this.svgContainer);\n\n    // Markers events via delegation\n    this.container.addEventListener('mouseenter', this, true);\n    this.container.addEventListener('mouseleave', this, true);\n    this.container.addEventListener('mousemove', this, true);\n\n    // Viewer events\n    this.psv.on('click', this);\n    this.psv.on('dblclick', this);\n    this.psv.on('render', this);\n    this.psv.on('open-panel', this);\n    this.psv.on('close-panel', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVHUD.prototype.destroy = function() {\n    this.clearMarkers(false);\n\n    this.container.removeEventListener('mouseenter', this);\n    this.container.removeEventListener('mouseleave', this);\n    this.container.removeEventListener('mousemove', this);\n\n    this.psv.off('click', this);\n    this.psv.off('dblclick', this);\n    this.psv.off('render', this);\n    this.psv.off('open-panel', this);\n    this.psv.off('close-panel', this);\n\n    delete this.svgContainer;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVHUD.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'mouseenter':  this._onMouseEnter(e);        break;\n      case 'mouseleave':  this._onMouseLeave(e);        break;\n      case 'mousemove':   this._onMouseMove(e);         break;\n      case 'click':       this._onClick(e.args[0], e, false); break;\n      case 'dblclick':    this._onClick(e.args[0], e, true);  break;\n      case 'render':      this.renderMarkers();         break;\n      case 'open-panel':  this._onPanelOpened();        break;\n      case 'close-panel': this._onPanelClosed();        break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Adds a new marker to viewer\n   * @param {Object} properties - see {@link http://photo-sphere-viewer.js.org/markers.html#config}\n   * @param {boolean} [render=true] - renders the marker immediately\n   * @returns {PSVMarker}\n   * @throws {PSVError} when the marker's id is missing or already exists\n   */\n  PSVHUD.prototype.addMarker = function(properties, render) {\n    if (!properties.id) {\n      throw new PSVError('missing marker id');\n    }\n\n    if (this.markers[properties.id]) {\n      throw new PSVError('marker \"' + properties.id + '\" already exists');\n    }\n\n    var marker = new PSVMarker(properties, this.psv);\n\n    if (marker.isNormal()) {\n      this.container.appendChild(marker.$el);\n    }\n    else {\n      this.svgContainer.appendChild(marker.$el);\n    }\n\n    this.markers[marker.id] = marker;\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n\n    return marker;\n  };\n\n  /**\n   * @summary Returns the internal marker object for a marker id\n   * @param {*} markerId\n   * @returns {PSVMarker}\n   * @throws {PSVError} when the marker cannot be found\n   */\n  PSVHUD.prototype.getMarker = function(markerId) {\n    var id = typeof markerId === 'object' ? markerId.id : markerId;\n\n    if (!this.markers[id]) {\n      throw new PSVError('cannot find marker \"' + id + '\"');\n    }\n\n    return this.markers[id];\n  };\n\n  /**\n   * @summary Returns the last marker selected by the user\n   * @returns {PSVMarker}\n   */\n  PSVHUD.prototype.getCurrentMarker = function() {\n    return this.currentMarker;\n  };\n\n  /**\n   * @summary Updates the existing marker with the same id\n   * @description Every property can be changed but you can't change its type (Eg: `image` to `html`).\n   * @param {Object|PSVMarker} properties\n   * @param {boolean} [render=true] - renders the marker immediately\n   * @returns {PSVMarker}\n   */\n  PSVHUD.prototype.updateMarker = function(properties, render) {\n    var marker = this.getMarker(properties);\n\n    marker.update(properties);\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n\n    return marker;\n  };\n\n  /**\n   * @summary Removes a marker from the viewer\n   * @param {*} marker\n   * @param {boolean} [render=true] - renders the marker immediately\n   */\n  PSVHUD.prototype.removeMarker = function(marker, render) {\n    marker = this.getMarker(marker);\n\n    if (marker.isNormal()) {\n      this.container.removeChild(marker.$el);\n    }\n    else {\n      this.svgContainer.removeChild(marker.$el);\n    }\n\n    if (this.hoveringMarker === marker) {\n      this.psv.tooltip.hideTooltip();\n    }\n\n    marker.destroy();\n    delete this.markers[marker.id];\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n  };\n\n  /**\n   * @summary Removes all markers\n   * @param {boolean} [render=true] - renders the markers immediately\n   */\n  PSVHUD.prototype.clearMarkers = function(render) {\n    Object.keys(this.markers).forEach(function(marker) {\n      this.removeMarker(marker, false);\n    }, this);\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n  };\n\n  /**\n   * @summary Rotate the view to face the marker\n   * @param {*} marker\n   * @param {string|int} [duration] - rotates smoothy, see {@link PhotoSphereViewer#animate}\n   * @fires module:components.PSVHUD.goto-marker-done\n   * @return {Promise}  A promise that will be resolved when the animation finishes\n   */\n  PSVHUD.prototype.gotoMarker = function(marker, duration) {\n    marker = this.getMarker(marker);\n\n    return this.psv.animate(marker, duration)\n      .then(function() {\n        /**\n         * @event goto-marker-done\n         * @memberof module:components.PSVHUD\n         * @summary Triggered when the animation to a marker is done\n         * @param {PSVMarker} marker\n         */\n        this.psv.trigger('goto-marker-done', marker);\n      }.bind(this));\n  };\n\n  /**\n   * @summary Hides a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.hideMarker = function(marker) {\n    this.getMarker(marker).visible = false;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Shows a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.showMarker = function(marker) {\n    this.getMarker(marker).visible = true;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Toggles a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.toggleMarker = function(marker) {\n    this.getMarker(marker).visible ^= true;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Toggles the visibility of markers list\n   */\n  PSVHUD.prototype.toggleMarkersList = function() {\n    if (this.prop.panelOpened) {\n      this.hideMarkersList();\n    }\n    else {\n      this.showMarkersList();\n    }\n  };\n\n  /**\n   * @summary Opens side panel with list of markers\n   * @fires module:components.PSVHUD.filter:render-markers-list\n   */\n  PSVHUD.prototype.showMarkersList = function() {\n    var markers = [];\n    PSVUtils.forEach(this.markers, function(marker) {\n      markers.push(marker);\n    });\n\n    /**\n     * @event filter:render-markers-list\n     * @memberof module:components.PSVHUD\n     * @summary Used to alter the list of markers displayed on the side-panel\n     * @param {PSVMarker[]} markers\n     * @returns {PSVMarker[]}\n     */\n    var html = this.psv.config.templates.markersList({\n      markers : markers,\n//      markers: this.psv.change('render-markers-list', markers),\n      config: this.psv.config\n    });\n\n    this.prop.panelOpening = true;\n    this.psv.panel.showPanel(html, true);\n\n    this.psv.panel.container.querySelector('.psv-markers-list').addEventListener('click', this._onClickItem.bind(this));\n  };\n\n  /**\n   * @summary Closes side panel if it contains the list of markers\n   */\n  PSVHUD.prototype.hideMarkersList = function() {\n    if (this.prop.panelOpened) {\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Updates the visibility and the position of all markers\n   */\n  PSVHUD.prototype.renderMarkers = function() {\n    if (!this.visible) {\n      return;\n    }\n\n    var rotation = !this.psv.isGyroscopeEnabled() ? 0 : THREE.Math.radToDeg(this.psv.camera.rotation.z);\n\n    PSVUtils.forEach(this.markers, function(marker) {\n      var isVisible = marker.visible;\n\n      if (isVisible && marker.isPoly()) {\n        var positions = this._getPolyPositions(marker);\n        isVisible = positions.length > (marker.isPolygon() ? 2 : 1);\n\n        if (isVisible) {\n          marker.position2D = this._getPolyDimensions(marker, positions);\n\n          var points = positions.map(function(pos) {\n            return pos.x + ',' + pos.y;\n          }).join(' ');\n\n          marker.$el.setAttributeNS(null, 'points', points);\n        }\n      }\n      else if (isVisible) {\n        var position = this._getMarkerPosition(marker);\n        isVisible = this._isMarkerVisible(marker, position);\n\n        if (isVisible) {\n          marker.position2D = position;\n\n          var scale = marker.getScale(this.psv.getZoomLevel());\n\n          if (marker.isSvg()) {\n            marker.$el.setAttributeNS(null, 'transform',\n              'translate(' + position.x + ', ' + position.y + ')' +\n              (scale !== 1 ? ' scale(' + scale + ', ' + scale + ')' : '') +\n              (!marker.lockRotation && rotation ? ' rotate(' + rotation + ')' : '')\n            );\n          }\n          else {\n            marker.$el.style.transform = 'translate3D(' + position.x + 'px, ' + position.y + 'px, 0px)' +\n              (scale !== 1 ? ' scale(' + scale + ', ' + scale + ')' : '') +\n              (!marker.lockRotation && rotation ? ' rotateZ(' + rotation + 'deg)' : '');\n          }\n        }\n      }\n\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--visible', isVisible);\n    }.bind(this));\n  };\n\n  /**\n   * @summary Determines if a point marker is visible<br>\n   * It tests if the point is in the general direction of the camera, then check if it's in the viewport\n   * @param {PSVMarker} marker\n   * @param {PhotoSphereViewer.Point} position\n   * @returns {boolean}\n   * @private\n   */\n  PSVHUD.prototype._isMarkerVisible = function(marker, position) {\n    return marker.position3D.dot(this.psv.prop.direction) > 0 &&\n      position.x + marker.width >= 0 &&\n      position.x - marker.width <= this.psv.prop.size.width &&\n      position.y + marker.height >= 0 &&\n      position.y - marker.height <= this.psv.prop.size.height;\n  };\n\n  /**\n   * @summary Computes HUD coordinates of a marker\n   * @param {PSVMarker} marker\n   * @returns {PhotoSphereViewer.Point}\n   * @private\n   */\n  PSVHUD.prototype._getMarkerPosition = function(marker) {\n    if (marker._dynamicSize) {\n      // make the marker visible to get it's size\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--transparent', true);\n      var transform = marker.$el.style.transform;\n      marker.$el.style.transform = null;\n\n      var rect = marker.$el.getBoundingClientRect();\n\n      marker.$el.style.transform = transform;\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--transparent', false);\n\n      marker.width = rect.right - rect.left;\n      marker.height = rect.bottom - rect.top;\n    }\n\n    var position = this.psv.vector3ToViewerCoords(marker.position3D);\n\n    position.x -= marker.width * marker.anchor.left;\n    position.y -= marker.height * marker.anchor.top;\n\n    return position;\n  };\n\n  /**\n   * @summary Computes HUD coordinates of each point of a polygon/polyline<br>\n   * It handles points behind the camera by creating intermediary points suitable for the projector\n   * @param {PSVMarker} marker\n   * @returns {PhotoSphereViewer.Point[]}\n   * @private\n   */\n  PSVHUD.prototype._getPolyPositions = function(marker) {\n    var nbVectors = marker.positions3D.length;\n\n    // compute if each vector is visible\n    var positions3D = marker.positions3D.map(function(vector) {\n      return {\n        vector: vector,\n        visible: vector.dot(this.psv.prop.direction) > 0\n      };\n    }, this);\n\n    // get pairs of visible/invisible vectors for each invisible vector connected to a visible vector\n    var toBeComputed = [];\n    positions3D.forEach(function(pos, i) {\n      if (!pos.visible) {\n        var neighbours = [\n          i === 0 ? positions3D[nbVectors - 1] : positions3D[i - 1],\n          i === nbVectors - 1 ? positions3D[0] : positions3D[i + 1]\n        ];\n\n        neighbours.forEach(function(neighbour) {\n          if (neighbour.visible) {\n            toBeComputed.push({\n              visible: neighbour,\n              invisible: pos,\n              index: i\n            });\n          }\n        });\n      }\n    });\n\n    // compute intermediary vector for each pair (the loop is reversed for splice to insert at the right place)\n    toBeComputed.reverse().forEach(function(pair) {\n      positions3D.splice(pair.index, 0, {\n        vector: this._getPolyIntermediaryPoint(pair.visible.vector, pair.invisible.vector),\n        visible: true\n      });\n    }, this);\n\n    // translate vectors to screen pos\n    return positions3D\n      .filter(function(pos) {\n        return pos.visible;\n      })\n      .map(function(pos) {\n        return this.psv.vector3ToViewerCoords(pos.vector);\n      }, this);\n  };\n\n  /**\n   * Given one point in the same direction of the camera and one point behind the camera,\n   * computes an intermediary point on the great circle delimiting the half sphere visible by the camera.\n   * The point is shifted by .01 rad because the projector cannot handle points exactly on this circle.\n   * {@link http://math.stackexchange.com/a/1730410/327208}\n   * @param P1 {THREE.Vector3}\n   * @param P2 {THREE.Vector3}\n   * @returns {THREE.Vector3}\n   * @private\n   */\n  PSVHUD.prototype._getPolyIntermediaryPoint = function(P1, P2) {\n    var C = this.psv.prop.direction.clone().normalize();\n    var N = new THREE.Vector3().crossVectors(P1, P2).normalize();\n    var V = new THREE.Vector3().crossVectors(N, P1).normalize();\n    var H = new THREE.Vector3().addVectors(P1.clone().multiplyScalar(-C.dot(V)), V.clone().multiplyScalar(C.dot(P1))).normalize();\n    var a = new THREE.Vector3().crossVectors(H, C);\n    return H.applyAxisAngle(a, 0.01).multiplyScalar(PhotoSphereViewer.SPHERE_RADIUS);\n  };\n\n  /**\n   * @summary Computes the boundaries positions of a polygon/polyline marker\n   * @param {PSVMarker} marker - alters width and height\n   * @param {PhotoSphereViewer.Point[]} positions\n   * @returns {PhotoSphereViewer.Point}\n   * @private\n   */\n  PSVHUD.prototype._getPolyDimensions = function(marker, positions) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    positions.forEach(function(pos) {\n      minX = Math.min(minX, pos.x);\n      minY = Math.min(minY, pos.y);\n      maxX = Math.max(maxX, pos.x);\n      maxY = Math.max(maxY, pos.y);\n    });\n\n    marker.width = maxX - minX;\n    marker.height = maxY - minY;\n\n    return {\n      x: minX,\n      y: minY\n    };\n  };\n\n  /**\n   * @summary Handles mouse enter events, show the tooltip for non polygon markers\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.over-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseEnter = function(e) {\n    var marker;\n    if (e.target && (marker = e.target.psvMarker) && !marker.isPoly()) {\n      this.hoveringMarker = marker;\n\n      /**\n       * @event over-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user puts the cursor hover a marker\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('over-marker', marker);\n\n      if (marker.tooltip) {\n        this.psv.tooltip.showTooltip({\n          content: marker.tooltip.content,\n          position: marker.tooltip.position,\n          left: marker.position2D.x,\n          top: marker.position2D.y,\n          box: {\n            width: marker.width,\n            height: marker.height\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * @summary Handles mouse leave events, hide the tooltip\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.leave-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseLeave = function(e) {\n    var marker;\n    if (e.target && (marker = e.target.psvMarker)) {\n      // do not hide if we enter the tooltip itself while hovering a polygon\n      if (marker.isPoly() && e.relatedTarget && PSVUtils.hasParent(e.relatedTarget, this.psv.tooltip.container)) {\n        return;\n      }\n\n      /**\n       * @event leave-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user puts the cursor away from a marker\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('leave-marker', marker);\n\n      this.hoveringMarker = null;\n\n      this.psv.tooltip.hideTooltip();\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events, refresh the tooltip for polygon markers\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.leave-marker\n   * @fires module:components.PSVHUD.over-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseMove = function(e) {\n    if (!this.psv.prop.moving) {\n      var marker;\n\n      // do not hide if we enter the tooltip itself while hovering a polygon\n      if (e.target && (marker = e.target.psvMarker) && marker.isPoly() ||\n        e.target && PSVUtils.hasParent(e.target, this.psv.tooltip.container) && (marker = this.hoveringMarker)) {\n\n        if (!this.hoveringMarker) {\n          this.psv.trigger('over-marker', marker);\n\n          this.hoveringMarker = marker;\n        }\n\n        var boundingRect = this.psv.container.getBoundingClientRect();\n\n        if (marker.tooltip) {\n          this.psv.tooltip.showTooltip({\n            content: marker.tooltip.content,\n            position: marker.tooltip.position,\n            top: e.clientY - boundingRect.top - this.psv.config.tooltip.arrow_size / 2,\n            left: e.clientX - boundingRect.left - this.psv.config.tooltip.arrow_size,\n            box: { // separate the tooltip from the cursor\n              width: this.psv.config.tooltip.arrow_size * 2,\n              height: this.psv.config.tooltip.arrow_size * 2\n            }\n          });\n        }\n      }\n      else if (this.hoveringMarker && this.hoveringMarker.isPoly()) {\n        this.psv.trigger('leave-marker', this.hoveringMarker);\n\n        this.hoveringMarker = null;\n\n        this.psv.tooltip.hideTooltip();\n      }\n    }\n  };\n\n  /**\n   * @summary Handles mouse click events, select the marker and open the panel if necessary\n   * @param {Object} data\n   * @param {Event} e\n   * @param {boolean} dblclick\n   * @fires module:components.PSVHUD.select-marker\n   * @fires module:components.PSVHUD.unselect-marker\n   * @private\n   */\n  PSVHUD.prototype._onClick = function(data, e, dblclick) {\n    var marker;\n    if (data.target && (marker = PSVUtils.getClosest(data.target, '.psv-marker')) && marker.psvMarker) {\n      this.currentMarker = marker.psvMarker;\n\n      /**\n       * @event select-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user clicks on a marker. The marker can be retrieved from outside the event handler\n       * with {@link module:components.PSVHUD.getCurrentMarker}\n       * @param {PSVMarker} marker\n       * @param {boolean} dblclick - the simple click is always fired before the double click\n       */\n      this.psv.trigger('select-marker', this.currentMarker, dblclick);\n\n      if (this.psv.config.click_event_on_marker) {\n        // add the marker to event data\n        data.marker = marker.psvMarker;\n      }\n      else {\n        e.stopImmediatePropagation(); //stopPropagation(); modified by lwf\n      }\n    }\n    else if (this.currentMarker) {\n      /**\n       * @event unselect-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when a marker was selected and the user clicks elsewhere\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('unselect-marker', this.currentMarker);\n\n      this.currentMarker = null;\n    }\n\n    if (marker && marker.psvMarker && marker.psvMarker.content) {\n      this.psv.panel.showPanel(marker.psvMarker.content);\n    }\n    else if (this.psv.panel.prop.opened) {\n      e.stopPropagation();\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Clicks on an item\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.select-marker-list\n   * @private\n   */\n  PSVHUD.prototype._onClickItem = function(e) {\n    var li;\n    if (e.target && (li = PSVUtils.getClosest(e.target, 'li')) && li.dataset.psvMarker) {\n      var marker = this.getMarker(li.dataset.psvMarker);\n\n      /**\n       * @event select-marker-list\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when a marker is selected from the side panel\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('select-marker-list', marker);\n\n      this.gotoMarker(marker, 1000);\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Updates status when the panel is updated\n   * @private\n   */\n  PSVHUD.prototype._onPanelOpened = function() {\n    if (this.prop.panelOpening) {\n      this.prop.panelOpening = false;\n      this.prop.panelOpened = true;\n    }\n    else {\n      this.prop.panelOpened = false;\n    }\n\n    if (this.prop.markersButton) {\n      this.prop.markersButton.toggleActive(this.prop.panelOpened);\n    }\n  };\n\n  /**\n   * @summary Updates status when the panel is updated\n   * @private\n   */\n  PSVHUD.prototype._onPanelClosed = function() {\n    this.prop.panelOpened = false;\n    this.prop.panelOpening = false;\n\n    if (this.prop.markersButton) {\n      this.prop.markersButton.toggleActive(false);\n    }\n  };\n\n  return PSVHUD;\n});\n\n\ndefine('skylark-sphere/components/PSVLoader',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Loader class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVLoader(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @summary Animation canvas\n     * @member {HTMLCanvasElement}\n     * @readonly\n     * @private\n     */\n    this.canvas = null;\n\n    /**\n     * @summary Inner container for vertical center\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.loader = null;\n\n    this.create();\n  }\n\n  PSVLoader.prototype = Object.create(PSVComponent.prototype);\n  PSVLoader.prototype.constructor = PSVLoader;\n\n  PSVLoader.className = 'psv-loader-container';\n\n  /**\n   * @override\n   */\n  PSVLoader.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    var pixelRatio = PhotoSphereViewer.SYSTEM.pixelRatio;\n\n    this.loader = document.createElement('div');\n    this.loader.className = 'psv-loader';\n    this.container.appendChild(this.loader);\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.className = 'psv-loader-canvas';\n\n    this.canvas.width = this.loader.clientWidth * pixelRatio;\n    this.canvas.height = this.loader.clientWidth * pixelRatio;\n    this.loader.appendChild(this.canvas);\n\n    this.tickness = (this.loader.offsetWidth - this.loader.clientWidth) / 2 * pixelRatio;\n\n    var inner;\n    if (this.psv.config.loading_img) {\n      inner = document.createElement('img');\n      inner.className = 'psv-loader-image';\n      inner.src = this.psv.config.loading_img;\n    }\n    else if (this.psv.config.loading_txt) {\n      inner = document.createElement('div');\n      inner.className = 'psv-loader-text';\n      inner.innerHTML = this.psv.config.loading_txt;\n    }\n    if (inner) {\n      var a = Math.round(Math.sqrt(2 * Math.pow((this.canvas.width / 2 - this.tickness / 2) / pixelRatio, 2)));\n      inner.style.maxWidth = a + 'px';\n      inner.style.maxHeight = a + 'px';\n      this.loader.appendChild(inner);\n    }\n  };\n\n  /**\n   * @override\n   */\n  PSVLoader.prototype.destroy = function() {\n    delete this.loader;\n    delete this.canvas;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Sets the loader progression\n   * @param {int} value - from 0 to 100\n   */\n  PSVLoader.prototype.setProgress = function(value) {\n    var context = this.canvas.getContext('2d');\n\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    context.lineWidth = this.tickness;\n    context.strokeStyle = PSVUtils.getStyle(this.loader, 'color');\n\n    context.beginPath();\n    context.arc(\n      this.canvas.width / 2, this.canvas.height / 2,\n      this.canvas.width / 2 - this.tickness / 2,\n      -Math.PI / 2, value / 100 * 2 * Math.PI - Math.PI / 2\n    );\n    context.stroke();\n  };\n\n  return PSVLoader;\n});\n\n\ndefine('skylark-sphere/buttons/Button',[\n  \"../_psv/ctoc\",\n  \"../components/PSVComponent\",\n  \"../PSVUtils\"\n],function(\n  PhotoSphereViewer,\n  PSVComponent,\n  PSVUtils\n){\n  \"use strict\";\n  /**\n   * @module components/buttons\n   */\n\n  /**\n   * Navigation bar button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarButton(navbar) {\n    PSVComponent.call(this, navbar);\n\n    /**\n     * @summary Unique identifier of the button\n     * @member {string}\n     * @readonly\n     */\n    this.id = undefined;\n\n    if (this.constructor.id) {\n      this.id = this.constructor.id;\n    }\n\n    /**\n     * @summary State of the button\n     * @member {boolean}\n     * @readonly\n     */\n    this.enabled = true;\n  }\n\n  PSVNavBarButton.prototype = Object.create(PSVComponent.prototype);\n  PSVNavBarButton.prototype.constructor = PSVNavBarButton;\n\n  /**\n   * @summary Unique identifier of the button\n   * @member {string}\n   * @readonly\n   */\n  PSVNavBarButton.id = null;\n\n  /**\n   * @summary SVG icon name injected in the button\n   * @member {string}\n   * @readonly\n   */\n  PSVNavBarButton.icon = null;\n\n  /**\n   * @summary SVG icon name injected in the button when it is active\n   * @member {string}\n   * @readonly\n   */\n  PSVNavBarButton.iconActive = null;\n\n  /**\n   * @summary Creates the button\n   * @protected\n   */\n  PSVNavBarButton.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    if (this.constructor.icon) {\n      this._setIcon(this.constructor.icon);\n    }\n\n    if (this.id && this.psv.config.lang[this.id]) {\n      this.container.title = this.psv.config.lang[this.id];\n    }\n\n    this.container.addEventListener('click', function(e) {\n      if (this.enabled) {\n        this._onClick();\n      }\n      e.stopPropagation();\n    }.bind(this));\n\n    var supported = this.supported();\n    if (typeof supported.then === 'function') {\n      this.hide();\n\n      supported.then(function(supported) {\n        if (supported) {\n          this.show();\n        }\n      }.bind(this));\n    }\n    else if (!supported) {\n      this.hide();\n    }\n  };\n\n  /**\n   * @summary Destroys the button\n   * @protected\n   */\n  PSVNavBarButton.prototype.destroy = function() {\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Checks if the button can be displayed\n   * @returns {boolean|Promise<boolean>}\n   */\n  PSVNavBarButton.prototype.supported = function() {\n    return true;\n  };\n\n  /**\n   * @summary Changes the active state of the button\n   * @param {boolean} [active] - forced state\n   */\n  PSVNavBarButton.prototype.toggleActive = function(active) {\n    PSVUtils.toggleClass(this.container, 'psv-button--active', active);\n\n    if (this.constructor.iconActive) {\n      this._setIcon(active ? this.constructor.iconActive : this.constructor.icon);\n    }\n  };\n\n  /**\n   * @summary Disables the button\n   */\n  PSVNavBarButton.prototype.disable = function() {\n    this.container.classList.add('psv-button--disabled');\n\n    this.enabled = false;\n  };\n\n  /**\n   * @summary Enables the button\n   */\n  PSVNavBarButton.prototype.enable = function() {\n    this.container.classList.remove('psv-button--disabled');\n\n    this.enabled = true;\n  };\n\n  /**\n   * @summary Set the button icon from {@link PhotoSphereViewer.ICONS}\n   * @param {string} icon\n   * @param {HTMLElement} [container] - default is the main button container\n   * @private\n   */\n  PSVNavBarButton.prototype._setIcon = function(icon, container) {\n    if (!container) {\n      container = this.container;\n    }\n    if (icon) {\n      container.innerHTML = PhotoSphereViewer.ICONS[icon];\n      // classList not supported on IE11, className is read-only !!!!\n      container.querySelector('svg').setAttribute('class', 'psv-button-svg');\n    }\n    else {\n      container.innerHTML = '';\n    }\n  };\n\n  /**\n   * @summary Action when the button is clicked\n   * @private\n   * @abstract\n   */\n  PSVNavBarButton.prototype._onClick = function() {\n\n  };\n\n  return PSVNavBarButton;\n});\n\n\ndefine('skylark-sphere/buttons/AutorotateButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n  \"use strict\";\n  /**\n   * Navigation bar autorotate button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarAutorotateButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarAutorotateButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarAutorotateButton.prototype.constructor = PSVNavBarAutorotateButton;\n\n  PSVNavBarAutorotateButton.id = 'autorotate';\n  PSVNavBarAutorotateButton.className = 'psv-button psv-button--hover-scale psv-autorotate-button';\n  PSVNavBarAutorotateButton.icon = 'play.svg';\n  PSVNavBarAutorotateButton.iconActive = 'play-active.svg';\n\n  /**\n   * @override\n   */\n  PSVNavBarAutorotateButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('autorotate', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarAutorotateButton.prototype.destroy = function() {\n    this.psv.off('autorotate', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarAutorotateButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'autorotate': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles autorotate\n   */\n  PSVNavBarAutorotateButton.prototype._onClick = function() {\n    this.psv.toggleAutorotate();\n  };\n\n  return PSVNavBarAutorotateButton;\n\n});\n\ndefine('skylark-sphere/buttons/CustomButton',[\n  \"../PSVUtils\",\n  \"./Button\"\n],function(\n  PSVUtils,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar custom button class\n   * @param {module:components.PSVNavBar} navbar\n   * @param {Object} config\n   * @param {string} [config.id]\n   * @param {string} [config.className]\n   * @param {string} [config.title]\n   * @param {string} [config.content]\n   * @param {function} [config.onClick]\n   * @param {boolean} [config.enabled=true]\n   * @param {boolean} [config.visible=true]\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarCustomButton(navbar, config) {\n    PSVNavBarButton.call(this, navbar);\n\n    /**\n     * @member {Object}\n     * @readonly\n     * @private\n     */\n    this.config = config;\n\n    if (this.config.id) {\n      this.id = this.config.id;\n    }\n\n    this.create();\n  }\n\n  PSVNavBarCustomButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarCustomButton.prototype.constructor = PSVNavBarCustomButton;\n\n  PSVNavBarCustomButton.className = 'psv-button psv-custom-button';\n\n  /**\n   * @override\n   */\n  PSVNavBarCustomButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    if (this.config.className) {\n      PSVUtils.addClasses(this.container, this.config.className);\n    }\n\n    if (this.config.title) {\n      this.container.title = this.config.title;\n    }\n\n    if (this.config.content) {\n      this.container.innerHTML = this.config.content;\n    }\n\n    if (this.config.enabled === false || this.config.disabled === true) {\n      this.disable();\n    }\n\n    if (this.config.visible === false || this.config.hidden === true) {\n      this.hide();\n    }\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarCustomButton.prototype.destroy = function() {\n    delete this.config;\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   * @description Calls user method\n   */\n  PSVNavBarCustomButton.prototype._onClick = function() {\n    if (this.config.onClick) {\n      this.config.onClick.apply(this.psv);\n    }\n  };\n\n\n  return PSVNavBarCustomButton;\n});\n\n\ndefine('skylark-sphere/buttons/DownloadButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n\t\"use strict\";\n\t/**\n\t * Navigation bar download button class\n\t * @param {module:components.PSVNavBar} navbar\n\t * @constructor\n\t * @extends module:components/buttons.PSVNavBarButton\n\t * @memberof module:components/buttons\n\t */\n\tfunction PSVNavBarDownloadButton(navbar) {\n\t  PSVNavBarButton.call(this, navbar);\n\n\t  this.create();\n\t}\n\n\tPSVNavBarDownloadButton.prototype = Object.create(PSVNavBarButton.prototype);\n\tPSVNavBarDownloadButton.prototype.constructor = PSVNavBarDownloadButton;\n\n\tPSVNavBarDownloadButton.id = 'download';\n\tPSVNavBarDownloadButton.className = 'psv-button psv-button--hover-scale psv-download-button';\n\tPSVNavBarDownloadButton.icon = 'download.svg';\n\n\t/**\n\t * @override\n\t * @description Asks the browser to download the panorama source file\n\t */\n\tPSVNavBarDownloadButton.prototype._onClick = function() {\n\t  var link = document.createElement('a');\n\t  link.href = this.psv.config.panorama;\n\t  link.download = this.psv.config.panorama;\n\t  this.psv.container.appendChild(link);\n\t  link.click();\n\t};\n\n\treturn PSVNavBarDownloadButton;\n});\n\n\ndefine('skylark-sphere/buttons/FullscreenButton',[\n  \"../_psv/ctoc\",\n  \"./Button\"\n],function(\n  PhotoSphereViewer,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar fullscreen button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarFullscreenButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarFullscreenButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarFullscreenButton.prototype.constructor = PSVNavBarFullscreenButton;\n\n  PSVNavBarFullscreenButton.id = 'fullscreen';\n  PSVNavBarFullscreenButton.className = 'psv-button psv-button--hover-scale psv-fullscreen-button';\n  PSVNavBarFullscreenButton.icon = 'fullscreen-in.svg';\n  PSVNavBarFullscreenButton.iconActive = 'fullscreen-out.svg';\n\n  /**\n   * @override\n   */\n  PSVNavBarFullscreenButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('fullscreen-updated', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarFullscreenButton.prototype.destroy = function() {\n    this.psv.off('fullscreen-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarFullscreenButton.prototype.supported = function() {\n    return !!PhotoSphereViewer.SYSTEM.fullscreenEvent;\n  };\n\n  /**\n   * Handle events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarFullscreenButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'fullscreen-updated': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles fullscreen\n   */\n  PSVNavBarFullscreenButton.prototype._onClick = function() {\n    this.psv.toggleFullscreen();\n  };\n\n  return PSVNavBarFullscreenButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/GyroscopeButton',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./Button\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar gyroscope button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarGyroscopeButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarGyroscopeButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarGyroscopeButton.prototype.constructor = PSVNavBarGyroscopeButton;\n\n  PSVNavBarGyroscopeButton.id = 'gyroscope';\n  PSVNavBarGyroscopeButton.className = 'psv-button psv-button--hover-scale psv-gyroscope-button';\n  PSVNavBarGyroscopeButton.icon = 'compass.svg';\n\n  /**\n   * @override\n   * @description The button gets visible once the gyroscope API is ready\n   */\n  PSVNavBarGyroscopeButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('gyroscope-updated', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarGyroscopeButton.prototype.destroy = function() {\n    this.psv.off('gyroscope-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarGyroscopeButton.prototype.supported = function() {\n    if (!PSVUtils.checkTHREE('DeviceOrientationControls')) {\n      return false;\n    }\n    else {\n      return PhotoSphereViewer.SYSTEM.deviceOrientationSupported;\n    }\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarGyroscopeButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'gyroscope-updated': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles gyroscope control\n   */\n  PSVNavBarGyroscopeButton.prototype._onClick = function() {\n    this.psv.toggleGyroscopeControl();\n  };\n\n  return PSVNavBarGyroscopeButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/MarkersButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n\t\"use strict\";\n\t/**\n\t * Navigation bar markers button class\n\t * @param {module:components.PSVNavBar} navbar\n\t * @constructor\n\t * @extends module:components/buttons.PSVNavBarButton\n\t * @memberof module:components/buttons\n\t */\n\tfunction PSVNavBarMarkersButton(navbar) {\n\t  PSVNavBarButton.call(this, navbar);\n\n\t  this.create();\n\t}\n\n\tPSVNavBarMarkersButton.prototype = Object.create(PSVNavBarButton.prototype);\n\tPSVNavBarMarkersButton.prototype.constructor = PSVNavBarMarkersButton;\n\n\tPSVNavBarMarkersButton.id = 'markers';\n\tPSVNavBarMarkersButton.className = 'psv-button psv-button--hover-scale psv-markers-button';\n\tPSVNavBarMarkersButton.icon = 'pin.svg';\n\n\t/**\n\t * @override\n\t * @description Toggles markers list\n\t */\n\tPSVNavBarMarkersButton.prototype._onClick = function() {\n\t  this.psv.hud.toggleMarkersList();\n\t};\n\n\treturn PSVNavBarMarkersButton;\n});\n\ndefine('skylark-sphere/buttons/StereoButton',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./Button\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar gyroscope button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarStereoButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarStereoButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarStereoButton.prototype.constructor = PSVNavBarStereoButton;\n\n  PSVNavBarStereoButton.id = 'stereo';\n  PSVNavBarStereoButton.className = 'psv-button psv-button--hover-scale psv-stereo-button';\n  PSVNavBarStereoButton.icon = 'stereo.svg';\n\n  /**\n   * @override\n   * @description The button gets visible once the gyroscope API is ready\n   */\n  PSVNavBarStereoButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('stereo-updated', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarStereoButton.prototype.destroy = function() {\n    this.psv.off('stereo-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarStereoButton.prototype.supported = function() {\n    if (!PhotoSphereViewer.SYSTEM.fullscreenEvent || !PSVUtils.checkTHREE('DeviceOrientationControls')) {\n      return false;\n    }\n    else {\n      return PhotoSphereViewer.SYSTEM.deviceOrientationSupported;\n    }\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarStereoButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'stereo-updated': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles gyroscope control\n   */\n  PSVNavBarStereoButton.prototype._onClick = function() {\n    this.psv.toggleStereoView();\n  };\n\n  return PSVNavBarStereoButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/ZoomButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n  \"use strict\";\n  /**\n   * Navigation bar zoom button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarZoomButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.zoom_range = null;\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.zoom_value = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      mousedown: false,\n      buttondown: false,\n      longPressInterval: null,\n      longPressTimeout: null\n    };\n\n    this.create();\n  }\n\n  PSVNavBarZoomButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarZoomButton.prototype.constructor = PSVNavBarZoomButton;\n\n  PSVNavBarZoomButton.id = 'zoom';\n  PSVNavBarZoomButton.className = 'psv-button psv-zoom-button';\n\n  /**\n   * @override\n   */\n  PSVNavBarZoomButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    var zoom_minus = document.createElement('div');\n    zoom_minus.className = 'psv-zoom-button-minus';\n    zoom_minus.title = this.psv.config.lang.zoomOut;\n    this._setIcon('zoom-out.svg', zoom_minus);\n    this.container.appendChild(zoom_minus);\n\n    var zoom_range_bg = document.createElement('div');\n    zoom_range_bg.className = 'psv-zoom-button-range';\n    this.container.appendChild(zoom_range_bg);\n\n    this.zoom_range = document.createElement('div');\n    this.zoom_range.className = 'psv-zoom-button-line';\n    zoom_range_bg.appendChild(this.zoom_range);\n\n    this.zoom_value = document.createElement('div');\n    this.zoom_value.className = 'psv-zoom-button-handle';\n    this.zoom_range.appendChild(this.zoom_value);\n\n    var zoom_plus = document.createElement('div');\n    zoom_plus.className = 'psv-zoom-button-plus';\n    zoom_plus.title = this.psv.config.lang.zoomIn;\n    this._setIcon('zoom-in.svg', zoom_plus);\n    this.container.appendChild(zoom_plus);\n\n    this.zoom_range.addEventListener('mousedown', this);\n    this.zoom_range.addEventListener('touchstart', this);\n    this.psv.container.addEventListener('mousemove', this);\n    this.psv.container.addEventListener('touchmove', this);\n    this.psv.container.addEventListener('mouseup', this);\n    this.psv.container.addEventListener('touchend', this);\n    zoom_minus.addEventListener('mousedown', this._zoomOut.bind(this));\n    zoom_plus.addEventListener('mousedown', this._zoomIn.bind(this));\n\n    this.psv.on('zoom-updated', this);\n\n    this.psv.one('ready', function() {\n      this._moveZoomValue(this.psv.prop.zoom_lvl);\n    }.bind(this));\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarZoomButton.prototype.destroy = function() {\n    this._stopZoomChange();\n\n    this.psv.container.removeEventListener('mousemove', this);\n    this.psv.container.removeEventListener('touchmove', this);\n    this.psv.container.removeEventListener('mouseup', this);\n    this.psv.container.removeEventListener('touchend', this);\n\n    delete this.zoom_range;\n    delete this.zoom_value;\n\n    this.psv.off('zoom-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarZoomButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'mousedown':     this._initZoomChangeWithMouse(e); break;\n      case 'touchstart':    this._initZoomChangeByTouch(e); break;\n      case 'mousemove':     this._changeZoomWithMouse(e); break;\n      case 'touchmove':     this._changeZoomByTouch(e); break;\n      case 'mouseup':       this._stopZoomChange(e); break;\n      case 'touchend':      this._stopZoomChange(e); break;\n      case 'zoom-updated':  this._moveZoomValue(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Moves the zoom cursor\n   * @param {int} level\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._moveZoomValue = function(level) {\n    this.zoom_value.style.left = (level / 100 * this.zoom_range.offsetWidth - this.zoom_value.offsetWidth / 2) + 'px';\n  };\n\n  /**\n   * @summary Handles mouse down events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._initZoomChangeWithMouse = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.mousedown = true;\n    this._changeZoom(evt.clientX);\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._initZoomChangeByTouch = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.mousedown = true;\n    this._changeZoom(evt.changedTouches[0].clientX);\n  };\n\n  /**\n   * @summary Handles click events\n   * @description Zooms in and register long press timer\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._zoomIn = function() {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.buttondown = true;\n    this.psv.zoomIn();\n    this.prop.longPressTimeout = window.setTimeout(this._startLongPressInterval.bind(this, 1), 200);\n  };\n\n  /**\n   * @summary Handles click events\n   * @description Zooms out and register long press timer\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._zoomOut = function() {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.buttondown = true;\n    this.psv.zoomOut();\n    this.prop.longPressTimeout = window.setTimeout(this._startLongPressInterval.bind(this, -1), 200);\n  };\n\n  /**\n   * @summary Continues zooming as long as the user presses the button\n   * @param value\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._startLongPressInterval = function(value) {\n    if (this.prop.buttondown) {\n      this.prop.longPressInterval = window.setInterval(function() {\n        this.psv.zoom(this.psv.prop.zoom_lvl + value);\n      }.bind(this), 50);\n    }\n  };\n\n  /**\n   * @summary Handles mouse up events\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._stopZoomChange = function() {\n    if (!this.enabled) {\n      return;\n    }\n\n    window.clearInterval(this.prop.longPressInterval);\n    window.clearTimeout(this.prop.longPressTimeout);\n    this.prop.longPressInterval = null;\n    this.prop.mousedown = false;\n    this.prop.buttondown = false;\n  };\n\n  /**\n   * @summary Handles mouse move events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._changeZoomWithMouse = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n\n    evt.preventDefault();\n    this._changeZoom(evt.clientX);\n  };\n\n  /**\n   * @summary Handles touch move events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._changeZoomByTouch = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n    this._changeZoom(evt.changedTouches[0].clientX);\n  };\n\n  /**\n   * @summary Zoom change\n   * @param {int} x - mouse/touch position\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._changeZoom = function(x) {\n    if (this.prop.mousedown) {\n      var user_input = parseInt(x) - this.zoom_range.getBoundingClientRect().left;\n      var zoom_level = user_input / this.zoom_range.offsetWidth * 100;\n      this.psv.zoom(zoom_level);\n    }\n  };\n\n  return PSVNavBarZoomButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/CaptionButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n  /**\n   * Navigation bar caption button class\n   * @param {module:components.PSVNavBarCaption} caption\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarCaptionButton(caption) {\n    PSVNavBarButton.call(this, caption);\n\n    this.create();\n  }\n\n  PSVNavBarCaptionButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarCaptionButton.prototype.constructor = PSVNavBarCaptionButton;\n\n  PSVNavBarCaptionButton.id = 'markers';\n  PSVNavBarCaptionButton.className = 'psv-button psv-button--hover-scale psv-caption-button';\n  PSVNavBarCaptionButton.icon = 'info.svg';\n\n  /**\n   * @override\n   */\n  PSVNavBarCaptionButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('hide-notification', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarCaptionButton.prototype.destroy = function() {\n    this.psv.off('hide-notification', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarCaptionButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'hide-notification': this.toggleActive(false); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles markers list\n   */\n  PSVNavBarCaptionButton.prototype._onClick = function() {\n    if (this.psv.isNotificationVisible()) {\n      this.psv.hideNotification();\n    }\n    else {\n      this.psv.showNotification(this.parent.prop.caption);\n      this.toggleActive(true);\n    }\n  };\n\n  return PSVNavBarCaptionButton;\n\n});\n\ndefine('skylark-sphere/components/PSVNavBarCaption',[\n  \"../_psv/ctoc\",\n  \"../buttons/CaptionButton\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVNavBarCaptionButton,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Navbar caption class\n   * @param {PSVNavBar} navbar\n   * @param {string} caption\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVNavBarCaption(navbar, caption) {\n    PSVComponent.call(this, navbar);\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.content = null;\n\n    /**\n     * @member {PSVNavBarCaptionButton}\n     * @readonly\n     * @private\n     */\n    this.button = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      caption: '',\n      width: 0\n    };\n\n    this.create();\n\n    this.setCaption(caption);\n  }\n\n  PSVNavBarCaption.prototype = Object.create(PSVComponent.prototype);\n  PSVNavBarCaption.prototype.constructor = PSVNavBarCaption;\n\n  PSVNavBarCaption.className = 'psv-caption';\n  PSVNavBarCaption.publicMethods = ['setCaption'];\n\n  /**\n   * @override\n   */\n  PSVNavBarCaption.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.button = new PSVNavBarCaptionButton(this);\n    this.button.hide();\n\n    this.content = document.createElement('div');\n    this.content.className = 'psv-caption-content';\n    this.container.appendChild(this.content);\n\n    window.addEventListener('resize', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarCaption.prototype.destroy = function() {\n    window.removeEventListener('resize', this);\n\n    delete this.content;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarCaption.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'resize': this._onResize(); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Sets the bar caption\n   * @param {string} html\n   */\n  PSVNavBarCaption.prototype.setCaption = function(html) {\n    if (!html) {\n      this.prop.caption = '';\n    }\n    else {\n      this.prop.caption = html;\n    }\n\n    this.content.innerHTML = this.prop.caption;\n\n    this.content.style.display = '';\n    this.prop.width = this.content.offsetWidth;\n\n    this._onResize();\n  };\n\n  /**\n   * @summary Toggles content and icon deending on available space\n   * @private\n   */\n  PSVNavBarCaption.prototype._onResize = function() {\n    var width = parseInt(PSVUtils.getStyle(this.container, 'width')); // get real inner width\n\n    if (width >= this.prop.width) {\n      this.button.hide();\n      this.content.style.display = '';\n    }\n    else {\n      this.button.show();\n      this.content.style.display = 'none';\n    }\n  };\n\n  return PSVNavBarCaption;\n});\n  \n\ndefine('skylark-sphere/components/PSVNavBar',[\n  \"../_psv/ctoc\",\n  \"../buttons/AutorotateButton\",\n  \"../buttons/CustomButton\",\n  \"../buttons/DownloadButton\",\n  \"../buttons/FullscreenButton\",\n  \"../buttons/GyroscopeButton\",\n  \"../buttons/MarkersButton\",\n  \"../buttons/StereoButton\",\n  \"../buttons/ZoomButton\",\n  \"../PSVUtils\",\n  \"../PSVError\",\n  \"./PSVComponent\",\n  \"./PSVNavBarCaption\"\n],function(\n  PhotoSphereViewer,\n  PSVNavBarAutorotateButton,\n  PSVNavBarCustomButton,\n  PSVNavBarDownloadButton,\n  PSVNavBarFullscreenButton,\n  PSVNavBarGyroscopeButton,\n  PSVNavBarMarkersButton,\n  PSVNavBarStereoButton,\n  PSVNavBarZoomButton,\n  PSVUtils,\n  PSVError,\n  PSVComponent,\n  PSVNavBarCaption\n){\n  \"use strict\";\n  /**\n   * Navigation bar class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVNavBar(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @member {Object}\n     * @readonly\n     * @private\n     */\n    this.config = this.psv.config.navbar;\n\n    /**\n     * @summary List of buttons of the navbar\n     * @member {Array.<module:components/buttons.PSVNavBarButton>}\n     * @readonly\n     */\n    this.items = [];\n\n    // all buttons\n    if (this.config === true) {\n      this.config = PSVUtils.clone(PhotoSphereViewer.DEFAULTS.navbar);\n    }\n    // space separated list\n    else if (typeof this.config === 'string') {\n      this.config = this.config.split(' ');\n    }\n    // migration from object\n    else if (!Array.isArray(this.config)) {\n      console.warn('PhotoSphereViewer: hashmap form of \"navbar\" is deprecated, use an array instead.');\n\n      var config = this.config;\n      this.config = [];\n\n      PSVUtils.forEach(config, function(enabled, key) {\n        if (enabled) {\n          this.config.push(key);\n        }\n      }.bind(this));\n\n      this.config.sort(function(a, b) {\n        return PhotoSphereViewer.DEFAULTS.navbar.indexOf(a) - PhotoSphereViewer.DEFAULTS.navbar.indexOf(b);\n      });\n    }\n\n    this.create();\n  }\n\n  PSVNavBar.prototype = Object.create(PSVComponent.prototype);\n  PSVNavBar.prototype.constructor = PSVNavBar;\n\n  PSVNavBar.className = 'psv-navbar psv-navbar--open';\n  PSVNavBar.publicMethods = ['showNavbar', 'hideNavbar', 'toggleNavbar', 'getNavbarButton'];\n\n  /**\n   * @override\n   * @throws {PSVError} when the configuration is incorrect\n   */\n  PSVNavBar.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.config.forEach(function(button) {\n      if (typeof button === 'object') {\n        this.items.push(new PSVNavBarCustomButton(this, button));\n      }\n      else {\n        switch (button) {\n          case PSVNavBarAutorotateButton.id:\n            this.items.push(new PSVNavBarAutorotateButton(this));\n            break;\n\n          case PSVNavBarZoomButton.id:\n            this.items.push(new PSVNavBarZoomButton(this));\n            break;\n\n          case PSVNavBarDownloadButton.id:\n            this.items.push(new PSVNavBarDownloadButton(this));\n            break;\n\n          case PSVNavBarMarkersButton.id:\n            this.items.push(new PSVNavBarMarkersButton(this));\n            break;\n\n          case PSVNavBarFullscreenButton.id:\n            this.items.push(new PSVNavBarFullscreenButton(this));\n            break;\n\n          case PSVNavBarStereoButton.id:\n            this.items.push(new PSVNavBarStereoButton(this));\n            break;\n\n          case PSVNavBarGyroscopeButton.id:\n            this.items.push(new PSVNavBarGyroscopeButton(this));\n            break;\n\n          case 'caption':\n            this.items.push(new PSVNavBarCaption(this, this.psv.config.caption));\n            break;\n\n          /* falls through */\n          default:\n            if (button.indexOf('spacer') === 0) {\n              console.warn('PhotoSphereViewer: navbar spacers have been removed.');\n            }\n            else {\n              throw new PSVError('Unknown button ' + button);\n            }\n            break;\n        }\n      }\n    }, this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBar.prototype.destroy = function() {\n    this.items.forEach(function(item) {\n      item.destroy();\n    });\n\n    this.items.length = 0;\n    delete this.config;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Returns a button by its identifier\n   * @param {string} id\n   * @param {boolean} [silent=false]\n   * @returns {module:components/buttons.PSVNavBarButton}\n   */\n  PSVNavBar.prototype.getNavbarButton = function(id, silent) {\n    var button = null;\n\n    this.items.some(function(item) {\n      if (item.id === id) {\n        button = item;\n        return true;\n      }\n      else {\n        return false;\n      }\n    });\n\n    if (!button && !silent) {\n      console.warn('PhotoSphereViewer: button \"' + id + '\" not found in the navbar.');\n    }\n\n    return button;\n  };\n\n  /**\n   * @summary Shows the navbar\n   */\n  PSVNavBar.prototype.showNavbar = function() {\n    this.toggleNavbar(true);\n  };\n\n  /**\n   * @summary Hides the navbar\n   */\n  PSVNavBar.prototype.hideNavbar = function() {\n    this.toggleNavbar(false);\n  };\n\n  /**\n   * @summary Toggles the navbar\n   * @param {boolean} active\n   */\n  PSVNavBar.prototype.toggleNavbar = function(active) {\n    PSVUtils.toggleClass(this.container, 'psv-navbar--open', active);\n  };\n\n\n  return PSVNavBar;\n});\n\ndefine('skylark-sphere/components/PSVNotification',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Notification class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVNotification(psv) {\n    PSVComponent.call(this, psv);\n\n    this.create();\n  }\n\n  PSVNotification.prototype = Object.create(PSVComponent.prototype);\n  PSVNotification.prototype.constructor = PSVNotification;\n\n  PSVNotification.className = 'psv-notification';\n  PSVNotification.publicMethods = ['showNotification', 'hideNotification', 'isNotificationVisible'];\n\n  /**\n   * @override\n   */\n  PSVNotification.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.content = document.createElement('div');\n    this.content.className = 'psv-notification-content';\n\n    this.container.appendChild(this.content);\n\n    this.content.addEventListener('click', this.hideNotification.bind(this));\n  };\n\n  /**\n   * @override\n   */\n  PSVNotification.prototype.destroy = function() {\n    delete this.content;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Checks if the notification is visible\n   * @returns {boolean}\n   */\n  PSVNotification.prototype.isNotificationVisible = function() {\n    return this.container.classList.contains('psv-notification--visible');\n  };\n\n  /**\n   * @summary Displays a notification on the viewer\n   * @param {Object|string} config\n   * @param {string} config.content\n   * @param {int} [config.timeout]\n   *\n   * @example\n   * viewer.showNotification({ content: 'Hello world', timeout: 5000})\n   * viewer.showNotification('Hello world')\n   */\n  PSVNotification.prototype.showNotification = function(config) {\n    if (typeof config === 'string') {\n      config = {\n        content: config\n      };\n    }\n\n    this.content.innerHTML = config.content;\n\n    this.container.classList.add('psv-notification--visible');\n\n    /**\n     * @event show-notification\n     * @memberof module:components.PSVNotification\n     * @summary Trigered when the notification is shown\n     */\n    this.psv.trigger('show-notification');\n\n    if (config.timeout) {\n      setTimeout(this.hideNotification.bind(this), config.timeout);\n    }\n  };\n\n  /**\n   * @summary Hides the notification\n   * @fires module:components.PSVNotification.hide-notification\n   */\n  PSVNotification.prototype.hideNotification = function() {\n    if (this.isNotificationVisible()) {\n      this.container.classList.remove('psv-notification--visible');\n\n      /**\n       * @event hide-notification\n       * @memberof module:components.PSVNotification\n       * @summary Trigered when the notification is hidden\n       */\n      this.psv.trigger('hide-notification');\n    }\n  };\n\n\n  return PSVNotification;\n\n});\n  \ndefine('skylark-sphere/components/PSVOverlay',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Overlay class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVOverlay(psv) {\n    PSVComponent.call(this, psv);\n\n    this.create();\n    this.hide();\n  }\n\n  PSVOverlay.prototype = Object.create(PSVComponent.prototype);\n  PSVOverlay.prototype.constructor = PSVOverlay;\n\n  PSVOverlay.className = 'psv-overlay';\n  PSVOverlay.publicMethods = ['showOverlay', 'hideOverlay', 'isOverlayVisible'];\n\n  /**\n   * @override\n   */\n  PSVOverlay.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.image = document.createElement('div');\n    this.image.className = 'psv-overlay-image';\n    this.container.appendChild(this.image);\n\n    this.text = document.createElement('div');\n    this.text.className = 'psv-overlay-text';\n    this.container.appendChild(this.text);\n\n    this.subtext = document.createElement('div');\n    this.subtext.className = 'psv-overlay-subtext';\n    this.container.appendChild(this.subtext);\n\n    this.container.addEventListener('click', this.hideOverlay.bind(this));\n  };\n\n  /**\n   * @override\n   */\n  PSVOverlay.prototype.destroy = function() {\n    delete this.image;\n    delete this.text;\n    delete this.subtext;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Checks if the overlay is visible\n   * @returns {boolean}\n   */\n  PSVOverlay.prototype.isOverlayVisible = function() {\n    return this.visible;\n  };\n\n  /**\n   * @summary Displays an overlay on the viewer\n   * @param {Object|string} config\n   * @param {string} config.image\n   * @param {string} config.text\n   * @param {string} config.subtext\n   *\n   * @example\n   * viewer.showOverlay({\n   *   image: '<svg></svg>',\n   *   text: '....',\n   *   subtext: '....'\n   * })\n   */\n  PSVOverlay.prototype.showOverlay = function(config) {\n    if (typeof config === 'string') {\n      config = {\n        text: config\n      };\n    }\n\n    this.image.innerHTML = config.image || '';\n    this.text.innerHTML = config.text || '';\n    this.subtext.innerHTML = config.subtext || '';\n\n    this.show();\n\n    /**\n     * @event show-overlay\n     * @memberof module:components.PSVOverlay\n     * @summary Trigered when the overlay is shown\n     */\n    this.psv.trigger('show-overlay');\n  };\n\n  /**\n   * @summary Hides the notification\n   * @fires module:components.PSVOverlay.hide-notification\n   */\n  PSVOverlay.prototype.hideOverlay = function() {\n    if (this.isOverlayVisible()) {\n      this.hide();\n\n      /**\n       * @event hide-overlay\n       * @memberof module:components.PSVOverlay\n       * @summary Trigered when the overlay is hidden\n       */\n      this.psv.trigger('hide-overlay');\n    }\n  };\n\n  return PSVOverlay;\n });\n \ndefine('skylark-sphere/components/PSVPanel',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Panel class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVPanel(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @summary Content container\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.content = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      mouse_x: 0,\n      mouse_y: 0,\n      mousedown: false,\n      opened: false\n    };\n\n    this.create();\n  }\n\n  PSVPanel.prototype = Object.create(PSVComponent.prototype);\n  PSVPanel.prototype.constructor = PSVPanel;\n\n  PSVPanel.className = 'psv-panel';\n  PSVPanel.publicMethods = ['showPanel', 'hidePanel'];\n\n  /**\n   * @override\n   */\n  PSVPanel.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.container.innerHTML =\n      '<div class=\"psv-panel-resizer\"></div>' +\n      '<div class=\"psv-panel-close-button\"></div>' +\n      '<div class=\"psv-panel-content\"></div>';\n\n    this.content = this.container.querySelector('.psv-panel-content');\n\n    var closeBtn = this.container.querySelector('.psv-panel-close-button');\n    closeBtn.addEventListener('click', this.hidePanel.bind(this));\n\n    // Stop event bubling from panel\n    if (this.psv.config.mousewheel) {\n      this.container.addEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, function(e) {\n        e.stopPropagation();\n      });\n    }\n\n    // Event for panel resizing + stop bubling\n    var resizer = this.container.querySelector('.psv-panel-resizer');\n    resizer.addEventListener('mousedown', this);\n    resizer.addEventListener('touchstart', this);\n    this.psv.container.addEventListener('mouseup', this);\n    this.psv.container.addEventListener('touchend', this);\n    this.psv.container.addEventListener('mousemove', this);\n    this.psv.container.addEventListener('touchmove', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVPanel.prototype.destroy = function() {\n    this.psv.container.removeEventListener('mousemove', this);\n    this.psv.container.removeEventListener('touchmove', this);\n    this.psv.container.removeEventListener('mouseup', this);\n    this.psv.container.removeEventListener('touchend', this);\n\n    delete this.prop;\n    delete this.content;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVPanel.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'mousedown': this._onMouseDown(e); break;\n      case 'touchstart': this._onTouchStart(e); break;\n      case 'mousemove': this._onMouseMove(e); break;\n      case 'touchmove': this._onTouchMove(e); break;\n      case 'mouseup': this._onMouseUp(e); break;\n      case 'touchend': this._onMouseUp(e); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Shows the panel\n   * @param {string} content\n   * @param {boolean} [noMargin=false]\n   * @fires module:components.PSVPanel.open-panel\n   */\n  PSVPanel.prototype.showPanel = function(content, noMargin) {\n    this.content.innerHTML = content;\n    this.content.scrollTop = 0;\n    this.container.classList.add('psv-panel--open');\n\n    PSVUtils.toggleClass(this.content, 'psv-panel-content--no-margin', noMargin === true);\n\n    this.prop.opened = true;\n\n    /**\n     * @event open-panel\n     * @memberof module:components.PSVPanel\n     * @summary Triggered when the panel is opened\n     */\n    this.psv.trigger('open-panel');\n  };\n\n  /**\n   * @summary Hides the panel\n   * @fires module:components.PSVPanel.close-panel\n   */\n  PSVPanel.prototype.hidePanel = function() {\n    this.content.innerHTML = null;\n    this.prop.opened = false;\n    this.container.classList.remove('psv-panel--open');\n\n    /**\n     * @event close-panel\n     * @memberof module:components.PSVPanel\n     * @summary Trigered when the panel is closed\n     */\n    this.psv.trigger('close-panel');\n  };\n\n  /**\n   * @summary Handles mouse down events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onMouseDown = function(evt) {\n    evt.stopPropagation();\n    this._startResize(evt);\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onTouchStart = function(evt) {\n    evt.stopPropagation();\n    this._startResize(evt.changedTouches[0]);\n  };\n\n  /**\n   * @summary Handles mouse up events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onMouseUp = function(evt) {\n    if (this.prop.mousedown) {\n      evt.stopPropagation();\n      this.prop.mousedown = false;\n      this.content.classList.remove('psv-panel-content--no-interaction');\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onMouseMove = function(evt) {\n    if (this.prop.mousedown) {\n      evt.stopPropagation();\n      this._resize(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch move events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onTouchMove = function(evt) {\n    if (this.prop.mousedown) {\n      this._resize(evt.touches[0]);\n    }\n  };\n\n  /**\n   * @summary Initializes the panel resize\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PSVPanel.prototype._startResize = function(evt) {\n    this.prop.mouse_x = parseInt(evt.clientX);\n    this.prop.mouse_y = parseInt(evt.clientY);\n    this.prop.mousedown = true;\n    this.content.classList.add('psv-panel-content--no-interaction');\n  };\n\n  /**\n   * @summary Resizes the panel\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PSVPanel.prototype._resize = function(evt) {\n    var x = parseInt(evt.clientX);\n    var y = parseInt(evt.clientY);\n\n    this.container.style.width = (this.container.offsetWidth - (x - this.prop.mouse_x)) + 'px';\n\n    this.prop.mouse_x = x;\n    this.prop.mouse_y = y;\n  };\n\n  return PSVPanel;\n\n});\n\ndefine('skylark-sphere/components/PSVTooltip',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Tooltip class\n   * @param {module:components.PSVHUD} hud\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVTooltip(hud) {\n    PSVComponent.call(this, hud);\n\n    /**\n     * @member {Object}\n     * @readonly\n     * @private\n     */\n    this.config = this.psv.config.tooltip;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      timeout: null\n    };\n\n    this.create();\n  }\n\n  PSVTooltip.prototype = Object.create(PSVComponent.prototype);\n  PSVTooltip.prototype.constructor = PSVTooltip;\n\n  PSVTooltip.className = 'psv-tooltip';\n  PSVTooltip.publicMethods = ['showTooltip', 'hideTooltip', 'isTooltipVisible'];\n\n  PSVTooltip.leftMap = { 0: 'left', 0.5: 'center', 1: 'right' };\n  PSVTooltip.topMap = { 0: 'top', 0.5: 'center', 1: 'bottom' };\n\n  /**\n   * @override\n   */\n  PSVTooltip.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.container.innerHTML = '<div class=\"psv-tooltip-arrow\"></div><div class=\"psv-tooltip-content\"></div>';\n    this.container.style.top = '-1000px';\n    this.container.style.left = '-1000px';\n\n    this.content = this.container.querySelector('.psv-tooltip-content');\n    this.arrow = this.container.querySelector('.psv-tooltip-arrow');\n\n    this.psv.on('render', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVTooltip.prototype.destroy = function() {\n    this.psv.off('render', this);\n\n    delete this.config;\n    delete this.prop;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVTooltip.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'render': this.hideTooltip(); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Checks if the tooltip is visible\n   * @returns {boolean}\n   */\n  PSVTooltip.prototype.isTooltipVisible = function() {\n    return this.container.classList.contains('psv-tooltip--visible');\n  };\n\n  /**\n   * @summary Displays a tooltip on the viewer\n   * @param {Object} config\n   * @param {string} config.content - HTML content of the tootlip\n   * @param {int} config.top - Position of the tip of the arrow of the tooltip, in pixels\n   * @param {int} config.left - Position of the tip of the arrow of the tooltip, in pixels\n   * @param {string} [config.position='top center'] - Tooltip position toward it's arrow tip.\n   *                                                  Accepted values are combinations of `top`, `center`, `bottom`\n   *                                                  and `left`, `center`, `right`\n   * @param {string} [config.className] - Additional CSS class added to the tooltip\n   * @param {Object} [config.box] - Used when displaying a tooltip on a marker\n   * @param {int} [config.box.width=0]\n   * @param {int} [config.box.height=0]\n   * @fires module:components.PSVTooltip.show-tooltip\n   * @throws {PSVError} when the configuration is incorrect\n   *\n   * @example\n   * viewer.showTooltip({ content: 'Hello world', top: 200, left: 450, position: 'center bottom'})\n   */\n  PSVTooltip.prototype.showTooltip = function(config) {\n    if (this.prop.timeout) {\n      window.clearTimeout(this.prop.timeout);\n      this.prop.timeout = null;\n    }\n\n    var isUpdate = this.isTooltipVisible();\n    var t = this.container;\n    var c = this.content;\n    var a = this.arrow;\n\n    if (!config.position) {\n      config.position = ['top', 'center'];\n    }\n\n    if (!config.box) {\n      config.box = {\n        width: 0,\n        height: 0\n      };\n    }\n\n    // parse position\n    if (typeof config.position === 'string') {\n      var tempPos = PSVUtils.parsePosition(config.position);\n\n      if (!(tempPos.left in PSVTooltip.leftMap) || !(tempPos.top in PSVTooltip.topMap)) {\n        throw new PSVError('unable to parse tooltip position \"' + config.position + '\"');\n      }\n\n      config.position = [PSVTooltip.topMap[tempPos.top], PSVTooltip.leftMap[tempPos.left]];\n    }\n\n    if (config.position[0] === 'center' && config.position[1] === 'center') {\n      throw new PSVError('unable to parse tooltip position \"center center\"');\n    }\n\n    if (isUpdate) {\n      // Remove every other classes (Firefox does not implements forEach)\n      for (var i = t.classList.length - 1; i >= 0; i--) {\n        var item = t.classList.item(i);\n        if (item !== 'psv-tooltip' && item !== 'psv-tooltip--visible') {\n          t.classList.remove(item);\n        }\n      }\n    }\n    else {\n      t.className = 'psv-tooltip'; // reset the class\n    }\n\n    if (config.className) {\n      PSVUtils.addClasses(t, config.className);\n    }\n\n    c.innerHTML = config.content;\n    t.style.top = '0px';\n    t.style.left = '0px';\n\n    // compute size\n    var rect = t.getBoundingClientRect();\n    var style = {\n      posClass: config.position.slice(),\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top,\n      top: 0,\n      left: 0,\n      arrow_top: 0,\n      arrow_left: 0\n    };\n\n    // set initial position\n    this._computeTooltipPosition(style, config);\n\n    // correct position if overflow\n    var refresh = false;\n    if (style.top < this.config.offset) {\n      style.posClass[0] = 'bottom';\n      refresh = true;\n    }\n    else if (style.top + style.height > this.psv.prop.size.height - this.config.offset) {\n      style.posClass[0] = 'top';\n      refresh = true;\n    }\n    if (style.left < this.config.offset) {\n      style.posClass[1] = 'right';\n      refresh = true;\n    }\n    else if (style.left + style.width > this.psv.prop.size.width - this.config.offset) {\n      style.posClass[1] = 'left';\n      refresh = true;\n    }\n    if (refresh) {\n      this._computeTooltipPosition(style, config);\n    }\n\n    // apply position\n    t.style.top = style.top + 'px';\n    t.style.left = style.left + 'px';\n\n    a.style.top = style.arrow_top + 'px';\n    a.style.left = style.arrow_left + 'px';\n\n    t.classList.add('psv-tooltip--' + style.posClass.join('-'));\n\n    // delay for correct transition between the two classes\n    if (!isUpdate) {\n      this.prop.timeout = window.setTimeout(function() {\n        t.classList.add('psv-tooltip--visible');\n        this.prop.timeout = null;\n\n        /**\n         * @event show-tooltip\n         * @memberof module:components.PSVTooltip\n         * @summary Trigered when the tooltip is shown\n         */\n        this.psv.trigger('show-tooltip');\n      }.bind(this), this.config.delay);\n    }\n  };\n\n  /**\n   * @summary Hides the tooltip\n   * @fires module:components.PSVTooltip.hide-tooltip\n   */\n  PSVTooltip.prototype.hideTooltip = function() {\n    if (this.prop.timeout) {\n      window.clearTimeout(this.prop.timeout);\n      this.prop.timeout = null;\n    }\n\n    if (this.isTooltipVisible()) {\n      this.container.classList.remove('psv-tooltip--visible');\n\n      this.prop.timeout = window.setTimeout(function() {\n        this.content.innerHTML = null;\n        this.container.style.top = '-1000px';\n        this.container.style.left = '-1000px';\n        this.prop.timeout = null;\n      }.bind(this), this.config.delay);\n\n      /**\n       * @event hide-tooltip\n       * @memberof module:components.PSVTooltip\n       * @summary Trigered when the tooltip is hidden\n       */\n      this.psv.trigger('hide-tooltip');\n    }\n  };\n\n  /**\n   * @summary Computes the position of the tooltip and its arrow\n   * @param {Object} style\n   * @param {Object} config\n   * @private\n   */\n  PSVTooltip.prototype._computeTooltipPosition = function(style, config) {\n    var topBottom = false;\n\n    switch (style.posClass[0]) {\n      case 'bottom':\n        style.top = config.top + config.box.height + this.config.offset + this.config.arrow_size;\n        style.arrow_top = -this.config.arrow_size * 2;\n        topBottom = true;\n        break;\n\n      case 'center':\n        style.top = config.top + config.box.height / 2 - style.height / 2;\n        style.arrow_top = style.height / 2 - this.config.arrow_size;\n        break;\n\n      case 'top':\n        style.top = config.top - style.height - this.config.offset - this.config.arrow_size;\n        style.arrow_top = style.height;\n        topBottom = true;\n        break;\n    }\n\n    switch (style.posClass[1]) {\n      case 'right':\n        if (topBottom) {\n          style.left = config.left + config.box.width / 2 - this.config.offset - this.config.arrow_size;\n          style.arrow_left = this.config.offset;\n        }\n        else {\n          style.left = config.left + config.box.width + this.config.offset + this.config.arrow_size;\n          style.arrow_left = -this.config.arrow_size * 2;\n        }\n        break;\n\n      case 'center':\n        style.left = config.left + config.box.width / 2 - style.width / 2;\n        style.arrow_left = style.width / 2 - this.config.arrow_size;\n        break;\n\n      case 'left':\n        if (topBottom) {\n          style.left = config.left - style.width + config.box.width / 2 + this.config.offset + this.config.arrow_size;\n          style.arrow_left = style.width - this.config.offset - this.config.arrow_size * 2;\n        }\n        else {\n          style.left = config.left - style.width - this.config.offset - this.config.arrow_size;\n          style.arrow_left = style.width;\n        }\n        break;\n    }\n  };\n\n  return PSVTooltip;\n});\n  \ndefine('skylark-sphere/_psv/core',[\n  \"skylark-threejs\",\n  \"./ctoc\",\n  \"../doT\",\n  \"../PSVError\",\n  \"../PSVUtils\",\n  \"../PSVAnimation\",\n  \"../components/PSVHUD\",\n  \"../components/PSVLoader\",\n  \"../components/PSVNavBar\",\n  \"../components/PSVNotification\",\n  \"../components/PSVOverlay\",\n  \"../components/PSVPanel\",\n  \"../components/PSVTooltip\"\n],function(\n  THREE,\n  PhotoSphereViewer,\n  doT,\n  PSVError,\n  PSVUtils,\n  PSVAnimation,\n  PSVHUD,\n  PSVLoader,\n  PSVNavBar,\n  PSVNotification,\n  PSVOverlay,\n  PSVPanel,\n  PSVTooltip\n){\n  \"use strict\";\n\n  PhotoSphereViewer.prototype._construct = function (options) {\n\n    // init global system variables\n    if (!PhotoSphereViewer.SYSTEM.loaded) {\n      PhotoSphereViewer._loadSystem();\n    }\n\n    /**\n     * @summary Configuration object\n     * @member {Object}\n     * @readonly\n     */\n    this.config = PSVUtils.clone(PhotoSphereViewer.DEFAULTS);\n    PSVUtils.deepmerge(this.config, options);\n\n    // check container\n    if (!options.container) {\n      throw new PSVError('No value given for container.');\n    }\n\n    // must support canvas\n    if (!PhotoSphereViewer.SYSTEM.isCanvasSupported) {\n      throw new PSVError('Canvas is not supported.');\n    }\n\n    // must support webgl\n    if (!PhotoSphereViewer.SYSTEM.isWebGLSupported) {\n      throw new PSVError('WebGL is not supported.');\n    }\n\n    // longitude range must have two values\n    if (this.config.longitude_range && this.config.longitude_range.length !== 2) {\n      this.config.longitude_range = null;\n      console.warn('PhotoSphereViewer: longitude_range must have exactly two elements.');\n    }\n\n    if (this.config.latitude_range) {\n      // latitude range must have two values\n      if (this.config.latitude_range.length !== 2) {\n        this.config.latitude_range = null;\n        console.warn('PhotoSphereViewer: latitude_range must have exactly two elements.');\n      }\n      // latitude range must be ordered\n      else if (this.config.latitude_range[0] > this.config.latitude_range[1]) {\n        this.config.latitude_range = [this.config.latitude_range[1], this.config.latitude_range[0]];\n        console.warn('PhotoSphereViewer: latitude_range values must be ordered.');\n      }\n    }\n    // migrate legacy tilt_up_max and tilt_down_max\n    else if (this.config.tilt_up_max !== undefined || this.config.tilt_down_max !== undefined) {\n      this.config.latitude_range = [\n        this.config.tilt_down_max !== undefined ? this.config.tilt_down_max - Math.PI / 4 : -PSVUtils.HalfPI,\n        this.config.tilt_up_max !== undefined ? this.config.tilt_up_max + Math.PI / 4 : PSVUtils.HalfPI\n      ];\n      console.warn('PhotoSphereViewer: tilt_up_max and tilt_down_max are deprecated, use latitude_range instead.');\n    }\n\n    // min_fov and max_fov must be ordered\n    if (this.config.max_fov < this.config.min_fov) {\n      var temp_fov = this.config.max_fov;\n      this.config.max_fov = this.config.min_fov;\n      this.config.min_fov = temp_fov;\n      console.warn('PhotoSphereViewer: max_fov cannot be lower than min_fov.');\n    }\n\n    // cache_texture must be a positive integer or false\n    if (this.config.cache_texture && (!PSVUtils.isInteger(this.config.cache_texture) || this.config.cache_texture < 0)) {\n      this.config.cache_texture = PhotoSphereViewer.DEFAULTS.cache_texture;\n      console.warn('PhotoSphereViewer: invalid value for cache_texture');\n    }\n\n    // panorama_roll is deprecated\n    if ('panorama_roll' in this.config) {\n      this.config.sphere_correction.roll = this.config.panorama_roll;\n      console.warn('PhotoSphereViewer: panorama_roll is deprecated, use sphere_correction.roll instead');\n    }\n\n    // gyroscope is deprecated\n    if ('gyroscope' in this.config) {\n      console.warn('PhotoSphereViewer: gyroscope is deprecated, the control is automatically created if DeviceOrientationControls.js is loaded');\n    }\n\n    // keyboard=true becomes the default map\n    if (this.config.keyboard === true) {\n      this.config.keyboard = PSVUtils.clone(PhotoSphereViewer.DEFAULTS.keyboard);\n    }\n\n    // min_fov/max_fov between 1 and 179\n    this.config.min_fov = PSVUtils.bound(this.config.min_fov, 1, 179);\n    this.config.max_fov = PSVUtils.bound(this.config.max_fov, 1, 179);\n\n    // default default_fov is middle point between min_fov and max_fov\n    if (this.config.default_fov === null) {\n      this.config.default_fov = this.config.max_fov / 2 + this.config.min_fov / 2;\n    }\n    // default_fov between min_fov and max_fov\n    else {\n      this.config.default_fov = PSVUtils.bound(this.config.default_fov, this.config.min_fov, this.config.max_fov);\n    }\n\n    // default anim_lat is default_lat\n    if (this.config.anim_lat === null) {\n      this.config.anim_lat = this.config.default_lat;\n    }\n    // parse anim_lat, is between -PI/2 and PI/2\n    else {\n      this.config.anim_lat = PSVUtils.parseAngle(this.config.anim_lat, true);\n    }\n\n    // parse longitude_range, between 0 and 2*PI\n    if (this.config.longitude_range) {\n      this.config.longitude_range = this.config.longitude_range.map(function(angle) {\n        return PSVUtils.parseAngle(angle);\n      });\n    }\n\n    // parse latitude_range, between -PI/2 and PI/2\n    if (this.config.latitude_range) {\n      this.config.latitude_range = this.config.latitude_range.map(function(angle) {\n        return PSVUtils.parseAngle(angle, true);\n      });\n    }\n\n    // parse anim_speed\n    this.config.anim_speed = PSVUtils.parseSpeed(this.config.anim_speed);\n\n    // reactivate the navbar if the caption is provided\n    if (this.config.caption && !this.config.navbar) {\n      this.config.navbar = ['caption'];\n    }\n\n    // translate boolean fisheye to amount\n    if (this.config.fisheye === true) {\n      this.config.fisheye = 1;\n    }\n    else if (this.config.fisheye === false) {\n      this.config.fisheye = 0;\n    }\n\n    /**\n     * @summary Top most parent\n     * @member {HTMLElement}\n     * @readonly\n     */\n    this.parent = (typeof options.container === 'string') ? document.getElementById(options.container) : options.container;\n\n    /**\n     * @summary Main container\n     * @member {HTMLElement}\n     * @readonly\n     */\n    this.container = null;\n\n    /**\n     * @member {module:components.PSVLoader}\n     * @readonly\n     */\n    this.loader = null;\n\n    /**\n     * @member {module:components.PSVNavBar}\n     * @readonly\n     */\n    this.navbar = null;\n\n    /**\n     * @member {module:components.PSVHUD}\n     * @readonly\n     */\n    this.hud = null;\n\n    /**\n     * @member {module:components.PSVPanel}\n     * @readonly\n     */\n    this.panel = null;\n\n    /**\n     * @member {module:components.PSVTooltip}\n     * @readonly\n     */\n    this.tooltip = null;\n\n    /**\n     * @member {module:components.PSVNotification}\n     * @readonly\n     */\n    this.notification = null;\n\n    /**\n     * @member {module:components.PSVOverlay}\n     * @readonly\n     */\n    this.overlay = null;\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.canvas_container = null;\n\n    /**\n     * @member {THREE.WebGLRenderer | THREE.CanvasRenderer}\n     * @readonly\n     * @private\n     */\n    this.renderer = null;\n\n    /**\n     * @member {THREE.StereoEffect}\n     * @private\n     */\n    this.stereoEffect = null;\n\n    /**\n     * @member {NoSleep}\n     * @private\n     */\n    this.noSleep = null;\n\n    /**\n     * @member {THREE.Scene}\n     * @readonly\n     * @private\n     */\n    this.scene = null;\n\n    /**\n     * @member {THREE.PerspectiveCamera}\n     * @readonly\n     * @private\n     */\n    this.camera = null;\n\n    /**\n     * @member {THREE.Mesh}\n     * @readonly\n     * @private\n     */\n    this.mesh = null;\n\n    /**\n     * @member {THREE.Raycaster}\n     * @readonly\n     * @private\n     */\n    this.raycaster = null;\n\n    /**\n     * @member {THREE.DeviceOrientationControls}\n     * @readonly\n     * @private\n     */\n    this.doControls = null;\n\n    /**\n     * @summary Internal properties\n     * @member {Object}\n     * @readonly\n     * @property {boolean} needsUpdate - if the view needs to be renderer\n     * @property {boolean} isCubemap - if the panorama is a cubemap\n     * @property {PhotoSphereViewer.Position} position - current direction of the camera\n     * @property {THREE.Vector3} direction - direction of the camera\n     * @property {float} anim_speed - parsed animation speed (rad/sec)\n     * @property {int} zoom_lvl - current zoom level\n     * @property {float} vFov - vertical FOV\n     * @property {float} hFov - horizontal FOV\n     * @property {float} aspect - viewer aspect ratio\n     * @property {float} move_speed - move speed (computed with pixel ratio and configuration move_speed)\n     * @property {boolean} moving - is the user moving\n     * @property {boolean} zooming - is the user zooming\n     * @property {int} start_mouse_x - start x position of the click/touch\n     * @property {int} start_mouse_y - start y position of the click/touch\n     * @property {int} mouse_x - current x position of the cursor\n     * @property {int} mouse_y - current y position of the cursor\n     * @property {Array[]} mouse_history - list of latest positions of the cursor, [time, x, y]\n     * @property {int} gyro_alpha_offset - current alpha offset for gyroscope controls\n     * @property {int} pinch_dist - distance between fingers when zooming\n     * @property main_reqid - animationRequest id of the main event loop\n     * @property {function} orientation_cb - update callback of the device orientation\n     * @property {function} autorotate_cb - update callback of the automatic rotation\n     * @property {Promise} animation_promise - promise of the current animation (either go to position or image transition)\n     * @property {Promise} loading_promise - promise of the setPanorama method\n     * @property start_timeout - timeout id of the automatic rotation delay\n     * @property {PhotoSphereViewer.ClickData} dblclick_data - temporary storage of click data between two clicks\n     * @property dblclick_timeout - timeout id for double click\n     * @property {PhotoSphereViewer.CacheItem[]} cache - cached panoramas\n     * @property {PhotoSphereViewer.Size} size - size of the container\n     * @property {PhotoSphereViewer.PanoData} pano_data - panorama metadata\n     */\n    this.prop = {\n      needsUpdate: true,\n      isCubemap: undefined,\n      position: {\n        longitude: 0,\n        latitude: 0\n      },\n      ready: false,\n      direction: null,\n      anim_speed: 0,\n      zoom_lvl: 0,\n      vFov: 0,\n      hFov: 0,\n      aspect: 0,\n      move_speed: 0.1,\n      moving: false,\n      zooming: false,\n      start_mouse_x: 0,\n      start_mouse_y: 0,\n      mouse_x: 0,\n      mouse_y: 0,\n      mouse_history: [],\n      gyro_alpha_offset: 0,\n      pinch_dist: 0,\n      main_reqid: null,\n      orientation_cb: null,\n      autorotate_cb: null,\n      animation_promise: null,\n      loading_promise: null,\n      start_timeout: null,\n      dblclick_data: null,\n      dblclick_timeout: null,\n      cache: [],\n      size: {\n        width: 0,\n        height: 0\n      },\n      pano_data: {\n        full_width: 0,\n        full_height: 0,\n        cropped_width: 0,\n        cropped_height: 0,\n        cropped_x: 0,\n        cropped_y: 0\n      }\n    };\n\n    // init templates\n    Object.keys(PhotoSphereViewer.TEMPLATES).forEach(function(tpl) {\n      if (!this.config.templates[tpl]) {\n        this.config.templates[tpl] = PhotoSphereViewer.TEMPLATES[tpl];\n      }\n      if (typeof this.config.templates[tpl] === 'string') {\n        this.config.templates[tpl] = doT.template(this.config.templates[tpl]);\n      }\n    }, this);\n\n    // init\n    this.parent.photoSphereViewer = this;\n\n      // create actual container\n      this.container = document.createElement('div');\n      this.container.classList.add('psv-container');\n      this.parent.appendChild(this.container);\n\n      // apply container size\n      if (this.config.size !== null) {\n        this._setViewerSize(this.config.size);\n      }\n      this._onResize();\n\n      // apply default zoom level\n      var tempZoom = (this.config.default_fov - this.config.min_fov) / (this.config.max_fov - this.config.min_fov) * 100;\n      this.config.default_zoom_lvl = tempZoom - 2 * (tempZoom - 50);\n\n      // actual move speed depends on pixel-ratio\n      this.prop.move_speed = THREE.Math.degToRad(this.config.move_speed / PhotoSphereViewer.SYSTEM.pixelRatio);\n\n      // load loader (!!)\n      this.loader = new PSVLoader(this);\n      this.loader.hide();\n\n      // load navbar\n      this.navbar = new PSVNavBar(this);\n      this.navbar.hide();\n\n      // load hud\n      this.hud = new PSVHUD(this);\n      this.hud.hide();\n\n      // load side panel\n      this.panel = new PSVPanel(this);\n\n      // load hud tooltip\n      this.tooltip = new PSVTooltip(this.hud);\n\n      // load notification\n      this.notification = new PSVNotification(this);\n\n      // load overlay\n      this.overlay = new PSVOverlay(this);\n\n      // attach event handlers\n      this._bindEvents();\n\n      // load panorama\n      if (this.config.panorama) {\n        this.setPanorama(this.config.panorama);\n      }\n\n      // enable GUI after first render\n      this.one('render', function() {\n        if (this.config.navbar) {\n          this.container.classList.add('psv-container--has-navbar');\n          this.navbar.show();\n        }\n\n        this.hud.show();\n\n        if (this.config.markers) {\n          this.config.markers.forEach(function(marker) {\n            this.hud.addMarker(marker, false);\n          }, this);\n\n          this.hud.renderMarkers();\n        }\n\n        // Queue animation\n        if (this.config.time_anim !== false) {\n          this.prop.start_timeout = window.setTimeout(this.startAutorotate.bind(this), this.config.time_anim);\n        }\n\n        setTimeout(function() {\n          // start render loop\n          this._run();\n\n          /**\n           * @event ready\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the panorama image has been loaded and the viewer is ready to perform the first render\n           */\n          this.trigger('ready');\n        }.bind(this), 0);\n      }.bind(this));\n\n      PhotoSphereViewer.SYSTEM.touchEnabled.then(function(enabled) {\n        if (enabled) {\n          this.container.classList.add('psv-is-touch');\n        }\n      }.bind(this));\n  };\n\n\n\n  /**\n   * @summary Main event loop, calls {@link PhotoSphereViewer._render} if `prop.needsUpdate` is true\n   * @param {int} timestamp\n   * @fires PhotoSphereViewer.filter:before-render\n   * @private\n   */\n  PhotoSphereViewer.prototype._run = function(timestamp) {\n    /**\n     * @event before-render\n     * @memberof PhotoSphereViewer\n     * @summary Triggered before a render, used to modify the view\n     * @param {int} timestamp - time provided by requestAnimationFrame\n     */\n    this.trigger('before-render', timestamp || +new Date());\n\n    if (this.prop.needsUpdate) {\n      this._render();\n      this.prop.needsUpdate = false;\n    }\n\n    this.prop.main_reqid = window.requestAnimationFrame(this._run.bind(this));\n  };\n\n  /**\n   * @summary Performs a render\n   * @fires PhotoSphereViewer.render\n   * @private\n   */\n  PhotoSphereViewer.prototype._render = function() {\n    this.prop.direction = this.sphericalCoordsToVector3(this.prop.position);\n    this.camera.position.set(0, 0, 0);\n    this.camera.lookAt(this.prop.direction);\n\n    if (this.config.fisheye) {\n      this.camera.position.copy(this.prop.direction).multiplyScalar(this.config.fisheye / 2).negate();\n    }\n\n    this.camera.aspect = this.prop.aspect;\n    this.camera.fov = this.prop.vFov;\n    this.camera.updateProjectionMatrix();\n\n    (this.stereoEffect || this.renderer).render(this.scene, this.camera);\n\n    /**\n     * @event render\n     * @memberof PhotoSphereViewer\n     * @summary Triggered on each viewer render, **this event is triggered very often**\n     */\n    this.trigger('render');\n  };\n\n  /**\n   * @summary Loads the XMP data with AJAX\n   * @param {string} panorama\n   * @returns {Promise.<PhotoSphereViewer.PanoData>}\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadXMP = function(panorama) {\n    if (!this.config.usexmpdata) {\n      return Promise.resolve(null);\n    }\n\n    return new Promise(function(resolve) {\n      var progress = 0;\n\n      var xhr = new XMLHttpRequest();\n      if (this.config.with_credentials) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200 || xhr.status === 201 || xhr.status === 202 || xhr.status === 0) {\n            this.loader.setProgress(100);\n\n            var binary = xhr.responseText;\n            var a = binary.indexOf('<x:xmpmeta'), b = binary.indexOf('</x:xmpmeta>');\n            var data = binary.substring(a, b);\n            var pano_data = null;\n\n            if (a !== -1 && b !== -1 && data.indexOf('GPano:') !== -1) {\n              pano_data = {\n                full_width: parseInt(PSVUtils.getXMPValue(data, 'FullPanoWidthPixels')),\n                full_height: parseInt(PSVUtils.getXMPValue(data, 'FullPanoHeightPixels')),\n                cropped_width: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaImageWidthPixels')),\n                cropped_height: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaImageHeightPixels')),\n                cropped_x: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaLeftPixels')),\n                cropped_y: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaTopPixels'))\n              };\n\n              if (!pano_data.full_width || !pano_data.full_height || !pano_data.cropped_width || !pano_data.cropped_height) {\n                console.warn('PhotoSphereViewer: invalid XMP data');\n                pano_data = null;\n              }\n            }\n\n            resolve(pano_data);\n          }\n          else {\n            this.container.textContent = 'Cannot load image';\n            throw new PSVError('Cannot load image');\n          }\n        }\n        else if (xhr.readyState === 3) {\n          this.loader.setProgress(progress += 10);\n        }\n      }.bind(this);\n\n      xhr.onprogress = function(e) {\n        if (e.lengthComputable) {\n          var new_progress = parseInt(e.loaded / e.total * 100);\n          if (new_progress > progress) {\n            progress = new_progress;\n            this.loader.setProgress(progress);\n          }\n        }\n      }.bind(this);\n\n      xhr.onerror = function(e) {\n        this.container.textContent = 'Cannot load image';\n        reject(e);\n        throw new PSVError('Cannot load image');\n      }.bind(this);\n\n      xhr.open('GET', panorama, true);\n      xhr.send(null);\n    }.bind(this));\n  };\n\n  /**\n   * @summary Loads the panorama texture(s)\n   * @param {string|string[]} panorama\n   * @returns {Promise.<THREE.Texture|THREE.Texture[]>}\n   * @fires PhotoSphereViewer.panorama-load-progress\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadTexture = function(panorama) {\n    var tempPanorama = [];\n\n    if (Array.isArray(panorama)) {\n      if (panorama.length !== 6) {\n        throw new PSVError('Must provide exactly 6 image paths when using cubemap.');\n      }\n\n      // reorder images\n      for (var i = 0; i < 6; i++) {\n        tempPanorama[i] = panorama[PhotoSphereViewer.CUBE_MAP[i]];\n      }\n      panorama = tempPanorama;\n    }\n    else if (typeof panorama === 'object') {\n      if (!PhotoSphereViewer.CUBE_HASHMAP.every(function(side) {\n          return !!panorama[side];\n        })) {\n        throw new PSVError('Must provide exactly left, front, right, back, top, bottom when using cubemap.');\n      }\n\n      // transform into array\n      PhotoSphereViewer.CUBE_HASHMAP.forEach(function(side, i) {\n        tempPanorama[i] = panorama[side];\n      });\n      panorama = tempPanorama;\n    }\n\n    if (Array.isArray(panorama)) {\n      if (this.prop.isCubemap === false) {\n        throw new PSVError('The viewer was initialized with an equirectangular panorama, cannot switch to cubemap.');\n      }\n\n      if (this.config.fisheye) {\n        console.warn('PhotoSphereViewer: fisheye effect with cubemap texture can generate distorsions.');\n      }\n\n      if (this.config.cache_texture === PhotoSphereViewer.DEFAULTS.cache_texture) {\n        this.config.cache_texture *= 6;\n      }\n\n      this.prop.isCubemap = true;\n\n      return this._loadCubemapTexture(panorama);\n    }\n    else {\n      if (this.prop.isCubemap === true) {\n        throw new PSVError('The viewer was initialized with an cubemap, cannot switch to equirectangular panorama.');\n      }\n\n      this.prop.isCubemap = false;\n\n      return this._loadEquirectangularTexture(panorama);\n    }\n  };\n\n  /**\n   * @summary Loads the sphere texture\n   * @param {string} panorama\n   * @returns {Promise.<THREE.Texture>}\n   * @fires PhotoSphereViewer.panorama-load-progress\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadEquirectangularTexture = function(panorama) {\n    if (this.config.cache_texture) {\n      var cache = this.getPanoramaCache(panorama);\n\n      if (cache) {\n        this.prop.pano_data = cache.pano_data;\n\n        return Promise.resolve(cache.image);\n      }\n    }\n\n    return this._loadXMP(panorama).then(function(pano_data) {\n      return new Promise(function(resolve, reject) {\n        var loader = new THREE.ImageLoader();\n        var progress = pano_data ? 100 : 0;\n\n        if (this.config.with_credentials) {\n          loader.setCrossOrigin('use-credentials');\n        }\n        else {\n          loader.setCrossOrigin('anonymous');\n        }\n\n        var onload = function(img) {\n          progress = 100;\n\n          this.loader.setProgress(progress);\n\n          /**\n           * @event panorama-load-progress\n           * @memberof PhotoSphereViewer\n           * @summary Triggered while a panorama image is loading\n           * @param {string} panorama\n           * @param {int} progress\n           */\n          this.trigger('panorama-load-progress', panorama, progress);\n\n          // Config XMP data\n          if (!pano_data && this.config.pano_data) {\n            pano_data = PSVUtils.clone(this.config.pano_data);\n          }\n\n          // Default XMP data\n          if (!pano_data) {\n            pano_data = {\n              full_width: img.width,\n              full_height: img.height,\n              cropped_width: img.width,\n              cropped_height: img.height,\n              cropped_x: 0,\n              cropped_y: 0\n            };\n          }\n\n          this.prop.pano_data = pano_data;\n\n          var texture;\n\n          var ratio = Math.min(pano_data.full_width, PhotoSphereViewer.SYSTEM.maxTextureWidth) / pano_data.full_width;\n\n          // resize image / fill cropped parts with black\n          if (ratio !== 1 || pano_data.cropped_width !== pano_data.full_width || pano_data.cropped_height !== pano_data.full_height) {\n            var resized_pano_data = PSVUtils.clone(pano_data);\n\n            resized_pano_data.full_width *= ratio;\n            resized_pano_data.full_height *= ratio;\n            resized_pano_data.cropped_width *= ratio;\n            resized_pano_data.cropped_height *= ratio;\n            resized_pano_data.cropped_x *= ratio;\n            resized_pano_data.cropped_y *= ratio;\n\n            img.width = resized_pano_data.cropped_width;\n            img.height = resized_pano_data.cropped_height;\n\n            var buffer = document.createElement('canvas');\n            buffer.width = resized_pano_data.full_width;\n            buffer.height = resized_pano_data.full_height;\n\n            var ctx = buffer.getContext('2d');\n            ctx.drawImage(img, resized_pano_data.cropped_x, resized_pano_data.cropped_y, resized_pano_data.cropped_width, resized_pano_data.cropped_height);\n\n            texture = new THREE.Texture(buffer);\n          }\n          else {\n            texture = new THREE.Texture(img);\n          }\n\n          texture.needsUpdate = true;\n          texture.minFilter = THREE.LinearFilter;\n          texture.generateMipmaps = false;\n\n          if (this.config.cache_texture) {\n            this._putPanoramaCache({\n              panorama: panorama,\n              image: texture,\n              pano_data: pano_data\n            });\n          }\n\n          resolve(texture);\n        };\n\n        var onprogress = function(e) {\n          if (e.lengthComputable) {\n            var new_progress = parseInt(e.loaded / e.total * 100);\n\n            if (new_progress > progress) {\n              progress = new_progress;\n              this.loader.setProgress(progress);\n              this.trigger('panorama-load-progress', panorama, progress);\n            }\n          }\n        };\n\n        var onerror = function(e) {\n          this.container.textContent = 'Cannot load image';\n          reject(e);\n          throw new PSVError('Cannot load image');\n        };\n\n        loader.load(panorama, onload.bind(this), onprogress.bind(this), onerror.bind(this));\n      }.bind(this));\n    }.bind(this));\n  };\n\n  /**\n   * @summary Load the six textures of the cube\n   * @param {string[]} panorama\n   * @returns {Promise.<THREE.Texture[]>}\n   * @fires PhotoSphereViewer.panorama-load-progress\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadCubemapTexture = function(panorama) {\n    return new Promise(function(resolve, reject) {\n      var loader = new THREE.ImageLoader();\n      var progress = [0, 0, 0, 0, 0, 0];\n      var loaded = [];\n      var done = 0;\n\n      if (this.config.with_credentials) {\n        loader.setCrossOrigin('use-credentials');\n      }\n      else {\n        loader.setCrossOrigin('anonymous');\n      }\n\n      var onend = function() {\n        loaded.forEach(function(img) {\n          img.needsUpdate = true;\n          img.minFilter = THREE.LinearFilter;\n          img.generateMipmaps = false;\n        });\n\n        resolve(loaded);\n      };\n\n      var onload = function(i, img) {\n        done++;\n        progress[i] = 100;\n\n        this.loader.setProgress(PSVUtils.sum(progress) / 6);\n        this.trigger('panorama-load-progress', panorama[i], progress[i]);\n\n        var ratio = Math.min(img.width, PhotoSphereViewer.SYSTEM.maxTextureWidth / 2) / img.width;\n\n        // resize image\n        if (ratio !== 1) {\n          var buffer = document.createElement('canvas');\n          buffer.width = img.width * ratio;\n          buffer.height = img.height * ratio;\n\n          var ctx = buffer.getContext('2d');\n          ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n          loaded[i] = new THREE.Texture(buffer);\n        }\n        else {\n          loaded[i] = new THREE.Texture(img);\n        }\n\n        if (this.config.cache_texture) {\n          this._putPanoramaCache({\n            panorama: panorama[i],\n            image: loaded[i]\n          });\n        }\n\n        if (done === 6) {\n          onend();\n        }\n      };\n\n      var onprogress = function(i, e) {\n        if (e.lengthComputable) {\n          var new_progress = parseInt(e.loaded / e.total * 100);\n\n          if (new_progress > progress[i]) {\n            progress[i] = new_progress;\n            this.loader.setProgress(PSVUtils.sum(progress) / 6);\n            this.trigger('panorama-load-progress', panorama[i], progress[i]);\n          }\n        }\n      };\n\n      var onerror = function(i, e) {\n        this.container.textContent = 'Cannot load image';\n        reject(e);\n        throw new PSVError('Cannot load image ' + i);\n      };\n\n      for (var i = 0; i < 6; i++) {\n        if (this.config.cache_texture) {\n          var cache = this.getPanoramaCache(panorama[i]);\n\n          if (cache) {\n            done++;\n            progress[i] = 100;\n            loaded[i] = cache.image;\n            continue;\n          }\n        }\n\n        loader.load(panorama[i], onload.bind(this, i), onprogress.bind(this, i), onerror.bind(this, i));\n      }\n\n      if (done === 6) {\n        resolve(loaded);\n      }\n    }.bind(this));\n  };\n\n  /**\n   * @summary Applies the texture to the scene, creates the scene if needed\n   * @param {THREE.Texture|THREE.Texture[]} texture\n   * @fires PhotoSphereViewer.panorama-loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._setTexture = function(texture) {\n    if (!this.scene) {\n      this._createScene();\n    }\n\n    if (this.prop.isCubemap) {\n      for (var i = 0; i < 6; i++) {\n        if (this.mesh.material[i].map) {\n          this.mesh.material[i].map.dispose();\n        }\n\n        this.mesh.material[i].map = texture[i];\n      }\n    }\n    else {\n      if (this.mesh.material.map) {\n        this.mesh.material.map.dispose();\n      }\n\n      this.mesh.material.map = texture;\n    }\n\n    /**\n     * @event panorama-loaded\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when a panorama image has been loaded\n     */\n    this.trigger('panorama-loaded');\n\n    this._render();\n  };\n\n  /**\n   * @summary Creates the 3D scene and GUI components\n   * @private\n   */\n  PhotoSphereViewer.prototype._createScene = function() {\n    this.raycaster = new THREE.Raycaster();\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(this.prop.size.width, this.prop.size.height);\n    this.renderer.setPixelRatio(PhotoSphereViewer.SYSTEM.pixelRatio);\n\n    this.camera = new THREE.PerspectiveCamera(this.config.default_fov, this.prop.size.width / this.prop.size.height, 1,  3 * PhotoSphereViewer.SPHERE_RADIUS);\n    this.camera.position.set(0, 0, 0);\n\n    this.scene = new THREE.Scene();\n    this.scene.add(this.camera);\n\n    if (this.prop.isCubemap) {\n      this.mesh = this._createCubemap();\n    }\n    else {\n      this.mesh = this._createSphere();\n    }\n\n    this.scene.add(this.mesh);\n\n    // create canvas container\n    this.canvas_container = document.createElement('div');\n    this.canvas_container.className = 'psv-canvas-container';\n    this.renderer.domElement.className = 'psv-canvas';\n    this.container.appendChild(this.canvas_container);\n    this.canvas_container.appendChild(this.renderer.domElement);\n  };\n\n  /**\n   * @summary Creates the sphere mesh\n   * @param {number} [scale=1]\n   * @returns {THREE.Mesh}\n   * @private\n   */\n  PhotoSphereViewer.prototype._createSphere = function(scale) {\n    scale = scale || 1;\n\n    // The middle of the panorama is placed at longitude=0\n    var geometry = new THREE.SphereGeometry(\n      PhotoSphereViewer.SPHERE_RADIUS * scale,\n      PhotoSphereViewer.SPHERE_VERTICES,\n      PhotoSphereViewer.SPHERE_VERTICES,\n      -PSVUtils.HalfPI\n    );\n\n    var material = new THREE.MeshBasicMaterial({\n      side: THREE.DoubleSide, // needs to be DoubleSide for CanvasRenderer\n    });\n\n    var mesh = new THREE.Mesh(geometry, material);\n    mesh.scale.x = -1;\n\n    return mesh;\n  };\n\n  /**\n   * @summary Applies a SphereCorrection to a Mesh\n   * @param {THREE.Mesh} mesh\n   * @param {PhotoSphereViewer.SphereCorrection} sphere_correction\n   * @private\n   */\n  PhotoSphereViewer.prototype._setSphereCorrection = function(mesh, sphere_correction) {\n    this.cleanSphereCorrection(sphere_correction);\n    mesh.rotation.set(\n      sphere_correction.tilt,\n      sphere_correction.pan,\n      sphere_correction.roll\n    );\n  };\n\n  /**\n   * @summary Creates the cube mesh\n   * @param {number} [scale=1]\n   * @returns {THREE.Mesh}\n   * @private\n   */\n  PhotoSphereViewer.prototype._createCubemap = function(scale) {\n    scale = scale || 1;\n\n    var geometry = new THREE.BoxGeometry(\n      PhotoSphereViewer.SPHERE_RADIUS * 2 * scale, PhotoSphereViewer.SPHERE_RADIUS * 2 * scale, PhotoSphereViewer.SPHERE_RADIUS * 2 * scale,\n      PhotoSphereViewer.CUBE_VERTICES, PhotoSphereViewer.CUBE_VERTICES, PhotoSphereViewer.CUBE_VERTICES\n    );\n\n    var materials = [];\n    for (var i = 0; i < 6; i++) {\n      materials.push(new THREE.MeshBasicMaterial({\n        side: THREE.BackSide,\n      }));\n    }\n\n    var mesh = new THREE.Mesh(geometry, materials);\n    mesh.scale.set(1, 1, -1);\n\n    return mesh;\n  };\n\n  /**\n   * @summary Performs transition between the current and a new texture\n   * @param {THREE.Texture} texture\n   * @param {PhotoSphereViewer.PanoramaOptions} options\n   * @returns {Promise}\n   * @private\n   * @throws {PSVError} if the panorama is a cubemap\n   */\n  PhotoSphereViewer.prototype._transition = function(texture, options) {\n    var mesh;\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = options.zoom !== undefined;\n\n    if (this.prop.isCubemap) {\n      if (positionProvided) {\n        console.warn('PhotoSphereViewer: cannot perform cubemap transition to different position.');\n        positionProvided = false;\n      }\n\n      mesh = this._createCubemap(0.9);\n\n      mesh.material.forEach(function(material, i) {\n        material.map = texture[i];\n        material.transparent = true;\n        material.opacity = 0;\n      });\n    }\n    else {\n      mesh = this._createSphere(0.9);\n\n      mesh.material.map = texture;\n      mesh.material.transparent = true;\n      mesh.material.opacity = 0;\n\n      if (options.sphere_correction) {\n        this._setSphereCorrection(mesh, options.sphere_correction);\n      }\n    }\n\n    // rotate the new sphere to make the target position face the camera\n    if (positionProvided) {\n      this.cleanPosition(options);\n\n      // Longitude rotation along the vertical axis\n      var verticalAxis = new THREE.Vector3(0, 1, 0);\n      mesh.rotateOnWorldAxis(verticalAxis, options.longitude - this.prop.position.longitude);\n\n      // Latitude rotation along the camera horizontal axis\n      var horizontalAxis = new THREE.Vector3(0, 1, 0).cross(this.camera.getWorldDirection()).normalize();\n      mesh.rotateOnWorldAxis(horizontalAxis, options.latitude - this.prop.position.latitude);\n\n      // FIXME: find a better way to handle ranges\n      if (this.config.latitude_range || this.config.longitude_range) {\n        this.config.longitude_range = this.config.latitude_range = null;\n        console.warn('PhotoSphereViewer: trying to perform transition with longitude_range and/or latitude_range, ranges cleared.');\n      }\n    }\n\n    this.scene.add(mesh);\n    this.needsUpdate();\n\n    return new PSVAnimation({\n      properties: {\n        opacity: { start: 0.0, end: 1.0 },\n        zoom: zoomProvided ? { start: this.prop.zoom_lvl, end: options.zoom } : undefined\n      },\n      duration: this.config.transition.duration,\n      easing: 'outCubic',\n      onTick: function(properties) {\n        if (this.prop.isCubemap) {\n          for (var i = 0; i < 6; i++) {\n            mesh.material[i].opacity = properties.opacity;\n          }\n        }\n        else {\n          mesh.material.opacity = properties.opacity;\n        }\n\n        if (zoomProvided) {\n          this.zoom(properties.zoom);\n        }\n\n        this.needsUpdate();\n      }.bind(this)\n    })\n      .then(function() {\n        // remove temp sphere and transfer the texture to the main sphere\n        this._setTexture(texture);\n        this.scene.remove(mesh);\n\n        mesh.geometry.dispose();\n        mesh.geometry = null;\n\n        // actually rotate the camera\n        if (positionProvided) {\n          this.rotate(options);\n        }\n\n        if (options.sphere_correction) {\n          this._setSphereCorrection(this.mesh, options.sphere_correction);\n        }\n        else {\n          this._setSphereCorrection(this.mesh, {});\n        }\n      }.bind(this));\n      \n  };\n\n  /**\n   * @summary Reverses autorotate direction with smooth transition\n   * @private\n   */\n  PhotoSphereViewer.prototype._reverseAutorotate = function() {\n    var self = this;\n    var newSpeed = -this.config.anim_speed;\n    var range = this.config.longitude_range;\n    this.config.longitude_range = null;\n\n    new PSVAnimation({\n      properties: {\n        speed: { start: this.config.anim_speed, end: 0 }\n      },\n      duration: 300,\n      easing: 'inSine',\n      onTick: function(properties) {\n        self.config.anim_speed = properties.speed;\n      }\n    })\n      .then(function() {\n        return new PSVAnimation({\n          properties: {\n            speed: { start: 0, end: newSpeed }\n          },\n          duration: 300,\n          easing: 'outSine',\n          onTick: function(properties) {\n            self.config.anim_speed = properties.speed;\n          }\n        });\n      })\n      .then(function() {\n        self.config.longitude_range = range;\n        self.config.anim_speed = newSpeed;\n      });\n  };\n\n  /**\n   * @summary Adds a panorama to the cache\n   * @param {PhotoSphereViewer.CacheItem} cache\n   * @fires PhotoSphereViewer.panorama-cached\n   * @throws {PSVError} when the cache is disabled\n   * @private\n   */\n  PhotoSphereViewer.prototype._putPanoramaCache = function(cache) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot add panorama to cache, cache_texture is disabled');\n    }\n\n    var existingCache = this.getPanoramaCache(cache.panorama);\n\n    if (existingCache) {\n      existingCache.image = cache.image;\n      existingCache.pano_data = cache.pano_data;\n    }\n    else {\n      this.prop.cache = this.prop.cache.slice(0, this.config.cache_texture - 1); // remove most ancient elements\n      this.prop.cache.unshift(cache);\n    }\n\n    /**\n     * @event panorama-cached\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when a panorama is stored in the cache\n     * @param {string} panorama\n     */\n    this.trigger('panorama-cached', cache.panorama);\n  };\n\n  /**\n   * @summary Stops all current animations\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopAll = function() {\n    this.stopAutorotate();\n    this.stopAnimation();\n    this.stopGyroscopeControl();\n    this.stopStereoView();\n  };\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/_psv/defaults',[\n  \"./ctoc\"\n],function(PhotoSphereViewer){\n  \"use strict\";\n  /**\n   * @summary Number of pixels bellow which a mouse move will be considered as a click\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.MOVE_THRESHOLD = 4;\n\n  /**\n   * @summary Angle in radians bellow which two angles are considered identical\n   * @type {float}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.ANGLE_THRESHOLD = 0.003;\n\n  /**\n   * @summary Delay in milliseconds between two clicks to consider a double click\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.DBLCLICK_DELAY = 300;\n\n  /**\n   * @summary Time size of the mouse position history used to compute inertia\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.INERTIA_WINDOW = 300;\n\n  /**\n   * @summary Radius of the THREE.SphereGeometry\n   * Half-length of the THREE.BoxGeometry\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.SPHERE_RADIUS = 100;\n\n  /**\n   * @summary Number of vertice of the THREE.SphereGeometry\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.SPHERE_VERTICES = 64;\n\n  /**\n   * @summary Number of vertices of each side of the THREE.BoxGeometry\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.CUBE_VERTICES = 8;\n\n  /**\n   * @summary Order of cube textures for arrays\n   * @type {int[]}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.CUBE_MAP = [0, 2, 4, 5, 3, 1];\n\n  /**\n   * @summary Order of cube textures for maps\n   * @type {string[]}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.CUBE_HASHMAP = ['left', 'right', 'top', 'bottom', 'back', 'front'];\n\n  /**\n   * @summary System properties\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.SYSTEM = {\n    loaded: false,\n    pixelRatio: 1,\n    isWebGLSupported: false,\n    isCanvasSupported: false,\n    deviceOrientationSupported: null,\n    maxTextureWidth: 0,\n    mouseWheelEvent: null,\n    fullscreenEvent: null\n  };\n\n  /**\n   * @summary SVG icons sources\n   * @type {Object.<string, string>}\n   * @readonly\n   */\n  PhotoSphereViewer.ICONS = {};\n\n  /**\n   * @summary Default options, see {@link http://photo-sphere-viewer.js.org/#options}\n   * @type {Object}\n   * @readonly\n   */\n  PhotoSphereViewer.DEFAULTS = {\n    panorama: null,\n    container: null,\n    caption: null,\n    usexmpdata: true,\n    pano_data: null,\n    min_fov: 30,\n    max_fov: 90,\n    default_fov: null,\n    default_long: 0,\n    default_lat: 0,\n    sphere_correction: {\n      pan: 0,\n      tilt: 0,\n      roll: 0\n    },\n    longitude_range: null,\n    latitude_range: null,\n    move_speed: 1,\n    zoom_speed: 2,\n    time_anim: 2000,\n    anim_speed: '2rpm',\n    anim_lat: null,\n    fisheye: false,\n    navbar: [\n      'autorotate',\n      'zoom',\n      'download',\n      'markers',\n      'caption',\n      'gyroscope',\n      'stereo',\n      'fullscreen'\n    ],\n    tooltip: {\n      offset: 5,\n      arrow_size: 7,\n      delay: 100\n    },\n    lang: {\n      autorotate: 'Automatic rotation',\n      zoom: 'Zoom',\n      zoomOut: 'Zoom out',\n      zoomIn: 'Zoom in',\n      download: 'Download',\n      fullscreen: 'Fullscreen',\n      markers: 'Markers',\n      gyroscope: 'Gyroscope',\n      stereo: 'Stereo view',\n      stereo_notification: 'Click anywhere to exit stereo view.',\n      please_rotate: ['Please rotate your device', '(or tap to continue)'],\n      two_fingers: ['Use two fingers to navigate']\n    },\n    mousewheel: true,\n    mousewheel_factor: 1,\n    mousemove: true,\n    mousemove_hover: false,\n    touchmove_two_fingers: false,\n    keyboard: {\n      'ArrowUp': 'rotateLatitudeUp',\n      'ArrowDown': 'rotateLatitudeDown',\n      'ArrowRight': 'rotateLongitudeRight',\n      'ArrowLeft': 'rotateLongitudeLeft',\n      'PageUp': 'zoomIn',\n      'PageDown': 'zoomOut',\n      '+': 'zoomIn',\n      '-': 'zoomOut',\n      ' ': 'toggleAutorotate'\n    },\n    move_inertia: true,\n    click_event_on_marker: false,\n    transition: {\n      duration: 1500,\n      loader: true\n    },\n    loading_img: null,\n    loading_txt: 'Loading...',\n    size: null,\n    cache_texture: 0,\n    templates: {},\n    markers: [],\n    with_credentials: false\n  };\n\n  /**\n   * @summary doT.js templates\n   * @type {Object.<string, string>}\n   * @readonly\n   */\n  PhotoSphereViewer.TEMPLATES = {\n    markersList: '\\\n  <div class=\"psv-markers-list-container\"> \\\n    <h1 class=\"psv-markers-list-title\">{{= it.config.lang.markers }}</h1> \\\n    <ul class=\"psv-markers-list\"> \\\n    {{~ it.markers: marker }} \\\n      <li data-psv-marker=\"{{= marker.id }}\" class=\"psv-markers-list-item {{? marker.className }}{{= marker.className }}{{?}}\"> \\\n        {{? marker.image }}<img class=\"psv-markers-list-image\" src=\"{{= marker.image }}\"/>{{?}} \\\n        <p class=\"psv-markers-list-name\">{{? marker.tooltip }}{{= marker.tooltip.content }}{{?? marker.html }}{{= marker.html }}{{??}}{{= marker.id }}{{?}}</p> \\\n      </li> \\\n    {{~}} \\\n    </ul> \\\n  </div>'\n  };\n\nPhotoSphereViewer.ICONS['compass.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M50 0a50 50 0 1 0 0 100A50 50 0 0 0 50 0zm0 88.81a38.86 38.86 0 0 1-38.81-38.8 38.86 38.86 0 0 1 38.8-38.82A38.86 38.86 0 0 1 88.82 50 38.87 38.87 0 0 1 50 88.81z\"/><path d=\"M72.07 25.9L40.25 41.06 27.92 74.12l31.82-15.18v-.01l12.32-33.03zM57.84 54.4L44.9 42.58l21.1-10.06-8.17 21.9z\"/><!--Created by iconoci from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['download.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M83.3 35.6h-17V3H32.2v32.6H16.6l33.6 32.7 33-32.7z\"/><path d=\"M83.3 64.2v16.3H16.6V64.2H-.1v32.6H100V64.2H83.3z\"/><!--Created by Michael Zenaty from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['fullscreen-in.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M100 40H87.1V18.8h-21V6H100zM100 93.2H66V80.3h21.1v-21H100zM34 93.2H0v-34h12.9v21.1h21zM12.9 40H0V6h34v12.9H12.8z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['fullscreen-out.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M66 7h13v21h21v13H66zM66 60.3h34v12.9H79v21H66zM0 60.3h34v34H21V73.1H0zM21 7h13v34H0V28h21z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['gesture.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M33.38 33.2a1.96 1.96 0 0 0 1.5-3.23 10.61 10.61 0 0 1 7.18-17.51c.7-.06 1.31-.49 1.61-1.12a13.02 13.02 0 0 1 11.74-7.43c7.14 0 12.96 5.8 12.96 12.9 0 3.07-1.1 6.05-3.1 8.38-.7.82-.61 2.05.21 2.76.83.7 2.07.6 2.78-.22a16.77 16.77 0 0 0 4.04-10.91C72.3 7.54 64.72 0 55.4 0a16.98 16.98 0 0 0-14.79 8.7 14.6 14.6 0 0 0-12.23 14.36c0 3.46 1.25 6.82 3.5 9.45.4.45.94.69 1.5.69m45.74 43.55a22.13 22.13 0 0 1-5.23 12.4c-4 4.55-9.53 6.86-16.42 6.86-12.6 0-20.1-10.8-20.17-10.91a1.82 1.82 0 0 0-.08-.1c-5.3-6.83-14.55-23.82-17.27-28.87-.05-.1 0-.21.02-.23a6.3 6.3 0 0 1 8.24 1.85l9.38 12.59a1.97 1.97 0 0 0 3.54-1.17V25.34a4 4 0 0 1 1.19-2.87 3.32 3.32 0 0 1 2.4-.95c1.88.05 3.4 1.82 3.4 3.94v24.32a1.96 1.96 0 0 0 3.93 0v-33.1a3.5 3.5 0 0 1 7 0v35.39a1.96 1.96 0 0 0 3.93 0v-.44c.05-2.05 1.6-3.7 3.49-3.7 1.93 0 3.5 1.7 3.5 3.82v5.63c0 .24.04.48.13.71l.1.26a1.97 1.97 0 0 0 3.76-.37c.33-1.78 1.77-3.07 3.43-3.07 1.9 0 3.45 1.67 3.5 3.74l-1.77 18.1zM77.39 51c-1.25 0-2.45.32-3.5.9v-.15c0-4.27-3.33-7.74-7.42-7.74-1.26 0-2.45.33-3.5.9V16.69a7.42 7.42 0 0 0-14.85 0v1.86a7 7 0 0 0-3.28-.94 7.21 7.21 0 0 0-5.26 2.07 7.92 7.92 0 0 0-2.38 5.67v37.9l-5.83-7.82a10.2 10.2 0 0 0-13.35-2.92 4.1 4.1 0 0 0-1.53 5.48C20 64.52 28.74 80.45 34.07 87.34c.72 1.04 9.02 12.59 23.4 12.59 7.96 0 14.66-2.84 19.38-8.2a26.06 26.06 0 0 0 6.18-14.6l1.78-18.2v-.2c0-4.26-3.32-7.73-7.42-7.73z\" fill=\"#000\" fill-rule=\"evenodd\"/><!--Created by AomAm from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['info.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\"><path d=\"M28.3 26.1c-1 2.6-1.9 4.8-2.6 7-2.5 7.4-5 14.7-7.2 22-1.3 4.4.5 7.2 4.3 7.8 1.3.2 2.8.2 4.2-.1 8.2-2 11.9-8.6 15.7-15.2l-2.2 2a18.8 18.8 0 0 1-7.4 5.2 2 2 0 0 1-1.6-.2c-.2-.1 0-1 0-1.4l.8-1.8L41.9 28c.5-1.4.9-3 .7-4.4-.2-2.6-3-4.4-6.3-4.4-8.8.2-15 4.5-19.5 11.8-.2.3-.2.6-.3 1.3 3.7-2.8 6.8-6.1 11.8-6.2z\"/><circle cx=\"39.3\" cy=\"9.2\" r=\"8.2\"/><!--Created by Arafat Uddin from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['mobile-rotate.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M66.7 19a14 14 0 0 1 13.8 12.1l-3.9-2.7c-.5-.3-1.1-.2-1.4.3-.3.5-.2 1.1.3 1.4l5.7 3.9.6.2c.3 0 .6-.2.8-.4l3.9-5.7c.3-.5.2-1.1-.3-1.4-.5-.3-1.1-.2-1.4.3l-2.4 3.5A16 16 0 0 0 66.7 17c-.6 0-1 .4-1 1s.4 1 1 1zM25 15h10c.6 0 1-.4 1-1s-.4-1-1-1H25c-.6 0-1 .4-1 1s.4 1 1 1zm-6.9 30H16l-2 .2a1 1 0 0 0-.8 1.2c.1.5.5.8 1 .8h.2l1.7-.2h2.1c.6 0 1-.4 1-1s-.5-1-1.1-1zm10 0h-4c-.6 0-1 .4-1 1s.4 1 1 1h4c.6 0 1-.4 1-1s-.4-1-1-1zM84 45H55V16A11 11 0 0 0 44 5H16A11 11 0 0 0 5 16v68a11 11 0 0 0 11 11h68a11 11 0 0 0 11-11V56a11 11 0 0 0-11-11zM16 93c-5 0-9-4-9-9V53.2c.3-.1.6-.3.7-.6a9.8 9.8 0 0 1 2-3c.4-.4.4-1 0-1.4a1 1 0 0 0-1.4 0l-1.2 1.5V16c0-5 4-9 9-9h28c5 0 9 4 9 9v68c0 5-4 9-9 9H16zm77-9c0 5-4 9-9 9H50.3c2.8-2 4.7-5.3 4.7-9V47h29c5 0 9 4 9 9v28zM38.1 45h-4c-.6 0-1 .4-1 1s.4 1 1 1h4c.6 0 1-.4 1-1s-.5-1-1-1zm9.9 0h-4c-.6 0-1 .4-1 1s.4 1 1 1h4c.6 0 1-.4 1-1s-.4-1-1-1zm38 19c-.6 0-1 .4-1 1v10c0 .6.4 1 1 1s1-.4 1-1V65c0-.6-.4-1-1-1z\"/><!--Created by Anthony Bresset from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['pin.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path d=\"M24 0C13.8 0 5.5 8.3 5.5 18.5c0 10.07 17.57 28.64 18.32 29.42a.25.25 0 0 0 .36 0c.75-.78 18.32-19.35 18.32-29.42C42.5 8.3 34.2 0 24 0zm0 7.14a10.35 10.35 0 0 1 0 20.68 10.35 10.35 0 0 1 0-20.68z\"/><!--Created by Daniele Marucci from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['play-active.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 41\"><path d=\"M40.5 14.1c-.1-.1-1.2-.5-2.898-1-.102 0-.202-.1-.202-.2C34.5 6.5 28 2 20.5 2S6.6 6.5 3.7 12.9c0 .1-.1.1-.2.2-1.7.6-2.8 1-2.9 1l-.6.3v12.1l.6.2c.1 0 1.1.399 2.7.899.1 0 .2.101.2.199C6.3 34.4 12.9 39 20.5 39c7.602 0 14.102-4.6 16.9-11.1 0-.102.1-.102.199-.2 1.699-.601 2.699-1 2.801-1l.6-.3V14.3l-.5-.2zM6.701 11.5C9.7 7 14.8 4 20.5 4c5.8 0 10.9 3 13.8 7.5.2.3-.1.6-.399.5-3.799-1-8.799-2-13.6-2-4.7 0-9.5 1-13.2 2-.3.1-.5-.2-.4-.5zM25.1 20.3L18.7 24c-.3.2-.7 0-.7-.5v-7.4c0-.4.4-.6.7-.4l6.399 3.8c.301.1.301.6.001.8zm9.4 8.901A16.421 16.421 0 0 1 20.5 37c-5.9 0-11.1-3.1-14-7.898-.2-.302.1-.602.4-.5 3.9 1 8.9 2.1 13.6 2.1 5 0 9.9-1 13.602-2 .298-.1.5.198.398.499z\"/><!--Created by Nick Bluth from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['play.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 41\"><path d=\"M40.5 14.1c-.1-.1-1.2-.5-2.899-1-.101 0-.2-.1-.2-.2C34.5 6.5 28 2 20.5 2S6.6 6.5 3.7 12.9c0 .1-.1.1-.2.2-1.7.6-2.8 1-2.9 1l-.6.3v12.1l.6.2c.1 0 1.1.4 2.7.9.1 0 .2.1.2.199C6.3 34.4 12.9 39 20.5 39c7.601 0 14.101-4.6 16.9-11.1 0-.101.1-.101.2-.2 1.699-.6 2.699-1 2.8-1l.6-.3V14.3l-.5-.2zM20.5 4c5.8 0 10.9 3 13.8 7.5.2.3-.1.6-.399.5-3.8-1-8.8-2-13.6-2-4.7 0-9.5 1-13.2 2-.3.1-.5-.2-.4-.5C9.7 7 14.8 4 20.5 4zm0 33c-5.9 0-11.1-3.1-14-7.899-.2-.301.1-.601.4-.5 3.9 1 8.9 2.1 13.6 2.1 5 0 9.9-1 13.601-2 .3-.1.5.2.399.5A16.422 16.422 0 0 1 20.5 37zm18.601-12.1c0 .1-.101.3-.2.3-2.5.9-10.4 3.6-18.4 3.6-7.1 0-15.6-2.699-18.3-3.6C2.1 25.2 2 25 2 24.9V16c0-.1.1-.3.2-.3 2.6-.9 10.6-3.6 18.2-3.6 7.5 0 15.899 2.7 18.5 3.6.1 0 .2.2.2.3v8.9z\"/><path d=\"M18.7 24l6.4-3.7c.3-.2.3-.7 0-.8l-6.4-3.8c-.3-.2-.7 0-.7.4v7.4c0 .5.4.7.7.5z\"/><!--Created by Nick Bluth from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['stereo.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -2 16 16\"><path d=\"M13.104 0H2.896C2.332 0 1 .392 1 .875h14C15 .392 13.668 0 13.104 0zM15 1H1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3.534a2 2 0 0 0 1.821-1.172l1.19-2.618a.5.5 0 0 1 .91 0l1.19 2.618A2 2 0 0 0 11.466 11H15a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM4 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm8 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4z\"/><!--Created by Idevã Batista from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['zoom-in.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path d=\"M8.728 4.009H6.744v2.737H4.006V8.73h2.738v2.736h1.984V8.73h2.737V6.746H8.728z\"/><!--Created by Ryan Canning from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['zoom-out.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path d=\"M4.006 6.746h7.459V8.73H4.006z\"/><!--Created by Ryan Canning from the Noun Project--></svg>';\n  \n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/_psv/events',[\n  \"./ctoc\",\n  \"../PSVUtils\",\n  \"../PSVAnimation\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVAnimation\n){\n  \"use strict\";\n  /**\n   * @summary Adds all needed event listeners\n   * @private\n   */\n  PhotoSphereViewer.prototype._bindEvents = function() {\n    window.addEventListener('resize', this);\n\n    // all interation events are binded to the HUD only\n    if (this.config.mousemove) {\n      this.hud.container.style.cursor = 'move';\n\n      if (this.config.mousemove_hover) {\n        this.hud.container.addEventListener('mouseenter', this);\n        this.hud.container.addEventListener('mouseleave', this);\n      }\n      else {\n        this.hud.container.addEventListener('mousedown', this);\n        window.addEventListener('mouseup', this);\n      }\n\n      this.hud.container.addEventListener('touchstart', this);\n      window.addEventListener('touchend', this);\n\n      this.hud.container.addEventListener('mousemove', this);\n      this.hud.container.addEventListener('touchmove', this);\n    }\n\n    if (PhotoSphereViewer.SYSTEM.fullscreenEvent) {\n      document.addEventListener(PhotoSphereViewer.SYSTEM.fullscreenEvent, this);\n    }\n\n    if (this.config.mousewheel) {\n      this.hud.container.addEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, this);\n    }\n\n    this.on('_side-reached', function(side) {\n      if (this.isAutorotateEnabled()) {\n        if (side === 'left' || side === 'right') {\n          this._reverseAutorotate();\n        }\n      }\n    });\n  };\n\n  /**\n   * @summary Removes all event listeners\n   * @private\n   */\n  PhotoSphereViewer.prototype._unbindEvents = function() {\n    window.removeEventListener('resize', this);\n\n    if (this.config.mousemove) {\n      this.hud.container.removeEventListener('mousedown', this);\n      this.hud.container.removeEventListener('mouseenter', this);\n      this.hud.container.removeEventListener('touchstart', this);\n      window.removeEventListener('mouseup', this);\n      window.removeEventListener('touchend', this);\n      this.hud.container.removeEventListener('mouseleave', this);\n      this.hud.container.removeEventListener('mousemove', this);\n      this.hud.container.removeEventListener('touchmove', this);\n    }\n\n    if (PhotoSphereViewer.SYSTEM.fullscreenEvent) {\n      document.removeEventListener(PhotoSphereViewer.SYSTEM.fullscreenEvent, this);\n    }\n\n    if (this.config.mousewheel) {\n      this.hud.container.removeEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, this);\n    }\n\n    this.off('_side-reached');\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype.handleEvent = function(evt) {\n    switch (evt.type) {\n      // @formatter:off\n      case 'resize': PSVUtils.throttle(this._onResize(), 50); break;\n      case 'keydown':     this._onKeyDown(evt);     break;\n      case 'mousedown':   this._onMouseDown(evt);   break;\n      case 'mouseenter':  this._onMouseDown(evt);   break;\n      case 'touchstart':  this._onTouchStart(evt);  break;\n      case 'mouseup':     this._onMouseUp(evt);     break;\n      case 'mouseleave':  this._onMouseUp(evt);     break;\n      case 'touchend':    this._onTouchEnd(evt);    break;\n      case 'mousemove':   this._onMouseMove(evt);   break;\n      case 'touchmove':   this._onTouchMove(evt);   break;\n      case PhotoSphereViewer.SYSTEM.fullscreenEvent:  this._fullscreenToggled();  break;\n      case PhotoSphereViewer.SYSTEM.mouseWheelEvent:  this._onMouseWheel(evt);    break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Resizes the canvas when the window is resized\n   * @fires PhotoSphereViewer.size-updated\n   * @private\n   */\n  PhotoSphereViewer.prototype._onResize = function() {\n    if (this.container.clientWidth !== this.prop.size.width || this.container.clientHeight !== this.prop.size.height) {\n      this.prop.size.width = parseInt(this.container.clientWidth);\n      this.prop.size.height = parseInt(this.container.clientHeight);\n      this.prop.aspect = this.prop.size.width / this.prop.size.height;\n      this.needsUpdate();\n\n      if (this.renderer) {\n        (this.stereoEffect || this.renderer).setSize(this.prop.size.width, this.prop.size.height);\n      }\n\n      /**\n       * @event size-updated\n       * @memberof PhotoSphereViewer\n       * @summary Triggered when the viewer size changes\n       * @param {PhotoSphereViewer.Size} size\n       */\n      this.trigger('size-updated', this.getSize());\n    }\n  };\n\n  /**\n   * @summary Handles keyboard events\n   * @param {KeyboardEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onKeyDown = function(evt) {\n    var dLong = 0;\n    var dLat = 0;\n    var dZoom = 0;\n\n    var key = PSVUtils.getEventKey(evt);\n    var action = this.config.keyboard[key];\n\n    switch (action) {\n      // @formatter:off\n      case 'rotateLatitudeUp': dLat = 0.01; break;\n      case 'rotateLatitudeDown': dLat = -0.01; break;\n      case 'rotateLongitudeRight': dLong = 0.01; break;\n      case 'rotateLongitudeLeft': dLong = -0.01; break;\n      case 'zoomIn': dZoom = 1; break;\n      case 'zoomOut': dZoom = -1; break;\n      case 'toggleAutorotate': this.toggleAutorotate(); break;\n      // @formatter:on\n    }\n\n    if (dZoom !== 0) {\n      this.zoom(this.prop.zoom_lvl + dZoom * this.config.zoom_speed);\n    }\n    else if (dLat !== 0 || dLong !== 0) {\n      this.rotate({\n        longitude: this.prop.position.longitude + dLong * this.prop.move_speed * this.prop.hFov,\n        latitude: this.prop.position.latitude + dLat * this.prop.move_speed * this.prop.vFov\n      });\n    }\n  };\n\n  /**\n   * @summary Handles mouse button events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseDown = function(evt) {\n    this._startMove(evt);\n  };\n\n  /**\n   * @summary Handles mouse buttons events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseUp = function(evt) {\n    this._stopMove(evt);\n\n    if (this.isStereoEnabled()) {\n      this.stopStereoView();\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseMove = function(evt) {\n    if (evt.buttons !== 0) {\n      evt.preventDefault();\n      this._move(evt);\n    }\n    else if (this.config.mousemove_hover) {\n      this._moveAbsolute(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchStart = function(evt) {\n    if (evt.touches.length === 1) {\n      if (!this.config.touchmove_two_fingers) {\n        this._startMove(evt.touches[0]);\n      }\n    }\n    else if (evt.touches.length === 2) {\n      this._startMoveZoom(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchEnd = function(evt) {\n    if (evt.touches.length === 1) {\n      this._stopMoveZoom();\n    }\n    else if (evt.touches.length === 0) {\n      this._stopMove(evt.changedTouches[0]);\n\n      if (this.config.touchmove_two_fingers) {\n        this.overlay.hideOverlay();\n      }\n    }\n  };\n\n  /**\n   * @summary Handles touch move events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchMove = function(evt) {\n    if (evt.touches.length === 1) {\n      if (this.config.touchmove_two_fingers) {\n        this.overlay.showOverlay({\n          image: PhotoSphereViewer.ICONS['gesture.svg'],\n          text: this.config.lang.two_fingers[0]\n        });\n      }\n      else {\n        evt.preventDefault();\n        this._move(evt.touches[0]);\n      }\n    }\n    else if (evt.touches.length === 2) {\n      evt.preventDefault();\n      this._moveZoom(evt);\n    }\n  };\n\n  /**\n   * @summary Initializes the movement\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._startMove = function(evt) {\n    this.stopAutorotate();\n    this.stopAnimation()\n      .then(function() {\n        this.prop.mouse_x = this.prop.start_mouse_x = parseInt(evt.clientX);\n        this.prop.mouse_y = this.prop.start_mouse_y = parseInt(evt.clientY);\n        this.prop.moving = true;\n        this.prop.zooming = false;\n\n        this.prop.mouse_history.length = 0;\n        this._logMouseMove(evt);\n      }.bind(this));\n  };\n\n  /**\n   * @summary Initializes the combines move and zoom\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._startMoveZoom = function(evt) {\n    var t = [\n      { x: parseInt(evt.touches[0].clientX), y: parseInt(evt.touches[0].clientY) },\n      { x: parseInt(evt.touches[1].clientX), y: parseInt(evt.touches[1].clientY) }\n    ];\n\n    this.prop.pinch_dist = Math.sqrt(Math.pow(t[0].x - t[1].x, 2) + Math.pow(t[0].y - t[1].y, 2));\n    this.prop.mouse_x = this.prop.start_mouse_x = (t[0].x + t[1].x) / 2;\n    this.prop.mouse_y = this.prop.start_mouse_x = (t[0].y + t[1].y) / 2;\n    this.prop.moving = true;\n    this.prop.zooming = true;\n  };\n\n  /**\n   * @summary Stops the movement\n   * @description If the move threshold was not reached a click event is triggered, otherwise an animation is launched to simulate inertia\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMove = function(evt) {\n    if (!PSVUtils.getClosest(evt.target, '.psv-hud')) {\n      return;\n    }\n\n    if (this.prop.moving) {\n      // move threshold to trigger a click\n      if (Math.abs(evt.clientX - this.prop.start_mouse_x) < PhotoSphereViewer.MOVE_THRESHOLD && Math.abs(evt.clientY - this.prop.start_mouse_y) < PhotoSphereViewer.MOVE_THRESHOLD) {\n        this._click(evt); // deleted by lwf\n        this.prop.moving = false;\n      }\n      // inertia animation\n      else if (this.config.move_inertia && !this.isGyroscopeEnabled()) {\n        this._logMouseMove(evt);\n        this._stopMoveInertia(evt);\n      }\n      else {\n        this.prop.moving = false;\n      }\n\n      this.prop.mouse_history.length = 0;\n    }\n  };\n\n  /**\n   * @summary Stops the combined move and zoom\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMoveZoom = function() {\n    this.prop.mouse_history.length = 0;\n    this.prop.moving = false;\n    this.prop.zooming = false;\n  };\n\n  /**\n   * @summary Performs an animation to simulate inertia when the movement stops\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMoveInertia = function(evt) {\n    var direction = {\n      x: evt.clientX - this.prop.mouse_history[0][1],\n      y: evt.clientY - this.prop.mouse_history[0][2]\n    };\n\n    var norm = Math.sqrt(direction.x * direction.x + direction.y * direction.y);\n\n    this.prop.animation_promise = new PSVAnimation({\n      properties: {\n        clientX: { start: evt.clientX, end: evt.clientX + direction.x },\n        clientY: { start: evt.clientY, end: evt.clientY + direction.y }\n      },\n      duration: norm * PhotoSphereViewer.INERTIA_WINDOW / 100,\n      easing: 'outCirc',\n      onTick: function(properties) {\n        this._move(properties, false);\n      }.bind(this)\n    })\n      .finally(function() {\n        this.prop.moving = false;\n      }.bind(this));\n  };\n\n  /**\n   * @summary Triggers an event with all coordinates when a simple click is performed\n   * @param {MouseEvent|Touch} evt\n   * @fires PhotoSphereViewer.click\n   * @fires PhotoSphereViewer.dblclick\n   * @private\n   */\n  PhotoSphereViewer.prototype._click = function(evt) {\n    var boundingRect = this.container.getBoundingClientRect();\n\n    var data = {\n      target: evt.target,\n      client_x: evt.clientX,\n      client_y: evt.clientY,\n      viewer_x: parseInt(evt.clientX - boundingRect.left),\n      viewer_y: parseInt(evt.clientY - boundingRect.top)\n    };\n\n    var intersect = this.viewerCoordsToVector3({ x: data.viewer_x, y: data.viewer_y });\n\n    if (intersect) {\n      var sphericalCoords = this.vector3ToSphericalCoords(intersect);\n      data.longitude = sphericalCoords.longitude;\n      data.latitude = sphericalCoords.latitude;\n\n      // TODO: for cubemap, computes texture's index and coordinates\n      if (!this.prop.isCubemap) {\n        var textureCoords = this.sphericalCoordsToTextureCoords({ longitude: data.longitude, latitude: data.latitude });\n        data.texture_x = textureCoords.x;\n        data.texture_y = textureCoords.y;\n      }\n\n      if (!this.prop.dblclick_timeout) {\n        /**\n         * @event click\n         * @memberof PhotoSphereViewer\n         * @summary Triggered when the user clicks on the viewer (everywhere excluding the navbar and the side panel)\n         * @param {PhotoSphereViewer.ClickData} data\n         */\n        this.trigger('click', data);\n\n        this.prop.dblclick_data = PSVUtils.clone(data);\n        this.prop.dblclick_timeout = setTimeout(function() {\n          this.prop.dblclick_timeout = null;\n          this.prop.dblclick_data = null;\n        }.bind(this), PhotoSphereViewer.DBLCLICK_DELAY);\n      }\n      else {\n        if (Math.abs(this.prop.dblclick_data.client_x - data.client_x) < PhotoSphereViewer.MOVE_THRESHOLD &&\n          Math.abs(this.prop.dblclick_data.client_y - data.client_y) < PhotoSphereViewer.MOVE_THRESHOLD) {\n          /**\n           * @event dblclick\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the user double clicks on the viewer. The simple `click` event is always fired before `dblclick`\n           * @param {PhotoSphereViewer.ClickData} data\n           */\n          this.trigger('dblclick', this.prop.dblclick_data);\n        }\n\n        clearTimeout(this.prop.dblclick_timeout);\n        this.prop.dblclick_timeout = null;\n        this.prop.dblclick_data = null;\n      }\n    }\n  };\n\n  /**\n   * @summary Performs movement\n   * @param {MouseEvent|Touch} evt\n   * @param {boolean} [log=true]\n   * @private\n   */\n  PhotoSphereViewer.prototype._move = function(evt, log) {\n    if (this.prop.moving) {\n      var x = parseInt(evt.clientX);\n      var y = parseInt(evt.clientY);\n\n      var rotation = {\n        longitude: (x - this.prop.mouse_x) / this.prop.size.width * this.prop.move_speed * this.prop.hFov * PhotoSphereViewer.SYSTEM.pixelRatio,\n        latitude: (y - this.prop.mouse_y) / this.prop.size.height * this.prop.move_speed * this.prop.vFov * PhotoSphereViewer.SYSTEM.pixelRatio\n      };\n\n      if (this.isGyroscopeEnabled()) {\n        this.prop.gyro_alpha_offset += rotation.longitude;\n      }\n      else {\n        this.rotate({\n          longitude: this.prop.position.longitude - rotation.longitude,\n          latitude: this.prop.position.latitude + rotation.latitude\n        });\n      }\n\n      this.prop.mouse_x = x;\n      this.prop.mouse_y = y;\n\n      if (log !== false) {\n        this._logMouseMove(evt);\n      }\n    }\n  };\n\n  /**\n   * @summary Performs movement absolute to cursor position in viewer\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._moveAbsolute = function(evt) {\n    if (this.prop.moving) {\n      this.rotate({\n        longitude: ((evt.clientX - this.container.offsetLeft) / this.container.offsetWidth - 0.5) * PSVUtils.TwoPI,\n        latitude: -((evt.clientY - this.container.offsetTop) / this.container.offsetHeight - 0.5) * Math.PI\n      });\n    }\n  };\n\n  /**\n   * @summary Perfoms combines move and zoom\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._moveZoom = function(evt) {\n    if (this.prop.zooming && this.prop.moving) {\n      var t = [\n        { x: parseInt(evt.touches[0].clientX), y: parseInt(evt.touches[0].clientY) },\n        { x: parseInt(evt.touches[1].clientX), y: parseInt(evt.touches[1].clientY) }\n      ];\n\n      var p = Math.sqrt(Math.pow(t[0].x - t[1].x, 2) + Math.pow(t[0].y - t[1].y, 2));\n      var delta = 80 * (p - this.prop.pinch_dist) / this.prop.size.width;\n\n      this.zoom(this.prop.zoom_lvl + delta);\n\n      this._move({\n        clientX: (t[0].x + t[1].x) / 2,\n        clientY: (t[0].y + t[1].y) / 2\n      });\n\n      this.prop.pinch_dist = p;\n    }\n  };\n\n  /**\n   * @summary Handles mouse wheel events\n   * @param {MouseWheelEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseWheel = function(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    var delta = PSVUtils.normalizeWheel(evt).spinY * 5;\n\n    if (delta !== 0) {\n      this.zoom(this.prop.zoom_lvl - delta * this.config.mousewheel_factor);\n    }\n  };\n\n  /**\n   * @summary Handles fullscreen events\n   * @fires PhotoSphereViewer.fullscreen-updated\n   * @private\n   */\n  PhotoSphereViewer.prototype._fullscreenToggled = function() {\n    var enabled = this.isFullscreenEnabled();\n\n    if (this.config.keyboard) {\n      if (enabled) {\n        this.startKeyboardControl();\n      }\n      else {\n        this.stopKeyboardControl();\n      }\n    }\n\n    /**\n     * @event fullscreen-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the fullscreen mode is enabled/disabled\n     * @param {boolean} enabled\n     */\n    this.trigger('fullscreen-updated', enabled);\n  };\n\n  /**\n   * @summary Stores each mouse position during a mouse move\n   * @description Positions older than \"INERTIA_WINDOW\" are removed<br>\n   *     Positions before a pause of \"INERTIA_WINDOW\" / 10 are removed\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._logMouseMove = function(evt) {\n    var now = Date.now();\n    this.prop.mouse_history.push([now, evt.clientX, evt.clientY]);\n\n    var previous = null;\n\n    for (var i = 0; i < this.prop.mouse_history.length;) {\n      if (this.prop.mouse_history[0][i] < now - PhotoSphereViewer.INERTIA_WINDOW) {\n        this.prop.mouse_history.splice(i, 1);\n      }\n      else if (previous && this.prop.mouse_history[0][i] - previous > PhotoSphereViewer.INERTIA_WINDOW / 10) {\n        this.prop.mouse_history.splice(0, i);\n        i = 0;\n        previous = this.prop.mouse_history[0][i];\n      }\n      else {\n        i++;\n        previous = this.prop.mouse_history[0][i];\n      }\n    }\n  };\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/_psv/utils',[\n  \"skylark-threejs\",\n  \"./ctoc\",\n  \"../PSVUtils\",\n  \"../PSVError\"\n],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVError\n){\n  \"use strict\";\n  /**\n   * @summary Inits the global SYSTEM var with generic support information\n   * @private\n   */\n  PhotoSphereViewer._loadSystem = function() {\n    var S = PhotoSphereViewer.SYSTEM;\n    S.loaded = true;\n    S.pixelRatio = window.devicePixelRatio || 1;\n    S.isWebGLSupported = PSVUtils.isWebGLSupported();\n    S.isCanvasSupported = PSVUtils.isCanvasSupported();\n    S.maxTextureWidth = S.isWebGLSupported ? PSVUtils.getMaxTextureWidth() : 4096;\n    S.mouseWheelEvent = PSVUtils.mouseWheelEvent();\n    S.fullscreenEvent = PSVUtils.fullscreenEvent();\n    S.deviceOrientationSupported = PSVUtils.isDeviceOrientationSupported();\n    S.touchEnabled = PSVUtils.isTouchEnabled();\n  };\n\n  /**\n   * @summary Sets the viewer size\n   * @param {PhotoSphereViewer.Size} size\n   * @private\n   */\n  PhotoSphereViewer.prototype._setViewerSize = function(size) {\n    ['width', 'height'].forEach(function(dim) {\n      if (size[dim]) {\n        if (/^[0-9.]+$/.test(size[dim])) {\n          size[dim] += 'px';\n        }\n        this.parent.style[dim] = size[dim];\n      }\n    }, this);\n  };\n\n  /**\n   * @summary Converts a speed into a duration from current position to a new position\n   * @param {string|number} value\n   * @param {number} angle\n   * @returns {number}\n   */\n  PhotoSphereViewer.prototype.speedToDuration = function(value, angle) {\n    if (!value || typeof value !== 'number') {\n      // desired radial speed\n      var speed = value ? PSVUtils.parseSpeed(value) : this.config.anim_speed;\n      // compute duration\n      return angle / Math.abs(speed) * 1000;\n    }\n    else {\n      return Math.abs(value);\n    }\n  };\n\n  /**\n   * @summary Converts pixel texture coordinates to spherical radians coordinates\n   * @param {PhotoSphereViewer.Point} point\n   * @returns {PhotoSphereViewer.Position}\n   */\n  PhotoSphereViewer.prototype.textureCoordsToSphericalCoords = function(point) {\n    if (this.prop.isCubemap) {\n      throw new PSVError('Unable to use texture coords with cubemap.');\n    }\n\n    var relativeX = (point.x + this.prop.pano_data.cropped_x) / this.prop.pano_data.full_width * PSVUtils.TwoPI;\n    var relativeY = (point.y + this.prop.pano_data.cropped_y) / this.prop.pano_data.full_height * Math.PI;\n\n    return {\n      longitude: relativeX >= Math.PI ? relativeX - Math.PI : relativeX + Math.PI,\n      latitude: PSVUtils.HalfPI - relativeY\n    };\n  };\n\n  /**\n   * @summary Converts spherical radians coordinates to pixel texture coordinates\n   * @param {PhotoSphereViewer.Position} position\n   * @returns {PhotoSphereViewer.Point}\n   */\n  PhotoSphereViewer.prototype.sphericalCoordsToTextureCoords = function(position) {\n    if (this.prop.isCubemap) {\n      throw new PSVError('Unable to use texture coords with cubemap.');\n    }\n\n    var relativeLong = position.longitude / PSVUtils.TwoPI * this.prop.pano_data.full_width;\n    var relativeLat = position.latitude / Math.PI * this.prop.pano_data.full_height;\n\n    return {\n      x: parseInt(position.longitude < Math.PI ? relativeLong + this.prop.pano_data.full_width / 2 : relativeLong - this.prop.pano_data.full_width / 2) - this.prop.pano_data.cropped_x,\n      y: parseInt(this.prop.pano_data.full_height / 2 - relativeLat) - this.prop.pano_data.cropped_y\n    };\n  };\n\n  /**\n   * @summary Converts spherical radians coordinates to a THREE.Vector3\n   * @param {PhotoSphereViewer.Position} position\n   * @returns {THREE.Vector3}\n   */\n  PhotoSphereViewer.prototype.sphericalCoordsToVector3 = function(position) {\n    return new THREE.Vector3(\n      PhotoSphereViewer.SPHERE_RADIUS * -Math.cos(position.latitude) * Math.sin(position.longitude),\n      PhotoSphereViewer.SPHERE_RADIUS * Math.sin(position.latitude),\n      PhotoSphereViewer.SPHERE_RADIUS * Math.cos(position.latitude) * Math.cos(position.longitude)\n    );\n  };\n\n  /**\n   * @summary Converts a THREE.Vector3 to spherical radians coordinates\n   * @param {THREE.Vector3} vector\n   * @returns {PhotoSphereViewer.Position}\n   */\n  PhotoSphereViewer.prototype.vector3ToSphericalCoords = function(vector) {\n    var phi = Math.acos(vector.y / Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z));\n    var theta = Math.atan2(vector.x, vector.z);\n\n    return {\n      longitude: theta < 0 ? -theta : PSVUtils.TwoPI - theta,\n      latitude: PSVUtils.HalfPI - phi\n    };\n  };\n\n  /**\n   * @summary Converts position on the viewer to a THREE.Vector3\n   * @param {PhotoSphereViewer.Point} viewerPoint\n   * @returns {THREE.Vector3}\n   */\n  PhotoSphereViewer.prototype.viewerCoordsToVector3 = function(viewerPoint) {\n    var screen = new THREE.Vector2(\n      2 * viewerPoint.x / this.prop.size.width - 1,\n      -2 * viewerPoint.y / this.prop.size.height + 1\n    );\n\n    this.raycaster.setFromCamera(screen, this.camera);\n\n    var intersects = this.raycaster.intersectObjects(this.scene.children);\n\n    if (intersects.length === 1) {\n      return intersects[0].point;\n    }\n    else {\n      return null;\n    }\n  };\n\n  /**\n   * @summary Converts a THREE.Vector3 to position on the viewer\n   * @param {THREE.Vector3} vector\n   * @returns {PhotoSphereViewer.Point}\n   */\n  PhotoSphereViewer.prototype.vector3ToViewerCoords = function(vector) {\n    vector = vector.clone();\n    vector.project(this.camera);\n\n    return {\n      x: parseInt((vector.x + 1) / 2 * this.prop.size.width),\n      y: parseInt((1 - vector.y) / 2 * this.prop.size.height)\n    };\n  };\n\n  /**\n   * @summary Converts x/y to latitude/longitude if present and ensure boundaries\n   * @param {PhotoSphereViewer.ExtendedPosition} position - mutated\n   * @private\n   */\n  PhotoSphereViewer.prototype.cleanPosition = function(position) {\n    if (position.hasOwnProperty('x') && position.hasOwnProperty('y')) {\n      PSVUtils.deepmerge(position, this.textureCoordsToSphericalCoords(position));\n    }\n\n    position.longitude = PSVUtils.parseAngle(position.longitude);\n    position.latitude = PSVUtils.parseAngle(position.latitude, true);\n  };\n\n  /**\n   * @summary Clean a SphereCorrection object\n   * @param {PhotoSphereViewer.SphereCorrection} sphere_correction - mutated\n   */\n  PhotoSphereViewer.prototype.cleanSphereCorrection = function(sphere_correction) {\n    sphere_correction.pan = PSVUtils.parseAngle(sphere_correction.pan || 0);\n    sphere_correction.tilt = PSVUtils.parseAngle(sphere_correction.tilt || 0, true);\n    sphere_correction.roll = PSVUtils.parseAngle(sphere_correction.roll || 0, true, false);\n  };\n\n  /**\n   * @summary Checks if an object is a {PhotoSphereViewer.ExtendedPosition}, ie has x/y or longitude/latitude\n   * @param {object} object\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isExtendedPosition = function(object) {\n    return [['x', 'y'], ['longitude', 'latitude']].some(function(keys) {\n      return keys[0] in object && keys[1] in object;\n    });\n  };\n\n  /**\n   * @summary Apply \"longitude_range\" and \"latitude_range\"\n   * @param {PhotoSphereViewer.Position} position - mutated\n   * @returns {string[]} list of sides that were reached\n   * @private\n   */\n  PhotoSphereViewer.prototype.applyRanges = function(position) {\n    var range, offset, sidesReached = [];\n\n    if (this.config.longitude_range) {\n      range = PSVUtils.clone(this.config.longitude_range);\n      offset = THREE.Math.degToRad(this.prop.hFov) / 2;\n\n      range[0] = PSVUtils.parseAngle(range[0] + offset);\n      range[1] = PSVUtils.parseAngle(range[1] - offset);\n\n      if (range[0] > range[1]) { // when the range cross longitude 0\n        if (position.longitude > range[1] && position.longitude < range[0]) {\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\n            position.longitude = range[0];\n            sidesReached.push('left');\n          }\n          else {\n            position.longitude = range[1];\n            sidesReached.push('right');\n          }\n        }\n      }\n      else {\n        if (position.longitude < range[0]) {\n          position.longitude = range[0];\n          sidesReached.push('left');\n        }\n        else if (position.longitude > range[1]) {\n          position.longitude = range[1];\n          sidesReached.push('right');\n        }\n      }\n    }\n\n    if (this.config.latitude_range) {\n      range = PSVUtils.clone(this.config.latitude_range);\n      offset = THREE.Math.degToRad(this.prop.vFov) / 2;\n\n      range[0] = PSVUtils.parseAngle(Math.min(range[0] + offset, range[1]), true);\n      range[1] = PSVUtils.parseAngle(Math.max(range[1] - offset, range[0]), true);\n\n      if (position.latitude < range[0]) {\n        position.latitude = range[0];\n        sidesReached.push('bottom');\n      }\n      else if (position.latitude > range[1]) {\n        position.latitude = range[1];\n        sidesReached.push('top');\n      }\n    }\n\n    return sidesReached;\n  };\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/PhotoSphereViewer',[\n  \"skylark-threejs\",\n  \"./_psv/ctoc\",\n   \"./PSVError\",\n  \"./PSVUtils\",\n  \"./PSVMarker\",\n  \"./PSVAnimation\",\n  \"./_psv/core\",\n  \"./_psv/defaults\",\n  \"./_psv/events\",\n  \"./_psv/utils\"\n ],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVError,\n  PSVUtils,\n  PSVMarker,\n  PSVAnimation\n){\n  \"use strict\";\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Point\n   * @summary Object defining a point\n   * @property {int} x\n   * @property {int} y\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Size\n   * @summary Object defining a size\n   * @property {int} width\n   * @property {int} height\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.CssSize\n   * @summary Object defining a size in CSS (px, % or auto)\n   * @property {string} [width]\n   * @property {string} [height]\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Position\n   * @summary Object defining a spherical position\n   * @property {float} longitude\n   * @property {float} latitude\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.Position} PhotoSphereViewer.ExtendedPosition\n   * @summary Object defining a spherical or texture position\n   * @description A position that can be expressed either in spherical coordinates (radians or degrees) or in texture coordinates (pixels)\n   * @property {int} x\n   * @property {int} y\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.ExtendedPosition} PhotoSphereViewer.AnimateOptions\n   * @summary Object defining animation options\n   * @property {number} zoom - target zoom level between 0 and 100\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.SphereCorrection\n   * @property {number} pan\n   * @property {number} tilt\n   * @property {number} roll\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.AnimateOptions} PhotoSphereViewer.PanoramaOptions\n   * @summary Object defining panorama and animation options\n   * @property {PhotoSphereViewer.SphereCorrection} sphere_correction - new sphere correction to apply to the panorama\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.CacheItem\n   * @summary An entry in the memory cache\n   * @property {string} panorama\n   * @property {THREE.Texture} image\n   * @property {PhotoSphereViewer.PanoData} pano_data\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.PanoData\n   * @summary Crop information of the panorama\n   * @property {int} full_width\n   * @property {int} full_height\n   * @property {int} cropped_width\n   * @property {int} cropped_height\n   * @property {int} cropped_x\n   * @property {int} cropped_y\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.ClickData\n   * @summary Data of the `click` event\n   * @property {int} client_x - position in the browser window\n   * @property {int} client_y - position in the browser window\n   * @property {int} viewer_x - position in the viewer\n   * @property {int} viewer_y - position in the viewer\n   * @property {float} longitude - position in spherical coordinates\n   * @property {float} latitude - position in spherical coordinates\n   * @property {int} texture_x - position on the texture\n   * @property {int} texture_y - position on the texture\n   * @property {PSVMarker} [marker] - clicked marker\n   */\n\n\n\n  /**\n   * @summary Triggers an event on the viewer\n   * @function trigger\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string} name\n   * @param {...*} [arguments]\n   * @returns {uEvent.Event}\n   */\n\n  /**\n   * @summary Triggers an event on the viewer and returns the modified value\n   * @function change\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string} name\n   * @param {*} value\n   * @param {...*} [arguments]\n   * @returns {*}\n   */\n\n  /**\n   * @summary Attaches an event listener on the viewer\n   * @function on\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  /**\n   * @summary Removes an event listener from the viewer\n   * @function off\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  /**\n   * @summary Attaches an event listener called once on the viewer\n   * @function once\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  //uEvent.mixin(PhotoSphereViewer);\n\n\n\n\n  /**\n   * @summary Starts to load the panorama\n   * @returns {Promise}\n   * @throws {PSVError} when the panorama is not configured\n   * @deprecated Use {@link PhotoSphereViewer#setPanorama} instead\n   */\n  PhotoSphereViewer.prototype.load = function() {\n    if (!this.config.panorama) {\n      throw new PSVError('No value given for panorama.');\n    }\n\n    return this.setPanorama(this.config.panorama, false);\n  };\n\n  /**\n   * @summary Returns the current position of the camera\n   * @returns {PhotoSphereViewer.Position}\n   */\n  PhotoSphereViewer.prototype.getPosition = function() {\n    return {\n      longitude: this.prop.position.longitude,\n      latitude: this.prop.position.latitude\n    };\n  };\n\n  /**\n   * @summary Returns the current zoom level\n   * @returns {int}\n   */\n  PhotoSphereViewer.prototype.getZoomLevel = function() {\n    return this.prop.zoom_lvl;\n  };\n\n  /**\n   * @summary Returns the current viewer size\n   * @returns {PhotoSphereViewer.Size}\n   */\n  PhotoSphereViewer.prototype.getSize = function() {\n    return {\n      width: this.prop.size.width,\n      height: this.prop.size.height\n    };\n  };\n\n  /**\n   * @summary Checks if the automatic rotation is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isAutorotateEnabled = function() {\n    return !!this.prop.autorotate_cb;\n  };\n\n  /**\n   * @summary Checks if the gyroscope is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isGyroscopeEnabled = function() {\n    return !!this.prop.orientation_cb;\n  };\n\n  /**\n   * @summary Checks if the stereo viewx is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isStereoEnabled = function() {\n    return !!this.stereoEffect;\n  };\n\n  /**\n   * @summary Checks if the viewer is in fullscreen\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isFullscreenEnabled = function() {\n    return PSVUtils.isFullscreenEnabled(this.container);\n  };\n\n  /**\n   * @summary Flags the view has changed for the next render\n   */\n  PhotoSphereViewer.prototype.needsUpdate = function() {\n    this.prop.needsUpdate = true;\n  };\n\n  /**\n   * @summary Performs a render\n   * @deprecated Use {@link PhotoSphereViewer.event:before-render} instead\n   */\n  PhotoSphereViewer.prototype.render = function() {\n    this._render();\n  };\n\n  /**\n   * @summary Destroys the viewer\n   * @description The memory used by the ThreeJS context is not totally cleared. This will be fixed as soon as possible.\n   */\n  PhotoSphereViewer.prototype.destroy = function() {\n    window.cancelAnimationFrame(this.prop.main_reqid);\n\n    this._stopAll();\n    this.stopKeyboardControl();\n    this.stopNoSleep();\n    this.exitFullscreen();\n    this.unlockOrientation();\n\n    // remove listeners\n    this._unbindEvents();\n\n    // destroy components\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    if (this.notification) {\n      this.notification.destroy();\n    }\n    if (this.hud) {\n      this.hud.destroy();\n    }\n    if (this.loader) {\n      this.loader.destroy();\n    }\n    if (this.navbar) {\n      this.navbar.destroy();\n    }\n    if (this.panel) {\n      this.panel.destroy();\n    }\n    if (this.overlay) {\n      this.overlay.destroy();\n    }\n\n    // destroy ThreeJS view\n    if (this.scene) {\n      PSVUtils.cleanTHREEScene(this.scene);\n    }\n\n    // remove container\n    if (this.canvas_container) {\n      this.container.removeChild(this.canvas_container);\n    }\n    this.parent.removeChild(this.container);\n\n    delete this.parent.photoSphereViewer;\n\n    // clean references\n    delete this.parent;\n    delete this.container;\n    delete this.loader;\n    delete this.navbar;\n    delete this.hud;\n    delete this.panel;\n    delete this.tooltip;\n    delete this.notification;\n    delete this.overlay;\n    delete this.canvas_container;\n    delete this.renderer;\n    delete this.noSleep;\n    delete this.scene;\n    delete this.camera;\n    delete this.mesh;\n    delete this.raycaster;\n    delete this.passes;\n    delete this.config;\n    this.prop.cache.length = 0;\n  };\n\n  /**\n   * @summary Loads a new panorama file\n   * @description Loads a new panorama file, optionally changing the camera position and activating the transition animation.<br>\n   * If the \"position\" is not defined, the camera will not move and the ongoing animation will continue<br>\n   * \"config.transition\" must be configured for \"transition\" to be taken in account\n   * @param {string|string[]} path - URL of the new panorama file\n   * @param {PhotoSphereViewer.PanoramaOptions} [options]\n   * @param {boolean} [transition=false]\n   * @returns {Promise}\n   * @throws {PSVError} when another panorama is already loading\n   */\n  PhotoSphereViewer.prototype.setPanorama = function(path, options, transition) {\n    if (this.prop.loading_promise !== null) {\n      throw new PSVError('Loading already in progress');\n    }\n\n    if (typeof options === 'boolean') {\n      transition = options;\n      options = undefined;\n    }\n    if (!options && !this.scene) {\n      options = {\n        longitude: this.config.default_long,\n        latitude: this.config.default_lat,\n        zoom: this.config.default_zoom_lvl,\n        sphere_correction: this.config.sphere_correction\n      };\n    }\n    else if (!options) {\n      options = {};\n    }\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = 'zoom' in options;\n\n    if (positionProvided || zoomProvided) {\n      this._stopAll();\n    }\n\n    this.config.panorama = path;\n\n    var done = function() {\n      this.loader.hide();\n      this.canvas_container.style.opacity = 1;\n\n      this.prop.loading_promise = null;\n    }.bind(this);\n\n    if (!transition || !this.config.transition || !this.scene) {\n      this.loader.show();\n      if (this.canvas_container) {\n        this.canvas_container.style.opacity = 0;\n      }\n\n      this.prop.loading_promise = this._loadTexture(this.config.panorama)\n        .then(function(texture) {\n          this._setTexture(texture);\n\n          if (options.sphere_correction && !this.prop.isCubemap) {\n            this._setSphereCorrection(this.mesh, options.sphere_correction);\n          }\n\n          if (positionProvided) {\n            this.rotate(options);\n          }\n          if (zoomProvided) {\n            this.zoom(options.zoom);\n          }\n        }.bind(this))\n        .then(done, done);\n    }\n    else {\n      if (this.config.transition.loader) {\n        this.loader.show();\n      }\n\n      this.prop.loading_promise = this._loadTexture(this.config.panorama)\n        .then(function(texture) {\n          this.loader.hide();\n\n          return this._transition(texture, options);\n        }.bind(this))\n        .then(done, done);\n    }\n\n    return this.prop.loading_promise;\n  };\n\n  /**\n   * @summary Starts the automatic rotation\n   * @fires PhotoSphereViewer.autorotate\n   */\n  PhotoSphereViewer.prototype.startAutorotate = function() {\n    this._stopAll();\n\n    this.prop.autorotate_cb = this._getAutorotateUpdate();\n    this.on('before-render', this.prop.autorotate_cb);\n\n    /**\n     * @event autorotate\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the automatic rotation is enabled/disabled\n     * @param {boolean} enabled\n     */\n    this.trigger('autorotate', true);\n  };\n\n  /**\n   * @summary Create an animation callback for the automatic rotation\n   * @returns {function}\n   * @private\n   */\n  PhotoSphereViewer.prototype._getAutorotateUpdate = function() {\n    var last;\n    var elapsed;\n\n    return function(timestamp) {\n      elapsed = last === undefined ? 0 : timestamp - last;\n      last = timestamp;\n\n      this.rotate({\n        longitude: this.prop.position.longitude + this.config.anim_speed * elapsed / 1000,\n        latitude: this.prop.position.latitude - (this.prop.position.latitude - this.config.anim_lat) / 200\n      });\n    };\n  };\n\n  /**\n   * @summary Stops the automatic rotation\n   * @fires PhotoSphereViewer.autorotate\n   */\n  PhotoSphereViewer.prototype.stopAutorotate = function() {\n    if (this.prop.start_timeout) {\n      window.clearTimeout(this.prop.start_timeout);\n      this.prop.start_timeout = null;\n    }\n\n    if (this.isAutorotateEnabled()) {\n      this.off('before-render', this.prop.autorotate_cb);\n      this.prop.autorotate_cb = null;\n\n      this.trigger('autorotate', false);\n    }\n  };\n\n  /**\n   * @summary Starts or stops the automatic rotation\n   */\n  PhotoSphereViewer.prototype.toggleAutorotate = function() {\n    if (this.isAutorotateEnabled()) {\n      this.stopAutorotate();\n    }\n    else {\n      this.startAutorotate();\n    }\n  };\n\n  /**\n   * @summary Enables the gyroscope navigation if available\n   * @fires PhotoSphereViewer.gyroscope-updated\n   * @throws {PSVError} if DeviceOrientationControls.js is missing\n   */\n  PhotoSphereViewer.prototype.startGyroscopeControl = function() {\n    if (PSVUtils.checkTHREE('DeviceOrientationControls')) {\n      return PhotoSphereViewer.SYSTEM.deviceOrientationSupported.then(function(supported) {\n        if (supported) {\n          this._stopAll();\n\n          this.doControls = new THREE.DeviceOrientationControls(this.camera);\n\n          // compute the alpha offset to keep the current orientation\n          this.doControls.alphaOffset = this.prop.position.longitude;\n          this.doControls.update();\n\n          var direction = this.camera.getWorldDirection(new THREE.Vector3());\n          var sphericalCoords = this.vector3ToSphericalCoords(direction);\n\n          this.prop.gyro_alpha_offset = sphericalCoords.longitude;\n\n          this.prop.orientation_cb = this._getOrientationUpdate();\n          this.on('before-render', this.prop.orientation_cb);\n\n          /**\n           * @event gyroscope-updated\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the gyroscope mode is enabled/disabled\n           * @param {boolean} enabled\n           */\n          this.trigger('gyroscope-updated', true);\n        }\n        else {\n          console.warn('PhotoSphereViewer: gyroscope not available');\n          return Promise.reject();\n        }\n      }.bind(this));\n    }\n    else {\n      throw new PSVError('Missing Three.js components: DeviceOrientationControls. Get them from three.js-examples package.');\n    }\n  };\n\n  /**\n   * @summary Create an animation callback for the orientation controls\n   * @returns {function}\n   * @private\n   */\n  PhotoSphereViewer.prototype._getOrientationUpdate = function() {\n    return function() {\n      this.doControls.alphaOffset = this.prop.gyro_alpha_offset;\n      this.doControls.update();\n\n      this.camera.getWorldDirection(this.prop.direction);\n      this.prop.direction.multiplyScalar(PhotoSphereViewer.SPHERE_RADIUS);\n\n      var sphericalCoords = this.vector3ToSphericalCoords(this.prop.direction);\n      this.prop.position.longitude = sphericalCoords.longitude;\n      this.prop.position.latitude = sphericalCoords.latitude;\n      this.needsUpdate();\n    };\n  };\n\n  /**\n   * @summary Disables the gyroscope navigation\n   * @fires PhotoSphereViewer.gyroscope-updated\n   */\n  PhotoSphereViewer.prototype.stopGyroscopeControl = function() {\n    if (this.isGyroscopeEnabled()) {\n      this.off('before-render', this.prop.orientation_cb);\n      this.prop.orientation_cb = null;\n\n      this.doControls.disconnect();\n      this.doControls = null;\n\n      this.trigger('gyroscope-updated', false);\n    }\n  };\n\n  /**\n   * @summary Enables or disables the gyroscope navigation\n   */\n  PhotoSphereViewer.prototype.toggleGyroscopeControl = function() {\n    if (this.isGyroscopeEnabled()) {\n      this.stopGyroscopeControl();\n    }\n    else {\n      this.startGyroscopeControl();\n    }\n  };\n\n  /**\n   * @summary Enables NoSleep.js\n   */\n  PhotoSphereViewer.prototype.startNoSleep = function() {\n    if (!('NoSleep' in window)) {\n      console.warn('PhotoSphereViewer: NoSleep is not available');\n      return;\n    }\n\n    if (!this.noSleep) {\n      this.noSleep = new NoSleep();\n    }\n\n    this.noSleep.enable();\n  };\n\n  /**\n   * @summary Disables NoSleep.js\n   */\n  PhotoSphereViewer.prototype.stopNoSleep = function() {\n    if (this.noSleep) {\n      this.noSleep.disable();\n    }\n  };\n\n  /**\n   * @summary Enables the stereo view\n   * @description\n   *  - enables NoSleep.js\n   *  - enables full screen\n   *  - starts gyroscope controle\n   *  - hides hud, navbar and panel\n   *  - instanciate StereoEffect\n   * @throws {PSVError} if StereoEffect.js is not available\n   */\n  PhotoSphereViewer.prototype.startStereoView = function() {\n    if (PSVUtils.checkTHREE('DeviceOrientationControls', 'StereoEffect')) {\n      // Need to be in the main event queue\n      this.startNoSleep();\n      this.enterFullscreen();\n      this.lockOrientation();\n\n      this.startGyroscopeControl().then(\n        function() {\n          this.stereoEffect = new THREE.StereoEffect(this.renderer);\n          this.needsUpdate();\n\n          this.hud.hide();\n          this.navbar.hide();\n          this.panel.hidePanel();\n\n          /**\n           * @event stereo-updated\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the stereo view is enabled/disabled\n           * @param {boolean} enabled\n           */\n          this.trigger('stereo-updated', true);\n\n          this.notification.showNotification({\n            content: this.config.lang.stereo_notification,\n            timeout: 3000\n          });\n        }.bind(this),\n        function() {\n          this.unlockOrientation();\n          this.exitFullscreen();\n          this.stopNoSleep();\n        }.bind(this)\n      );\n    }\n    else {\n      throw new PSVError('Missing Three.js components: StereoEffect, DeviceOrientationControls. Get them from three.js-examples package.');\n    }\n  };\n\n  /**\n   * @summary Disables the stereo view\n   */\n  PhotoSphereViewer.prototype.stopStereoView = function() {\n    if (this.isStereoEnabled()) {\n      this.stereoEffect = null;\n      this.needsUpdate();\n\n      this.hud.show();\n      this.navbar.show();\n\n      this.unlockOrientation();\n      this.exitFullscreen();\n      this.stopNoSleep();\n      this.stopGyroscopeControl();\n\n      this.trigger('stereo-updated', false);\n    }\n  };\n\n  /**\n   * @summary Tries to lock the device in landscape or display a message\n   */\n  PhotoSphereViewer.prototype.lockOrientation = function() {\n    var displayRotateMessageTimeout;\n\n    var displayRotateMessage = function() {\n      if (this.isStereoEnabled() && window.innerHeight > window.innerWidth) {\n        this.overlay.showOverlay({\n          image: PhotoSphereViewer.ICONS['mobile-rotate.svg'],\n          text: this.config.lang.please_rotate[0],\n          subtext: this.config.lang.please_rotate[1]\n        });\n      }\n\n      if (displayRotateMessageTimeout) {\n        window.clearTimeout(displayRotateMessageTimeout);\n      }\n    };\n\n    if (window.screen && window.screen.orientation) {\n      window.screen.orientation.lock('landscape').then(null, displayRotateMessage.bind(this));\n      displayRotateMessageTimeout = setTimeout(displayRotateMessage.bind(this), 500);\n    }\n    else {\n      displayRotateMessage.apply(this);\n    }\n  };\n\n  /**\n   * @summary Unlock the device orientation\n   */\n  PhotoSphereViewer.prototype.unlockOrientation = function() {\n    if (window.screen && window.screen.orientation) {\n      window.screen.orientation.unlock();\n    }\n    else {\n      this.overlay.hideOverlay();\n    }\n  };\n\n  /**\n   * @summary Enables or disables the stereo view\n   */\n  PhotoSphereViewer.prototype.toggleStereoView = function() {\n    if (this.isStereoEnabled()) {\n      this.stopStereoView();\n    }\n    else {\n      this.startStereoView();\n    }\n  };\n\n  /**\n   * @summary Rotates the view to specific longitude and latitude\n   * @param {PhotoSphereViewer.ExtendedPosition} position\n   * @param {boolean} [ignoreRange=false] - ignore longitude_range and latitude_range\n   * @fires PhotoSphereViewer._side-reached\n   * @fires PhotoSphereViewer.position-updated\n   */\n  PhotoSphereViewer.prototype.rotate = function(position, ignoreRange) {\n    this.cleanPosition(position);\n\n    if (!ignoreRange) {\n      /**\n       * @event _side-reached\n       * @memberof PhotoSphereViewer\n       * @param {string} side\n       * @private\n       */\n      this.applyRanges(position).forEach(\n        this.trigger.bind(this, '_side-reached')\n      );\n    }\n\n    this.prop.position.longitude = position.longitude;\n    this.prop.position.latitude = position.latitude;\n    this.needsUpdate();\n\n    /**\n     * @event position-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the view longitude and/or latitude changes\n     * @param {PhotoSphereViewer.Position} position\n     */\n    this.trigger('position-updated', this.getPosition());\n  };\n\n  /**\n   * @summary Rotates the view to specific longitude and latitude with a smooth animation\n   * @param {PhotoSphereViewer.AnimateOptions} options\n   * @param {string|int} [speed] - animation speed or duration (in milliseconds)\n   * @returns {PSVAnimation}\n   */\n  PhotoSphereViewer.prototype.animate = function(options, speed) {\n    this._stopAll();\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = 'zoom' in options;\n\n    var animProperties = {};\n    var duration;\n\n    // clean/filter position and compute duration\n    if (positionProvided) {\n      this.cleanPosition(options);\n      this.applyRanges(options);\n\n      var currentPosition = this.prop.position;\n      var dLongitude = Math.abs(options.longitude - currentPosition.longitude);\n      var dLatitude = Math.abs(options.latitude - currentPosition.latitude);\n\n      if (dLongitude >= PhotoSphereViewer.ANGLE_THRESHOLD || dLatitude >= PhotoSphereViewer.ANGLE_THRESHOLD) {\n        // longitude offset for shortest arc\n        var tOffset = PSVUtils.getShortestArc(this.prop.position.longitude, options.longitude);\n\n        animProperties.longitude = { start: currentPosition.longitude, end: currentPosition.longitude + tOffset };\n        animProperties.latitude = { start: currentPosition.latitude, end: options.latitude };\n\n        duration = this.speedToDuration(speed, PSVUtils.getAngle(currentPosition, options));\n      }\n    }\n\n    // clean/filter zoom and compute duration\n    if (zoomProvided) {\n      var dZoom = Math.abs(options.zoom - this.prop.zoom_lvl);\n\n      if (dZoom >= 1) {\n        animProperties.zoom = { start: this.prop.zoom_lvl, end: options.zoom };\n\n        if (!duration) {\n          // if animating zoom only and a speed is given, use an arbitrary PI/2 to compute the duration\n          duration = this.speedToDuration(speed, Math.PI / 4 * dZoom / 100);\n        }\n      }\n    }\n\n    // if no animation needed\n    if (!duration) {\n      if (positionProvided) {\n        this.rotate(options);\n      }\n      if (zoomProvided) {\n        this.zoom(options.zoom);\n      }\n\n      return PSVAnimation.resolve();\n    }\n\n    this.prop.animation_promise = new PSVAnimation({\n      properties: animProperties,\n      duration: duration,\n      easing: 'inOutSine',\n      onTick: function(properties) {\n        if (positionProvided) {\n          this.rotate(properties, true);\n        }\n        if (zoomProvided) {\n          this.zoom(properties.zoom);\n        }\n      }.bind(this)\n    });\n\n    return this.prop.animation_promise;\n  };\n\n  /**\n   * @summary Stops the ongoing animation\n   * @description The return value is a Promise because the is no guaranty the animation can be stopped synchronously.\n   * @returns {Promise} Resolved when the animation has ben cancelled\n   */\n  PhotoSphereViewer.prototype.stopAnimation = function() {\n    if (this.prop.animation_promise) {\n      return new Promise(function(resolve) {\n        this.prop.animation_promise.finally(resolve);\n        this.prop.animation_promise.cancel();\n        this.prop.animation_promise = null;\n      }.bind(this));\n    }\n    else {\n      return Promise.resolve();\n    }\n  };\n\n  /**\n   * @summary Zooms to a specific level between `max_fov` and `min_fov`\n   * @param {int} level - new zoom level from 0 to 100\n   * @fires PhotoSphereViewer.zoom-updated\n   */\n  PhotoSphereViewer.prototype.zoom = function(level) {\n    this.prop.zoom_lvl = PSVUtils.bound(level, 0, 100);\n    this.prop.vFov = this.config.max_fov + (this.prop.zoom_lvl / 100) * (this.config.min_fov - this.config.max_fov);\n    this.prop.hFov = THREE.Math.radToDeg(2 * Math.atan(Math.tan(THREE.Math.degToRad(this.prop.vFov) / 2) * this.prop.aspect));\n    this.needsUpdate();\n\n    /**\n     * @event zoom-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the zoom level changes\n     * @param {int} zoomLevel\n     */\n    this.trigger('zoom-updated', this.getZoomLevel());\n  };\n\n  /**\n   * @summary Increases the zoom level by 1\n   */\n  PhotoSphereViewer.prototype.zoomIn = function() {\n    if (this.prop.zoom_lvl < 100) {\n      this.zoom(this.prop.zoom_lvl + this.config.zoom_speed);\n    }\n  };\n\n  /**\n   * @summary Decreases the zoom level by 1\n   */\n  PhotoSphereViewer.prototype.zoomOut = function() {\n    if (this.prop.zoom_lvl > 0) {\n      this.zoom(this.prop.zoom_lvl - this.config.zoom_speed);\n    }\n  };\n\n  /**\n   * @summary Resizes the viewer\n   * @param {PhotoSphereViewer.CssSize} size\n   */\n  PhotoSphereViewer.prototype.resize = function(size) {\n    if (size.width) {\n      this.container.style.width = size.width;\n    }\n    if (size.height) {\n      this.container.style.height = size.height;\n    }\n\n    this._onResize();\n  };\n\n  PhotoSphereViewer.prototype.enterFullscreen = function() {\n    PSVUtils.requestFullscreen(this.container);\n  };\n\n  PhotoSphereViewer.prototype.exitFullscreen = function() {\n    if (this.isFullscreenEnabled()) {\n      PSVUtils.exitFullscreen();\n    }\n  };\n\n  /**\n   * @summary Enters or exits the fullscreen mode\n   */\n  PhotoSphereViewer.prototype.toggleFullscreen = function() {\n    if (!this.isFullscreenEnabled()) {\n      this.enterFullscreen();\n    }\n    else {\n      this.exitFullscreen();\n    }\n  };\n\n  /**\n   * @summary Enables the keyboard controls (done automatically when entering fullscreen)\n   */\n  PhotoSphereViewer.prototype.startKeyboardControl = function() {\n    window.addEventListener('keydown', this);\n  };\n\n  /**\n   * @summary Disables the keyboard controls (done automatically when exiting fullscreen)\n   */\n  PhotoSphereViewer.prototype.stopKeyboardControl = function() {\n    window.removeEventListener('keydown', this);\n  };\n\n  /**\n   * @summary Preload a panorama file without displaying it\n   * @param {string} panorama\n   * @returns {Promise}\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.preloadPanorama = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot preload panorama, cache_texture is disabled');\n    }\n\n    return this._loadTexture(panorama);\n  };\n\n  /**\n   * @summary Removes a panorama from the cache or clears the entire cache\n   * @param {string} [panorama]\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.clearPanoramaCache = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot clear cache, cache_texture is disabled');\n    }\n\n    if (panorama) {\n      for (var i = 0, l = this.prop.cache.length; i < l; i++) {\n        if (this.prop.cache[i].panorama === panorama) {\n          this.prop.cache.splice(i, 1);\n          break;\n        }\n      }\n    }\n    else {\n      this.prop.cache.length = 0;\n    }\n  };\n\n  /**\n   * @summary Retrieves the cache for a panorama\n   * @param {string} panorama\n   * @returns {PhotoSphereViewer.CacheItem}\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.getPanoramaCache = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot query cache, cache_texture is disabled');\n    }\n\n    return this.prop.cache.filter(function(cache) {\n      return cache.panorama === panorama;\n    }).shift();\n  };\n\n\n  /**\n   * @summary exposes {@link PSVError}\n   * @memberof PhotoSphereViewer\n   * @readonly\n   */\n  PhotoSphereViewer.Error = PSVError;\n\n\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/main',[\r\n\t\"./PhotoSphereViewer\"\r\n],function(PhotoSphereViewer){\r\n\treturn PhotoSphereViewer;\r\n});\ndefine('skylark-sphere', ['skylark-sphere/main'], function (main) { return main; });\n\n"]}