{"version":3,"sources":["skylark-sphere.js"],"names":[],"mappingsfile":"../skylark-sphere.js","sourcesContent":["define('skylark-sphere/_psv/ctoc',[\r\n\t\"skylark-langx/Emitter\",\r\n],function(\r\n  Emitter\r\n){\r\n  \"use strict\";\r\n  /**\r\n   * Viewer class\r\n   * @param {Object} options - see {@link http://photo-sphere-viewer.js.org/#options}\r\n   * @constructor\r\n   * @fires PhotoSphereViewer.ready\r\n   * @throws {PSVError} when the configuration is incorrect\r\n   */\r\n  var PhotoSphereViewer = Emitter.inherit({\r\n  });\r\n\r\n  PhotoSphereViewer.prototype.off = function(event,f) {\r\n    return  Emitter.prototype.off.call(this,event,f[\"$$\" + event] || f);    \r\n  };\r\n\r\n  PhotoSphereViewer.prototype.on = function(event,f) {\r\n      if (typeof f === 'object') {\r\n\r\n        return Emitter.prototype.on.call(this,event,f[\"$$\" + event] = function(e){\r\n          e.args = Array.prototype.slice.call(arguments,1);\r\n          return f.handleEvent(e);\r\n        });\r\n     } else {\r\n        return Emitter.prototype.on.call(this,event,f[\"$$\" + event] = function(e,arg1,arg2,arg3) {\r\n          return f.call(this,arg1,arg2,arg3);\r\n        },this);\r\n     }\r\n\r\n  };\r\n\r\n  PhotoSphereViewer.prototype.one = function(event,f) {\r\n    if (typeof f === 'object') {\r\n\r\n        return Emitter.prototype.on.call(this,event,\"\",null,f[\"$$\" + event] = function(e){\r\n          e.args = Array.prototype.slice.call(arguments,1);\r\n          return f.handleEvent(e);\r\n        },this,true);\r\n     } else {\r\n        return Emitter.prototype.on.call(this,event,\"\",null,f,this,true);\r\n     }\r\n\r\n  };\r\n\r\n\r\n  return PhotoSphereViewer;\r\n\t\r\n});\ndefine('skylark-sphere/PSVError',[],function(){\n\t\"use strict\";\n\t/**\n\t * Custom error used in the lib\n\t * @param {string} message\n\t * @constructor\n\t */\n\tfunction PSVError(message) {\n\t  this.message = message;\n\n\t  // Use V8's native method if available, otherwise fallback\n\t  if ('captureStackTrace' in Error) {\n\t    Error.captureStackTrace(this, PSVError);\n\t  }\n\t  else {\n\t    this.stack = (new Error()).stack;\n\t  }\n\t}\n\n\tPSVError.prototype = Object.create(Error.prototype);\n\tPSVError.prototype.name = 'PSVError';\n\tPSVError.prototype.constructor = PSVError;\n\n\n\treturn PSVError;\n});\n\ndefine('skylark-threejs-ex/controls/DeviceOrientationControls',[\r\n    \"skylark-threejs\"\r\n], function (THREE) {\r\n    'use strict';\r\n    var DeviceOrientationControls = function (object) {\r\n        var scope = this;\r\n        this.object = object;\r\n        this.object.rotation.reorder('YXZ');\r\n        this.enabled = true;\r\n        this.deviceOrientation = {};\r\n        this.screenOrientation = 0;\r\n        this.alphaOffset = 0;\r\n        var onDeviceOrientationChangeEvent = function (event) {\r\n            scope.deviceOrientation = event;\r\n        };\r\n        var onScreenOrientationChangeEvent = function () {\r\n            scope.screenOrientation = window.orientation || 0;\r\n        };\r\n        var setObjectQuaternion = function () {\r\n            var zee = new THREE.Vector3(0, 0, 1);\r\n            var euler = new THREE.Euler();\r\n            var q0 = new THREE.Quaternion();\r\n            var q1 = new THREE.Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\r\n            return function (quaternion, alpha, beta, gamma, orient) {\r\n                euler.set(beta, alpha, -gamma, 'YXZ');\r\n                quaternion.setFromEuler(euler);\r\n                quaternion.multiply(q1);\r\n                quaternion.multiply(q0.setFromAxisAngle(zee, -orient));\r\n            };\r\n        }();\r\n        this.connect = function () {\r\n            onScreenOrientationChangeEvent();\r\n            if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\r\n                window.DeviceOrientationEvent.requestPermission().then(function (response) {\r\n                    if (response == 'granted') {\r\n                        window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\r\n                        window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\r\n                });\r\n            } else {\r\n                window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\r\n                window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\r\n            }\r\n            scope.enabled = true;\r\n        };\r\n        this.disconnect = function () {\r\n            window.removeEventListener('orientationchange', onScreenOrientationChangeEvent, false);\r\n            window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\r\n            scope.enabled = false;\r\n        };\r\n        this.update = function () {\r\n            if (scope.enabled === false)\r\n                return;\r\n            var device = scope.deviceOrientation;\r\n            if (device) {\r\n                var alpha = device.alpha ? THREE.MathUtils.degToRad(device.alpha) + scope.alphaOffset : 0;\r\n                var beta = device.beta ? THREE.MathUtils.degToRad(device.beta) : 0;\r\n                var gamma = device.gamma ? THREE.MathUtils.degToRad(device.gamma) : 0;\r\n                var orient = scope.screenOrientation ? THREE.MathUtils.degToRad(scope.screenOrientation) : 0;\r\n                setObjectQuaternion(scope.object.quaternion, alpha, beta, gamma, orient);\r\n            }\r\n        };\r\n        this.dispose = function () {\r\n            scope.disconnect();\r\n        };\r\n        this.connect();\r\n    };\r\n    return DeviceOrientationControls;\r\n});\ndefine('skylark-threejs-ex/effects/StereoEffect',[\r\n    \"skylark-threejs\"\r\n], function (THREE) {\r\n    'use strict';\r\n    var StereoEffect = function (renderer) {\r\n        var _stereo = new THREE.StereoCamera();\r\n        _stereo.aspect = 0.5;\r\n        var size = new THREE.Vector2();\r\n        this.setEyeSeparation = function (eyeSep) {\r\n            _stereo.eyeSep = eyeSep;\r\n        };\r\n        this.setSize = function (width, height) {\r\n            renderer.setSize(width, height);\r\n        };\r\n        this.render = function (scene, camera) {\r\n            scene.updateMatrixWorld();\r\n            if (camera.parent === null)\r\n                camera.updateMatrixWorld();\r\n            _stereo.update(camera);\r\n            renderer.getSize(size);\r\n            if (renderer.autoClear)\r\n                renderer.clear();\r\n            renderer.setScissorTest(true);\r\n            renderer.setScissor(0, 0, size.width / 2, size.height);\r\n            renderer.setViewport(0, 0, size.width / 2, size.height);\r\n            renderer.render(scene, _stereo.cameraL);\r\n            renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);\r\n            renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);\r\n            renderer.render(scene, _stereo.cameraR);\r\n            renderer.setScissorTest(false);\r\n        };\r\n    };\r\n\r\n    return StereoEffect;\r\n});\ndefine('skylark-sphere/PSVUtils',[\n  \"skylark-langx-types\",\n  \"skylark-langx-objects\",\n  \"skylark-langx-strings\",\n  \"skylark-langx-funcs\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-styler\",\n  \"skylark-domx-finder\",\n  \"skylark-devices-points/mouse\",\n  \"skylark-devices-points/touch\",\n  \"skylark-devices-orientation\",\n  \"skylark-devices-webgl\",\n  \"skylark-threejs\",\n  \"skylark-threejs-ex/controls/DeviceOrientationControls\",\n  \"skylark-threejs-ex/effects/StereoEffect\",\n  \"./_psv/ctoc\"\n],function(\n  types,\n  objects,\n  strings,\n  funcs,\n  noder,\n  styler,\n  finder,\n  mouse,\n  touch,\n  orientation,\n  webgl,\n  THREE,\n  DeviceOrientationControls,\n  StereoEffect,\n  PhotoSphereViewer\n){\n  \"use strict\";\n  THREE.DeviceOrientationControls = DeviceOrientationControls;\n  THREE.StereoEffect = StereoEffect;\n\n  /**\n   * Static utilities for PSV\n   * @namespace\n   */\n  var PSVUtils = {};\n\n  /**\n   * @summary exposes {@link PSVUtils}\n   * @member {object}\n   * @memberof PhotoSphereViewer\n   * @readonly\n   */\n  PhotoSphereViewer.Utils = PSVUtils;\n\n  /**\n   * @summary Short-Hand for PI*2\n   * @type {float}\n   * @readonly\n   */\n  PSVUtils.TwoPI = Math.PI * 2.0;\n\n  /**\n   * @summary Short-Hand for PI/2\n   * @type {float}\n   * @readonly\n   */\n  PSVUtils.HalfPI = Math.PI / 2.0;\n\n  /**\n   * @summary Namespace for SVG creation\n   * @type {string}\n   * @readonly\n   */\n  PSVUtils.svgNS = 'http://www.w3.org/2000/svg';\n\n  /**\n   * @summary Checks if some three.js components are loaded\n   * @param {...string} components\n   * @returns {boolean}\n   */\n  PSVUtils.checkTHREE = function(components) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      if (!(arguments[i] in THREE)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * @summary Detects if canvas is supported\n   * @returns {boolean}\n   */\n  PSVUtils.isCanvasSupported = function() {\n    var canvas = document.createElement('canvas');\n    return !!(canvas.getContext && canvas.getContext('2d'));\n  };\n\n  /**\n   * @summary Tries to return a canvas webgl context\n   * @returns {WebGLRenderingContext}\n   */\n  PSVUtils.getWebGLCtx = webgl.getWebGLCtx;\n\n  /**\n   * @summary Detects if WebGL is supported\n   * @returns {boolean}\n   */\n  PSVUtils.isWebGLSupported = webgl.isWebGLSupported;\n\n  /**\n   * @summary Detects if device orientation is supported\n   * @description We can only be sure device orientation is supported once received an event with coherent data\n   * @returns {Promise<boolean>}\n   */\n  PSVUtils.isDeviceOrientationSupported = orientation.isDeviceOrientationSupported;\n  /**\n   * @summary Detects if the user is using a touch screen\n   * @returns {Promise<boolean>}\n   */\n  PSVUtils.isTouchEnabled = touch.isTouchEnabled;\n\n  /**\n   * @summary Gets max texture width in WebGL context\n   * @returns {int}\n   */\n  PSVUtils.getMaxTextureWidth = webgl.getMaxTextureWidth;\n\n  /**\n   * @summary Toggles a CSS class\n   * @param {HTMLElement|SVGElement} element\n   * @param {string} className\n   * @param {boolean} [active] - forced state\n   */\n  PSVUtils.toggleClass =styler.toggleClass;\n  /**\n   * @summary Adds one or several CSS classes to an element\n   * @param {HTMLElement} element\n   * @param {string} className\n   */\n  PSVUtils.addClasses = styler.addClass;\n\n  /**\n   * @summary Removes one or several CSS classes to an element\n   * @param {HTMLElement} element\n   * @param {string} className\n   */\n  PSVUtils.removeClasses =  styler.removeClass;\n  /**\n   * @summary Searches if an element has a particular parent at any level including itself\n   * @param {HTMLElement} el\n   * @param {HTMLElement} parent\n   * @returns {boolean}\n   */\n  PSVUtils.hasParent = noder.isChildOf;\n\n  /**\n   * @summary Gets the closest parent (can by itself)\n   * @param {HTMLElement|SVGElement} el\n   * @param {string} selector\n   * @returns {HTMLElement}\n   */\n  PSVUtils.getClosest = finder.closest;\n\n\n  /**\n   * @summary Gets the event name for mouse wheel\n   * @returns {string}\n   */\n  PSVUtils.mouseWheelEvent = mouse.mouseWheelEvent;\n  /**\n   * @summary Returns the key name of a KeyboardEvent\n   * @param {KeyboardEvent} evt\n   * @returns {string}\n   */\n  PSVUtils.getEventKey = function(evt) {\n    var key = evt.key || PSVUtils.getEventKey.KEYMAP[evt.keyCode || evt.which];\n\n    if (key && PSVUtils.getEventKey.MS_KEYMAP[key]) {\n      key = PSVUtils.getEventKey.MS_KEYMAP[key];\n    }\n\n    return key;\n  };\n\n  /**\n   * @summary Map between keyboard events `keyCode|which` and `key`\n   * @type {Object.<int, string>}\n   * @readonly\n   * @protected\n   */\n  PSVUtils.getEventKey.KEYMAP = {\n    13: 'Enter',\n    27: 'Escape',\n    32: ' ',\n    33: 'PageUp',\n    34: 'PageDown',\n    37: 'ArrowLeft',\n    38: 'ArrowUp',\n    39: 'ArrowRight',\n    40: 'ArrowDown',\n    46: 'Delete',\n    107: '+',\n    109: '-'\n  };\n\n  /**\n   * @summary Map for non standard keyboard events `key` for IE and Edge\n   * @see https://github.com/shvaikalesh/shim-keyboard-event-key\n   * @type {Object.<string, string>}\n   * @readonly\n   * @protected\n   */\n  PSVUtils.getEventKey.MS_KEYMAP = {\n    Add: '+',\n    Del: 'Delete',\n    Down: 'ArrowDown',\n    Esc: 'Escape',\n    Left: 'ArrowLeft',\n    Right: 'ArrowRight',\n    Spacebar: ' ',\n    Subtract: '-',\n    Up: 'ArrowUp'\n  };\n\n  /**\n   * @summary  Gets the event name for fullscreen\n   * @returns {string}\n   */\n  PSVUtils.fullscreenEvent = function() {\n    var map = {\n      'exitFullscreen': 'fullscreenchange',\n      'webkitExitFullscreen': 'webkitfullscreenchange',\n      'mozCancelFullScreen': 'mozfullscreenchange',\n      'msExitFullscreen': 'MSFullscreenChange'\n    };\n\n    for (var exit in map) {\n      if (map.hasOwnProperty(exit) && exit in document) {\n        return map[exit];\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @summary Ensures that a number is in a given interval\n   * @param {number} x\n   * @param {number} min\n   * @param {number} max\n   * @returns {number}\n   */\n  PSVUtils.bound = function(x, min, max) {\n    return Math.max(min, Math.min(max, x));\n  };\n\n  /**\n   * @summary Checks if a value is an integer\n   * @function\n   * @param {*} value\n   * @returns {boolean}\n   */\n  PSVUtils.isInteger = Number.isInteger || function(value) {\n      return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n    };\n\n  /**\n   * @summary Computes the sum of an array\n   * @param {number[]} array\n   * @returns {number}\n   */\n  PSVUtils.sum = function(array) {\n    return array.reduce(function(a, b) {\n      return a + b;\n    }, 0);\n  };\n\n  /**\n   * @summary Transforms a string to dash-case\n   * {@link https://github.com/shahata/dasherize}\n   * @param {string} str\n   * @returns {string}\n   */\n  PSVUtils.dasherize = strings.dasherize;\n\n  /**\n   * @summary Returns the value of a given attribute in the panorama metadata\n   * @param {string} data\n   * @param {string} attr\n   * @returns (string)\n   */\n  PSVUtils.getXMPValue = function(data, attr) {\n    var result;\n    // XMP data are stored in children\n    if ((result = data.match('<GPano:' + attr + '>(.*)</GPano:' + attr + '>')) !== null) {\n      return result[1];\n    }\n    // XMP data are stored in attributes\n    else if ((result = data.match('GPano:' + attr + '=\"(.*?)\"')) !== null) {\n      return result[1];\n    }\n    else {\n      return null;\n    }\n  };\n\n  /**\n   * @summary Detects if fullscreen is enabled\n   * @param {HTMLElement} elt\n   * @returns {boolean}\n   */\n  PSVUtils.isFullscreenEnabled = function(elt) {\n    return (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement) === elt;\n  };\n\n  /**\n   * @summary Enters fullscreen mode\n   * @param {HTMLElement} elt\n   */\n  PSVUtils.requestFullscreen = function(elt) {\n    (elt.requestFullscreen || elt.mozRequestFullScreen || elt.webkitRequestFullscreen || elt.msRequestFullscreen).call(elt);\n  };\n\n  /**\n   * @summary Exits fullscreen mode\n   */\n  PSVUtils.exitFullscreen = function() {\n    (document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen).call(document);\n  };\n\n  /**\n   * @summary Gets an element style\n   * @param {HTMLElement} elt\n   * @param {string} prop\n   * @returns {*}\n   */\n  PSVUtils.getStyle = styler.css;\n\n  /**\n   * @summary Compute the shortest offset between two longitudes\n   * @param {float} from\n   * @param {float} to\n   * @returns {float}\n   */\n  PSVUtils.getShortestArc = function(from, to) {\n    var tCandidates = [\n      0, // direct\n      PSVUtils.TwoPI, // clock-wise cross zero\n      -PSVUtils.TwoPI // counter-clock-wise cross zero\n    ];\n\n    return tCandidates.reduce(function(value, candidate) {\n      candidate = to - from + candidate;\n      return Math.abs(candidate) < Math.abs(value) ? candidate : value;\n    }, Infinity);\n  };\n\n  /**\n   * @summary Computes the angle between the current position and a target position\n   * @param {PhotoSphereViewer.Position} position1\n   * @param {PhotoSphereViewer.Position} position2\n   * @returns {number}\n   */\n  PSVUtils.getAngle = function(position1, position2) {\n    return Math.acos(\n      Math.cos(position1.latitude) *\n      Math.cos(position2.latitude) *\n      Math.cos(position1.longitude - position2.longitude) +\n      Math.sin(position1.latitude) *\n      Math.sin(position2.latitude)\n    );\n  };\n\n  /**\n   * @summary Translate CSS values like \"top center\" or \"10% 50%\" as top and left positions\n   * @description The implementation is as close as possible to the \"background-position\" specification\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/background-position}\n   * @param {string} value\n   * @returns {{top: float, left: float}}\n   */\n  PSVUtils.parsePosition = function(value) {\n    if (!value) {\n      return { top: 0.5, left: 0.5 };\n    }\n\n    if (typeof value === 'object') {\n      return value;\n    }\n\n    var tokens = value.toLocaleLowerCase().split(' ').slice(0, 2);\n\n    if (tokens.length === 1) {\n      if (PSVUtils.parsePosition.positions[tokens[0]] !== undefined) {\n        tokens = [tokens[0], 'center'];\n      }\n      else {\n        tokens = [tokens[0], tokens[0]];\n      }\n    }\n\n    var xFirst = tokens[1] !== 'left' && tokens[1] !== 'right' && tokens[0] !== 'top' && tokens[0] !== 'bottom';\n\n    tokens = tokens.map(function(token) {\n      return PSVUtils.parsePosition.positions[token] || token;\n    });\n\n    if (!xFirst) {\n      tokens.reverse();\n    }\n\n    var parsed = tokens.join(' ').match(/^([0-9.]+)% ([0-9.]+)%$/);\n\n    if (parsed) {\n      return {\n        left: parsed[1] / 100,\n        top: parsed[2] / 100\n      };\n    }\n    else {\n      return { top: 0.5, left: 0.5 };\n    }\n  };\n\n  PSVUtils.parsePosition.positions = { 'top': '0%', 'bottom': '100%', 'left': '0%', 'right': '100%', 'center': '50%' };\n\n  /**\n   * @summary Parses an speed\n   * @param {string} speed - The speed, in radians/degrees/revolutions per second/minute\n   * @returns {float} radians per second\n   * @throws {PSVError} when the speed cannot be parsed\n   */\n  PSVUtils.parseSpeed = function(speed) {\n    if (typeof speed === 'string') {\n      speed = speed.toString().trim();\n\n      // Speed extraction\n      var speed_value = parseFloat(speed.replace(/^(-?[0-9]+(?:\\.[0-9]*)?).*$/, '$1'));\n      var speed_unit = speed.replace(/^-?[0-9]+(?:\\.[0-9]*)?(.*)$/, '$1').trim();\n\n      // \"per minute\" -> \"per second\"\n      if (speed_unit.match(/(pm|per minute)$/)) {\n        speed_value /= 60;\n      }\n\n      // Which unit?\n      switch (speed_unit) {\n        // Degrees per minute / second\n        case 'dpm':\n        case 'degrees per minute':\n        case 'dps':\n        case 'degrees per second':\n          speed = THREE.Math.degToRad(speed_value);\n          break;\n\n        // Radians per minute / second\n        case 'radians per minute':\n        case 'radians per second':\n          speed = speed_value;\n          break;\n\n        // Revolutions per minute / second\n        case 'rpm':\n        case 'revolutions per minute':\n        case 'rps':\n        case 'revolutions per second':\n          speed = speed_value * PSVUtils.TwoPI;\n          break;\n\n        // Unknown unit\n        default:\n          throw new PSVError('unknown speed unit \"' + speed_unit + '\"');\n      }\n    }\n\n    return speed;\n  };\n\n  /**\n   * @summary Parses an angle value in radians or degrees and returns a normalized value in radians\n   * @param {string|number} angle - eg: 3.14, 3.14rad, 180deg\n   * @param {boolean} [zeroCenter=false] - normalize between -Pi/2 - Pi/2 instead of 0 - 2*Pi\n   * @param {boolean} [halfCircle=zeroCenter] - normalize between -Pi - Pi instead of -Pi/2 - Pi/2\n   * @returns {float}\n   * @throws {PSVError} when the angle cannot be parsed\n   */\n  PSVUtils.parseAngle = function(angle, zeroCenter, halfCircle) {\n    if (halfCircle === undefined) {\n      halfCircle = zeroCenter;\n    }\n\n    if (typeof angle === 'string') {\n      var match = angle.toLowerCase().trim().match(/^(-?[0-9]+(?:\\.[0-9]*)?)(.*)$/);\n\n      if (!match) {\n        throw new PSVError('unknown angle \"' + angle + '\"');\n      }\n\n      var value = parseFloat(match[1]);\n      var unit = match[2];\n\n      if (unit) {\n        switch (unit) {\n          case 'deg':\n          case 'degs':\n            angle = THREE.Math.degToRad(value);\n            break;\n          case 'rad':\n          case 'rads':\n            angle = value;\n            break;\n          default:\n            throw new PSVError('unknown angle unit \"' + unit + '\"');\n        }\n      }\n      else {\n        angle = value;\n      }\n    }\n\n    angle = (zeroCenter ? angle + Math.PI : angle) % PSVUtils.TwoPI;\n\n    if (angle < 0) {\n      angle = PSVUtils.TwoPI + angle;\n    }\n\n    return zeroCenter ? PSVUtils.bound(angle - Math.PI, -Math.PI / (halfCircle ? 2 : 1), Math.PI / (halfCircle ? 2 : 1)) : angle;\n  };\n\n  /**\n   * @summary Removes all children of a three.js scene and dispose all textures\n   * @param {THREE.Scene} scene\n   */\n  PSVUtils.cleanTHREEScene = function(scene) {\n    scene.children.forEach(function(item) {\n      if (item instanceof THREE.Mesh) {\n        if (item.geometry) {\n          item.geometry.dispose();\n          item.geometry = null;\n        }\n\n        if (item.material) {\n          if (item.material.materials) {\n            item.material.materials.forEach(function(material) {\n              if (material.map) {\n                material.map.dispose();\n                material.map = null;\n              }\n\n              material.dispose();\n            });\n\n            item.material.materials.length = 0;\n          }\n          else {\n            if (item.material.map) {\n              item.material.map.dispose();\n              item.material.map = null;\n            }\n\n            item.material.dispose();\n          }\n\n          item.material = null;\n        }\n      }\n    });\n    scene.children.length = 0;\n  };\n\n  /**\n   * @summary Returns a function, that, when invoked, will only be triggered at most once during a given window of time.\n   * @copyright underscore.js - modified by Clément Prévost {@link http://stackoverflow.com/a/27078401}\n   * @param {Function} func\n   * @param {int} wait\n   * @returns {Function}\n   */\n  PSVUtils.throttle = funcs.debounce;\n  /**\n   * @summary Test if an object is a plain object\n   * @description Test if an object is a plain object, i.e. is constructed\n   * by the built-in Object constructor and inherits directly from Object.prototype\n   * or null. Some built-in objects pass the test, e.g. Math which is a plain object\n   * and some host or exotic objects may pass also.\n   * {@link http://stackoverflow.com/a/5878101/1207670}\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  PSVUtils.isPlainObject =  types.isPlainObject;\n  /**\n   * @summary Merges the enumerable attributes of two objects\n   * @description Replaces arrays and alters the target object.\n   * @copyright Nicholas Fisher <nfisher110@gmail.com>\n   * @param {Object} target\n   * @param {Object} src\n   * @returns {Object} target\n   */\n  PSVUtils.deepmerge = function(target, src) {\n    \n    return objects.mixin(target,src,true);\n\n  };\n\n  /**\n   * @summary Clones an object\n   * @param {Object} src\n   * @returns {Object}\n   */\n  PSVUtils.clone = objects.clone;\n\n  /**\n   * @summary Normalize mousewheel values accross browsers\n   * @description From Facebook's Fixed Data Table\n   * {@link https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js}\n   * @copyright Facebook\n   * @param {MouseWheelEvent} event\n   * @returns {{spinX: number, spinY: number, pixelX: number, pixelY: number}}\n   */\n  PSVUtils.normalizeWheel = mouse.normalizeWheel;\n\n  /**\n   * @callback ForEach\n   * @memberOf PSVUtils\n   * @param {*} value\n   * @param {string} key\n   */\n\n  /**\n   * Loops over enumerable properties of an object\n   * @param {object} object\n   * @param {ForEach} callback\n   */\n  PSVUtils.forEach = function(object, callback) {\n    return objects.each(object,callback,true);\n  };\n\n  return PSVUtils;\n});\ndefine('skylark-sphere/PSVAnimation',[],function(){\n  \"use strict\";\n  /**\n   * @callback OnTick\n   * @memberOf PSVAnimation\n   * @param {Object[]} properties - current values\n   * @param {float} progress - 0 to 1\n   */\n\n  /**\n   * @summary Interpolation helper for animations\n   * @description\n   * Implements the Promise API with an additional \"cancel\" method.\n   * The promise is resolved when the animation is complete and rejected if the animation is cancelled.\n   * @param {Object} options\n   * @param {Object[]} options.properties\n   * @param {number} options.properties[].start\n   * @param {number} options.properties[].end\n   * @param {int} options.duration\n   * @param {int} [options.delay=0]\n   * @param {string} [options.easing='linear']\n   * @param {PSVAnimation.OnTick} options.onTick - called on each frame\n   * @constructor\n   */\n  function PSVAnimation(options) {\n    if (!(this instanceof PSVAnimation)) {\n      return new PSVAnimation(options);\n    }\n\n    this._cancelled = false;\n    this._resolved = false;\n\n    var self = this;\n\n    this._promise = new Promise(function(resolve, reject) {\n      self._resolve = resolve;\n      self._reject = reject;\n    });\n\n    if (options) {\n      if (!options.easing || typeof options.easing === 'string') {\n        options.easing = PSVAnimation.easings[options.easing || 'linear'];\n      }\n      this._start = null;\n      this._options = options;\n\n      if (options.delay) {\n        this._delayTimeout = window.setTimeout(function() {\n          this._delayTimeout = null;\n          window.requestAnimationFrame(this._run.bind(this));\n        }.bind(this), options.delay);\n      }\n      else {\n\n        window.requestAnimationFrame(this._run.bind(this));\n      }\n    }\n  }\n\n  /**\n   * @summary Collection of easing functions\n   * {@link https://gist.github.com/frederickk/6165768}\n   * @type {Object.<string, Function>}\n   */\n  // @formatter:off\n  // jscs:disable\n  /* jshint ignore:start */\n  PSVAnimation.easings = {\n    linear: function(t) { return t; },\n\n    inQuad: function(t) { return t*t; },\n    outQuad: function(t) { return t*(2-t); },\n    inOutQuad: function(t) { return t<.5 ? 2*t*t : -1+(4-2*t)*t; },\n\n    inCubic: function(t) { return t*t*t; },\n    outCubic: function(t) { return (--t)*t*t+1; },\n    inOutCubic: function(t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1; },\n\n    inQuart: function(t) { return t*t*t*t; },\n    outQuart: function(t) { return 1-(--t)*t*t*t; },\n    inOutQuart: function(t) { return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t; },\n\n    inQuint: function(t) { return t*t*t*t*t; },\n    outQuint: function(t) { return 1+(--t)*t*t*t*t; },\n    inOutQuint: function(t) { return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t; },\n\n    inSine: function(t) { return 1-Math.cos(t*(Math.PI/2)); },\n    outSine: function(t) { return Math.sin(t*(Math.PI/2)); },\n    inOutSine: function(t) { return .5-.5*Math.cos(Math.PI*t); },\n\n    inExpo: function(t) { return Math.pow(2, 10*(t-1)); },\n    outExpo: function(t) { return 1-Math.pow(2, -10*t); },\n    inOutExpo: function(t) { t=t*2-1; return t<0 ? .5*Math.pow(2, 10*t) : 1-.5*Math.pow(2, -10*t); },\n\n    inCirc: function(t) { return 1-Math.sqrt(1-t*t); },\n    outCirc: function(t) { t--; return Math.sqrt(1-t*t); },\n    inOutCirc: function(t) { t*=2; return t<1 ? .5-.5*Math.sqrt(1-t*t) : .5+.5*Math.sqrt(1-(t-=2)*t); }\n  };\n  /* jshint ignore:end */\n  // jscs:enable\n  // @formatter:on\n\n  /**\n   * @summary Main loop for the animation\n   * @param {int} timestamp\n   * @private\n   */\n  PSVAnimation.prototype._run = function(timestamp) {\n    // the animation has been cancelled\n    if (this._cancelled) {\n      return;\n    }\n\n    // first iteration\n    if (this._start === null) {\n      this._start = timestamp;\n    }\n\n    // compute progress\n    var progress = (timestamp - this._start) / this._options.duration;\n    var current = {};\n    var name;\n\n    if (progress < 1.0) {\n      // interpolate properties\n      for (name in this._options.properties) {\n        if (this._options.properties[name]) {\n          current[name] = this._options.properties[name].start + (this._options.properties[name].end - this._options.properties[name].start) * this._options.easing(progress);\n        }\n      }\n\n      this._options.onTick(current, progress);\n\n      window.requestAnimationFrame(this._run.bind(this));\n    }\n    else {\n      // call onTick one last time with final values\n      for (name in this._options.properties) {\n        if (this._options.properties[name]) {\n          current[name] = this._options.properties[name].end;\n        }\n      }\n\n      this._options.onTick(current, 1.0);\n\n      window.requestAnimationFrame(function() {\n        this._resolved = true;\n        this._resolve();\n      }.bind(this));\n    }\n  };\n\n  /**\n   * @summary Animation chaining\n   * @param {function} onFulfilled - Called when the animation is complete, can return a new animation\n   * @param {function} onRejected - Called when the animation is cancelled\n   * @returns {PSVAnimation}\n   */\n  PSVAnimation.prototype.then = function(onFulfilled, onRejected) {\n    var p = new PSVAnimation();\n\n    // Allow cancellation to climb up the promise chain\n    p._promise.then(null, this.cancel.bind(this));\n\n    this._promise.then(function() {\n      p._resolve(onFulfilled ? onFulfilled() : undefined);\n    }, function() {\n      p._reject(onRejected ? onRejected() : undefined);\n    });\n\n    return p;\n  };\n\n  /**\n   * @summary Alias to `.then(null, onRejected)`\n   * @param {function} onRejected - Called when the animation has been cancelled\n   * @returns {PSVAnimation}\n   */\n  PSVAnimation.prototype.catch = function(onRejected) {\n    return this.then(undefined, onRejected);\n  };\n\n  /**\n   * @summary Alias to `.then(onFinally, onFinally)`\n   * @param {function} onFinally - Called when the animation is either complete or cancelled\n   * @returns {PSVAnimation}\n   */\n  PSVAnimation.prototype.finally = function(onFinally) {\n    return this.then(onFinally, onFinally);\n  };\n\n  /**\n   * @summary Cancels the animation\n   */\n  PSVAnimation.prototype.cancel = function() {\n    if (!this._cancelled && !this._resolved) {\n      this._cancelled = true;\n      this._reject();\n\n      if (this._delayTimeout) {\n        window.cancelAnimationFrame(this._delayTimeout);\n        this._delayTimeout = null;\n      }\n    }\n  };\n\n  return PSVAnimation;\n});\n\ndefine('skylark-sphere/PSVMarker',[\n  \"./PSVError\",\n  \"./PSVAnimation\",\n  \"./PSVUtils\"\n],function(\n  PSVError,\n  PSVAnimation,\n  PSVUtils\n){\n  \"use strict\";\n  /**\n   * Object representing a marker\n   * @param {Object} properties - see {@link http://photo-sphere-viewer.js.org/markers.html#config} (merged with the object itself)\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @throws {PSVError} when the configuration is incorrect\n   */\n  function PSVMarker(properties, psv) {\n    if (!properties.id) {\n      throw new PSVError('missing marker id');\n    }\n\n    if (properties.image && (!properties.width || !properties.height)) {\n      throw new PSVError('missing marker width/height');\n    }\n\n    if (properties.image || properties.html) {\n      if ((!properties.hasOwnProperty('x') || !properties.hasOwnProperty('y')) && (!properties.hasOwnProperty('latitude') || !properties.hasOwnProperty('longitude'))) {\n        throw new PSVError('missing marker position, latitude/longitude or x/y');\n      }\n    }\n\n    /**\n     * @member {PhotoSphereViewer}\n     * @readonly\n     * @protected\n     */\n    this.psv = psv;\n\n    /**\n     * @member {boolean}\n     */\n    this.visible = true;\n\n    /**\n     * @member {boolean}\n     * @readonly\n     * @private\n     */\n    this._dynamicSize = false;\n\n    // private properties\n    var _id = properties.id;\n    var _type = PSVMarker.getType(properties, false);\n    var $el;\n\n    // readonly properties\n    Object.defineProperties(this, {\n      /**\n       * @memberof PSVMarker\n       * @type {string}\n       * @readonly\n       */\n      id: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return _id;\n        },\n        set: function() {\n        }\n      },\n      /**\n       * @memberof PSVMarker\n       * @type {string}\n       * @see PSVMarker.types\n       * @readonly\n       */\n      type: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return _type;\n        },\n        set: function() {\n        }\n      },\n      /**\n       * @memberof PSVMarker\n       * @type {HTMLDivElement|SVGElement}\n       * @readonly\n       */\n      $el: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return $el;\n        },\n        set: function() {\n        }\n      },\n      /**\n       * @summary Quick access to self value of key `type`\n       * @memberof PSVMarker\n       * @type {*}\n       * @private\n       */\n      _def: {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n          return this[_type];\n        },\n        set: function(value) {\n          this[_type] = value;\n        }\n      }\n    });\n\n    // create element\n    if (this.isNormal()) {\n      $el = document.createElement('div');\n    }\n    else if (this.isPolygon()) {\n      $el = document.createElementNS(PSVUtils.svgNS, 'polygon');\n    }\n    else if (this.isPolyline()) {\n      $el = document.createElementNS(PSVUtils.svgNS, 'polyline');\n    }\n    else {\n      $el = document.createElementNS(PSVUtils.svgNS, this.type);\n    }\n\n    $el.id = 'psv-marker-' + this.id;\n    $el.psvMarker = this;\n\n    this.update(properties);\n  }\n\n  /**\n   * @summary Types of markers\n   * @type {string[]}\n   * @readonly\n   */\n  PSVMarker.types = ['image', 'html', 'polygon_px', 'polygon_rad', 'polyline_px', 'polyline_rad', 'rect', 'circle', 'ellipse', 'path'];\n\n  /**\n   * @summary Determines the type of a marker by the available properties\n   * @param {object} properties\n   * @param {boolean} [allowNone=false]\n   * @returns {string}\n   * @throws {PSVError} when the marker's type cannot be found\n   */\n  PSVMarker.getType = function(properties, allowNone) {\n    var found = [];\n\n    PSVMarker.types.forEach(function(type) {\n      if (properties[type]) {\n        found.push(type);\n      }\n    });\n\n    if (found.length === 0 && !allowNone) {\n      throw new PSVError('missing marker content, either ' + PSVMarker.types.join(', '));\n    }\n    else if (found.length > 1) {\n      throw new PSVError('multiple marker content, either ' + PSVMarker.types.join(', '));\n    }\n\n    return found[0];\n  };\n\n  /**\n   * @summary Destroys the marker\n   */\n  PSVMarker.prototype.destroy = function() {\n    delete this.$el.psvMarker;\n  };\n\n  /**\n   * @summary Checks if it is a normal marker (image or html)\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isNormal = function() {\n    return this.type === 'image' || this.type === 'html';\n  };\n\n  /**\n   * @summary Checks if it is a polygon/polyline marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isPoly = function() {\n    return this.isPolygon() || this.isPolyline();\n  };\n\n  /**\n   * @summary Checks if it is a polygon marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isPolygon = function() {\n    return this.type === 'polygon_px' || this.type === 'polygon_rad';\n  };\n\n  /**\n   * @summary Checks if it is a polyline marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isPolyline = function() {\n    return this.type === 'polyline_px' || this.type === 'polyline_rad';\n  };\n\n  /**\n   * @summary Checks if it is an SVG marker\n   * @returns {boolean}\n   */\n  PSVMarker.prototype.isSvg = function() {\n    return this.type === 'rect' || this.type === 'circle' || this.type === 'ellipse' || this.type === 'path';\n  };\n\n  /**\n   * @summary Computes marker scale from zoom level\n   * @param {float} zoomLevel\n   * @returns {float}\n   */\n  PSVMarker.prototype.getScale = function(zoomLevel) {\n    if (Array.isArray(this.scale)) {\n      return this.scale[0] + (this.scale[1] - this.scale[0]) * PSVAnimation.easings.inQuad(zoomLevel / 100);\n    }\n    else if (typeof this.scale === 'function') {\n      return this.scale(zoomLevel);\n    }\n    else if (typeof this.scale === 'number') {\n      return this.scale * PSVAnimation.easings.inQuad(zoomLevel / 100);\n    }\n    else {\n      return 1;\n    }\n  };\n\n  /**\n   * @summary Updates the marker with new properties\n   * @param {object} [properties]\n   * @throws {PSVError} when trying to change the marker's type\n   */\n  PSVMarker.prototype.update = function(properties) {\n    // merge objects\n    if (properties && properties !== this) {\n      var newType = PSVMarker.getType(properties, true);\n\n      if (newType !== undefined && newType !== this.type) {\n        throw new PSVError('cannot change marker type');\n      }\n\n      PSVUtils.deepmerge(this, properties);\n    }\n\n    // reset CSS class\n    if (this.isNormal()) {\n      this.$el.setAttribute('class', 'psv-marker psv-marker--normal');\n    }\n    else {\n      this.$el.setAttribute('class', 'psv-marker psv-marker--svg');\n    }\n\n    // add CSS classes\n    if (this.className) {\n      PSVUtils.addClasses(this.$el, this.className);\n    }\n    if (this.tooltip) {\n      PSVUtils.addClasses(this.$el, 'has-tooltip');\n      if (typeof this.tooltip === 'string') {\n        this.tooltip = { content: this.tooltip };\n      }\n    }\n\n    // apply style\n    if (this.style) {\n      PSVUtils.deepmerge(this.$el.style, this.style);\n    }\n\n    // parse anchor\n    this.anchor = PSVUtils.parsePosition(this.anchor);\n\n    if (this.isNormal()) {\n      this._updateNormal();\n    }\n    else if (this.isPolygon()) {\n      this._updatePoly('polygon_rad', 'polygon_px');\n    }\n    else if (this.isPolyline()) {\n      this._updatePoly('polyline_rad', 'polyline_px');\n    }\n    else {\n      this._updateSvg();\n    }\n  };\n\n  /**\n   * @summary Updates a normal marker\n   * @private\n   */\n  PSVMarker.prototype._updateNormal = function() {\n    if (this.width && this.height) {\n      this.$el.style.width = this.width + 'px';\n      this.$el.style.height = this.height + 'px';\n      this._dynamicSize = false;\n    }\n    else {\n      this._dynamicSize = true;\n    }\n\n    if (this.image) {\n      this.$el.style.backgroundImage = 'url(' + this.image + ')';\n    }\n    else {\n      this.$el.innerHTML = this.html;\n    }\n\n    // set anchor\n    this.$el.style.transformOrigin = this.anchor.left * 100 + '% ' + this.anchor.top * 100 + '%';\n\n    // convert texture coordinates to spherical coordinates\n    this.psv.cleanPosition(this);\n\n    // compute x/y/z position\n    this.position3D = this.psv.sphericalCoordsToVector3(this);\n  };\n\n  /**\n   * @summary Updates an SVG marker\n   * @private\n   */\n  PSVMarker.prototype._updateSvg = function() {\n    this._dynamicSize = true;\n\n    // set content\n    switch (this.type) {\n      case 'rect':\n        if (typeof this._def === 'number') {\n          this._def = {\n            x: 0,\n            y: 0,\n            width: this._def,\n            height: this._def\n          };\n        }\n        else if (Array.isArray(this._def)) {\n          this._def = {\n            x: 0,\n            y: 0,\n            width: this._def[0],\n            height: this._def[1]\n          };\n        }\n        else {\n          this._def.x = this._def.y = 0;\n        }\n        break;\n\n      case 'circle':\n        if (typeof this._def === 'number') {\n          this._def = {\n            cx: this._def,\n            cy: this._def,\n            r: this._def\n          };\n        }\n        else if (Array.isArray(this._def)) {\n          this._def = {\n            cx: this._def[0],\n            cy: this._def[0],\n            r: this._def[0]\n          };\n        }\n        else {\n          this._def.cx = this._def.cy = this._def.r;\n        }\n        break;\n\n      case 'ellipse':\n        if (typeof this._def === 'number') {\n          this._def = {\n            cx: this._def,\n            cy: this._def,\n            rx: this._def,\n            ry: this._def\n          };\n        }\n        else if (Array.isArray(this._def)) {\n          this._def = {\n            cx: this._def[0],\n            cy: this._def[1],\n            rx: this._def[0],\n            ry: this._def[1]\n          };\n        }\n        else {\n          this._def.cx = this._def.rx;\n          this._def.cy = this._def.ry;\n        }\n        break;\n\n      case 'path':\n        if (typeof this._def === 'string') {\n          this._def = {\n            d: this._def\n          };\n        }\n        break;\n    }\n\n    Object.getOwnPropertyNames(this._def).forEach(function(prop) {\n      this.$el.setAttributeNS(null, prop, this._def[prop]);\n    }, this);\n\n    // set style\n    if (this.svgStyle) {\n      Object.getOwnPropertyNames(this.svgStyle).forEach(function(prop) {\n        this.$el.setAttributeNS(null, PSVUtils.dasherize(prop), this.svgStyle[prop]);\n      }, this);\n    }\n    else {\n      this.$el.setAttributeNS(null, 'fill', 'rgba(0,0,0,0.5)');\n    }\n\n    // convert texture coordinates to spherical coordinates\n    this.psv.cleanPosition(this);\n\n    // compute x/y/z position\n    this.position3D = this.psv.sphericalCoordsToVector3(this);\n  };\n\n  /**\n   * @summary Updates a polygon marker\n   * @param {'polygon_rad'|'polyline_rad'} key_rad\n   * @param {'polygon_px'|'polyline_px'} key_px\n   * @private\n   */\n  PSVMarker.prototype._updatePoly = function(key_rad, key_px) {\n    this._dynamicSize = true;\n\n    // set style\n    if (this.svgStyle) {\n      Object.getOwnPropertyNames(this.svgStyle).forEach(function(prop) {\n        this.$el.setAttributeNS(null, PSVUtils.dasherize(prop), this.svgStyle[prop]);\n      }, this);\n\n      if (this.isPolyline() && !this.svgStyle.fill) {\n        this.$el.setAttributeNS(null, 'fill', 'none');\n      }\n    }\n    else if (this.isPolygon()) {\n      this.$el.setAttributeNS(null, 'fill', 'rgba(0,0,0,0.5)');\n    }\n    else if (this.isPolyline()) {\n      this.$el.setAttributeNS(null, 'fill', 'none');\n      this.$el.setAttributeNS(null, 'stroke', 'rgb(0,0,0)');\n    }\n\n    // fold arrays: [1,2,3,4] => [[1,2],[3,4]]\n    [this[key_rad], this[key_px]].forEach(function(polygon) {\n      if (polygon && typeof polygon[0] !== 'object') {\n        for (var i = 0; i < polygon.length; i++) {\n          polygon.splice(i, 2, [polygon[i], polygon[i + 1]]);\n        }\n      }\n    });\n\n    // convert texture coordinates to spherical coordinates\n    if (this[key_px]) {\n      this[key_rad] = this[key_px].map(function(coord) {\n        var sphericalCoords = this.psv.textureCoordsToSphericalCoords({ x: coord[0], y: coord[1] });\n        return [sphericalCoords.longitude, sphericalCoords.latitude];\n      }, this);\n    }\n    // clean angles\n    else {\n      this[key_rad] = this[key_rad].map(function(coord) {\n        return [\n          PSVUtils.parseAngle(coord[0]),\n          PSVUtils.parseAngle(coord[1], true)\n        ];\n      });\n    }\n\n    // TODO : compute the center of the polygon\n    this.longitude = this[key_rad][0][0];\n    this.latitude = this[key_rad][0][1];\n\n    // compute x/y/z positions\n    this.positions3D = this[key_rad].map(function(coord) {\n      return this.psv.sphericalCoordsToVector3({ longitude: coord[0], latitude: coord[1] });\n    }, this);\n  };\n\n  return PSVMarker;\n});\ndefine('skylark-sphere/doT',[],function(){\r\n// doT.js\r\n// 2011-2014, Laura Doktorova, https://github.com/olado/doT\r\n// Licensed under the MIT license.\r\n\r\n\t\"use strict\";\r\n\r\n\tvar doT = {\r\n\t\tname: \"doT\",\r\n\t\tversion: \"1.1.1\",\r\n\t\ttemplateSettings: {\r\n\t\t\tevaluate:    /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\r\n\t\t\tinterpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\r\n\t\t\tencode:      /\\{\\{!([\\s\\S]+?)\\}\\}/g,\r\n\t\t\tuse:         /\\{\\{#([\\s\\S]+?)\\}\\}/g,\r\n\t\t\tuseParams:   /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\r\n\t\t\tdefine:      /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\r\n\t\t\tdefineParams:/^\\s*([\\w$]+):([\\s\\S]+)/,\r\n\t\t\tconditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\r\n\t\t\titerate:     /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\r\n\t\t\tvarname:\t\"it\",\r\n\t\t\tstrip:\t\ttrue,\r\n\t\t\tappend:\t\ttrue,\r\n\t\t\tselfcontained: false,\r\n\t\t\tdoNotSkipEncoded: false\r\n\t\t},\r\n\t\ttemplate: undefined, //fn, compile template\r\n\t\tcompile:  undefined, //fn, for express\r\n\t\tlog: true\r\n\t}, _globals;\r\n\r\n\tdoT.encodeHTMLSource = function(doNotSkipEncoded) {\r\n\t\tvar encodeHTMLRules = { \"&\": \"&#38;\", \"<\": \"&#60;\", \">\": \"&#62;\", '\"': \"&#34;\", \"'\": \"&#39;\", \"/\": \"&#47;\" },\r\n\t\t\tmatchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\r\n\t\treturn function(code) {\r\n\t\t\treturn code ? code.toString().replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : \"\";\r\n\t\t};\r\n\t};\r\n\r\n\t_globals = (function(){ return this || (0,eval)(\"this\"); }());\r\n\r\n\r\n\tvar startend = {\r\n\t\tappend: { start: \"'+(\",      end: \")+'\",      startencode: \"'+encodeHTML(\" },\r\n\t\tsplit:  { start: \"';out+=(\", end: \");out+='\", startencode: \"';out+=encodeHTML(\" }\r\n\t}, skip = /$^/;\r\n\r\n\tfunction resolveDefs(c, block, def) {\r\n\t\treturn ((typeof block === \"string\") ? block : block.toString())\r\n\t\t.replace(c.define || skip, function(m, code, assign, value) {\r\n\t\t\tif (code.indexOf(\"def.\") === 0) {\r\n\t\t\t\tcode = code.substring(4);\r\n\t\t\t}\r\n\t\t\tif (!(code in def)) {\r\n\t\t\t\tif (assign === \":\") {\r\n\t\t\t\t\tif (c.defineParams) value.replace(c.defineParams, function(m, param, v) {\r\n\t\t\t\t\t\tdef[code] = {arg: param, text: v};\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (!(code in def)) def[code]= value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnew Function(\"def\", \"def['\"+code+\"']=\" + value)(def);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t})\r\n\t\t.replace(c.use || skip, function(m, code) {\r\n\t\t\tif (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {\r\n\t\t\t\tif (def[d] && def[d].arg && param) {\r\n\t\t\t\t\tvar rw = (d+\":\"+param).replace(/'|\\\\/g, \"_\");\r\n\t\t\t\t\tdef.__exp = def.__exp || {};\r\n\t\t\t\t\tdef.__exp[rw] = def[d].text.replace(new RegExp(\"(^|[^\\\\w$])\" + def[d].arg + \"([^\\\\w$])\", \"g\"), \"$1\" + param + \"$2\");\r\n\t\t\t\t\treturn s + \"def.__exp['\"+rw+\"']\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar v = new Function(\"def\", \"return \" + code)(def);\r\n\t\t\treturn v ? resolveDefs(c, v, def) : v;\r\n\t\t});\r\n\t}\r\n\r\n\tfunction unescape(code) {\r\n\t\treturn code.replace(/\\\\('|\\\\)/g, \"$1\").replace(/[\\r\\t\\n]/g, \" \");\r\n\t}\r\n\r\n\tdoT.template = function(tmpl, c, def) {\r\n\t\tc = c || doT.templateSettings;\r\n\t\tvar cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,\r\n\t\t\tstr  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;\r\n\r\n\t\tstr = (\"var out='\" + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g,\" \")\r\n\t\t\t\t\t.replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g,\"\"): str)\r\n\t\t\t.replace(/'|\\\\/g, \"\\\\$&\")\r\n\t\t\t.replace(c.interpolate || skip, function(m, code) {\r\n\t\t\t\treturn cse.start + unescape(code) + cse.end;\r\n\t\t\t})\r\n\t\t\t.replace(c.encode || skip, function(m, code) {\r\n\t\t\t\tneedhtmlencode = true;\r\n\t\t\t\treturn cse.startencode + unescape(code) + cse.end;\r\n\t\t\t})\r\n\t\t\t.replace(c.conditional || skip, function(m, elsecase, code) {\r\n\t\t\t\treturn elsecase ?\r\n\t\t\t\t\t(code ? \"';}else if(\" + unescape(code) + \"){out+='\" : \"';}else{out+='\") :\r\n\t\t\t\t\t(code ? \"';if(\" + unescape(code) + \"){out+='\" : \"';}out+='\");\r\n\t\t\t})\r\n\t\t\t.replace(c.iterate || skip, function(m, iterate, vname, iname) {\r\n\t\t\t\tif (!iterate) return \"';} } out+='\";\r\n\t\t\t\tsid+=1; indv=iname || \"i\"+sid; iterate=unescape(iterate);\r\n\t\t\t\treturn \"';var arr\"+sid+\"=\"+iterate+\";if(arr\"+sid+\"){var \"+vname+\",\"+indv+\"=-1,l\"+sid+\"=arr\"+sid+\".length-1;while(\"+indv+\"<l\"+sid+\"){\"\r\n\t\t\t\t\t+vname+\"=arr\"+sid+\"[\"+indv+\"+=1];out+='\";\r\n\t\t\t})\r\n\t\t\t.replace(c.evaluate || skip, function(m, code) {\r\n\t\t\t\treturn \"';\" + unescape(code) + \"out+='\";\r\n\t\t\t})\r\n\t\t\t+ \"';return out;\")\r\n\t\t\t.replace(/\\n/g, \"\\\\n\").replace(/\\t/g, '\\\\t').replace(/\\r/g, \"\\\\r\")\r\n\t\t\t.replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, \"\");\r\n\t\t\t//.replace(/(\\s|;|\\}|^|\\{)out\\+=''\\+/g,'$1out+=');\r\n\r\n\t\tif (needhtmlencode) {\r\n\t\t\tif (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);\r\n\t\t\tstr = \"var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (\"\r\n\t\t\t\t+ doT.encodeHTMLSource.toString() + \"(\" + (c.doNotSkipEncoded || '') + \"));\"\r\n\t\t\t\t+ str;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn new Function(c.varname, str);\r\n\t\t} catch (e) {\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (typeof console !== \"undefined\") console.log(\"Could not create a template function: \" + str);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t};\r\n\r\n\tdoT.compile = function(tmpl, def) {\r\n\t\treturn doT.template(tmpl, null, def);\r\n\t};\r\n\r\n\treturn doT;\r\n});\ndefine('skylark-sphere/components/PSVComponent',[\n  \"../_psv/ctoc\"\n],function(\n  PhotoSphereViewer\n){\n  \"use strict\";\n  /**\n   * @module components\n   */\n\n  /**\n   * Base sub-component class\n   * @param {PhotoSphereViewer | module:components.PSVComponent} parent\n   * @constructor\n   * @memberof module:components\n   */\n  function PSVComponent(parent) {\n    /**\n     * @member {PhotoSphereViewer}\n     * @readonly\n     */\n    this.psv = parent instanceof PhotoSphereViewer ? parent : parent.psv;\n\n    /**\n     * @member {PhotoSphereViewer|module:components.PSVComponent}\n     * @readonly\n     */\n    this.parent = parent;\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     */\n    this.container = null;\n\n    /**\n     * @summary Visibility of the component\n     * @member {boolean}\n     * @readonly\n     */\n    this.visible = true;\n\n    // expose some methods to the viewer\n    if (this.constructor.publicMethods) {\n      this.constructor.publicMethods.forEach(function(method) {\n        this.psv[method] = this[method].bind(this);\n      }, this);\n    }\n  }\n\n  /**\n   * @summary CSS class added to the component's container\n   * @member {string}\n   * @readonly\n   */\n  PSVComponent.className = null;\n\n  /**\n   * @summary List of component's methods which are bound the the main viewer\n   * @member {string[]}\n   * @readonly\n   */\n  PSVComponent.publicMethods = [];\n\n  /**\n   * @summary Creates the component\n   * @protected\n   */\n  PSVComponent.prototype.create = function() {\n    this.container = document.createElement('div');\n\n    if (this.constructor.className) {\n      this.container.className = this.constructor.className;\n    }\n\n    this.parent.container.appendChild(this.container);\n  };\n\n  /**\n   * @summary Destroys the component\n   * @protected\n   */\n  PSVComponent.prototype.destroy = function() {\n    this.parent.container.removeChild(this.container);\n\n    if (this.constructor.publicMethods) {\n      this.constructor.publicMethods.forEach(function(method) {\n        delete this.psv[method];\n      }, this);\n    }\n\n    delete this.container;\n    delete this.psv;\n    delete this.parent;\n  };\n\n  /**\n   * @summary Hides the component\n   * @protected\n   */\n  PSVComponent.prototype.hide = function() {\n    this.container.style.display = 'none';\n    this.visible = false;\n  };\n\n  /**\n   * @summary Displays the component\n   * @protected\n   */\n  PSVComponent.prototype.show = function() {\n    this.container.style.display = '';\n    this.visible = true;\n  };\n\n  return PSVComponent;\n});\ndefine('skylark-sphere/components/PSVHUD',[\n  \"skylark-threejs\",\n  \"../_psv/ctoc\",\n  \"../PSVError\",\n  \"../PSVUtils\",\n  \"../PSVMarker\",\n  \"./PSVComponent\"\n],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVError,\n  PSVUtils,\n  PSVMarker,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * HUD class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVHUD(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @member {SVGElement}\n     * @readonly\n     */\n    this.svgContainer = null;\n\n    /**\n     * @summary All registered markers\n     * @member {Object.<string, PSVMarker>}\n     */\n    this.markers = {};\n\n    /**\n     * @summary Last selected marker\n     * @member {PSVMarker}\n     * @readonly\n     */\n    this.currentMarker = null;\n\n    /**\n     * @summary Marker under the cursor\n     * @member {PSVMarker}\n     * @readonly\n     */\n    this.hoveringMarker = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      panelOpened: false,\n      panelOpening: false,\n      markersButton: this.psv.navbar.getNavbarButton('markers', true)\n    };\n\n    this.create();\n  }\n\n  PSVHUD.prototype = Object.create(PSVComponent.prototype);\n  PSVHUD.prototype.constructor = PSVHUD;\n\n  PSVHUD.className = 'psv-hud';\n  PSVHUD.publicMethods = [\n    'addMarker',\n    'removeMarker',\n    'updateMarker',\n    'clearMarkers',\n    'getMarker',\n    'getCurrentMarker',\n    'gotoMarker',\n    'hideMarker',\n    'showMarker',\n    'toggleMarker',\n    'toggleMarkersList',\n    'showMarkersList',\n    'hideMarkersList'\n  ];\n\n  /**\n   * @override\n   */\n  PSVHUD.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.svgContainer = document.createElementNS(PSVUtils.svgNS, 'svg');\n    this.svgContainer.setAttribute('class', 'psv-hud-svg-container');\n    this.container.appendChild(this.svgContainer);\n\n    // Markers events via delegation\n    this.container.addEventListener('mouseenter', this, true);\n    this.container.addEventListener('mouseleave', this, true);\n    this.container.addEventListener('mousemove', this, true);\n\n    // Viewer events\n    this.psv.on('click', this);\n    this.psv.on('dblclick', this);\n    this.psv.on('render', this);\n    this.psv.on('open-panel', this);\n    this.psv.on('close-panel', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVHUD.prototype.destroy = function() {\n    this.clearMarkers(false);\n\n    this.container.removeEventListener('mouseenter', this);\n    this.container.removeEventListener('mouseleave', this);\n    this.container.removeEventListener('mousemove', this);\n\n    this.psv.off('click', this);\n    this.psv.off('dblclick', this);\n    this.psv.off('render', this);\n    this.psv.off('open-panel', this);\n    this.psv.off('close-panel', this);\n\n    delete this.svgContainer;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVHUD.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'mouseenter':  this._onMouseEnter(e);        break;\n      case 'mouseleave':  this._onMouseLeave(e);        break;\n      case 'mousemove':   this._onMouseMove(e);         break;\n      case 'click':       this._onClick(e.args[0], e, false); break;\n      case 'dblclick':    this._onClick(e.args[0], e, true);  break;\n      case 'render':      this.renderMarkers();         break;\n      case 'open-panel':  this._onPanelOpened();        break;\n      case 'close-panel': this._onPanelClosed();        break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Adds a new marker to viewer\n   * @param {Object} properties - see {@link http://photo-sphere-viewer.js.org/markers.html#config}\n   * @param {boolean} [render=true] - renders the marker immediately\n   * @returns {PSVMarker}\n   * @throws {PSVError} when the marker's id is missing or already exists\n   */\n  PSVHUD.prototype.addMarker = function(properties, render) {\n    if (!properties.id) {\n      throw new PSVError('missing marker id');\n    }\n\n    if (this.markers[properties.id]) {\n      throw new PSVError('marker \"' + properties.id + '\" already exists');\n    }\n\n    var marker = new PSVMarker(properties, this.psv);\n\n    if (marker.isNormal()) {\n      this.container.appendChild(marker.$el);\n    }\n    else {\n      this.svgContainer.appendChild(marker.$el);\n    }\n\n    this.markers[marker.id] = marker;\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n\n    return marker;\n  };\n\n  /**\n   * @summary Returns the internal marker object for a marker id\n   * @param {*} markerId\n   * @returns {PSVMarker}\n   * @throws {PSVError} when the marker cannot be found\n   */\n  PSVHUD.prototype.getMarker = function(markerId) {\n    var id = typeof markerId === 'object' ? markerId.id : markerId;\n\n    if (!this.markers[id]) {\n      throw new PSVError('cannot find marker \"' + id + '\"');\n    }\n\n    return this.markers[id];\n  };\n\n  /**\n   * @summary Returns the last marker selected by the user\n   * @returns {PSVMarker}\n   */\n  PSVHUD.prototype.getCurrentMarker = function() {\n    return this.currentMarker;\n  };\n\n  /**\n   * @summary Updates the existing marker with the same id\n   * @description Every property can be changed but you can't change its type (Eg: `image` to `html`).\n   * @param {Object|PSVMarker} properties\n   * @param {boolean} [render=true] - renders the marker immediately\n   * @returns {PSVMarker}\n   */\n  PSVHUD.prototype.updateMarker = function(properties, render) {\n    var marker = this.getMarker(properties);\n\n    marker.update(properties);\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n\n    return marker;\n  };\n\n  /**\n   * @summary Removes a marker from the viewer\n   * @param {*} marker\n   * @param {boolean} [render=true] - renders the marker immediately\n   */\n  PSVHUD.prototype.removeMarker = function(marker, render) {\n    marker = this.getMarker(marker);\n\n    if (marker.isNormal()) {\n      this.container.removeChild(marker.$el);\n    }\n    else {\n      this.svgContainer.removeChild(marker.$el);\n    }\n\n    if (this.hoveringMarker === marker) {\n      this.psv.tooltip.hideTooltip();\n    }\n\n    marker.destroy();\n    delete this.markers[marker.id];\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n  };\n\n  /**\n   * @summary Removes all markers\n   * @param {boolean} [render=true] - renders the markers immediately\n   */\n  PSVHUD.prototype.clearMarkers = function(render) {\n    Object.keys(this.markers).forEach(function(marker) {\n      this.removeMarker(marker, false);\n    }, this);\n\n    if (render !== false) {\n      this.renderMarkers();\n    }\n  };\n\n  /**\n   * @summary Rotate the view to face the marker\n   * @param {*} marker\n   * @param {string|int} [duration] - rotates smoothy, see {@link PhotoSphereViewer#animate}\n   * @fires module:components.PSVHUD.goto-marker-done\n   * @return {Promise}  A promise that will be resolved when the animation finishes\n   */\n  PSVHUD.prototype.gotoMarker = function(marker, duration) {\n    marker = this.getMarker(marker);\n\n    return this.psv.animate(marker, duration)\n      .then(function() {\n        /**\n         * @event goto-marker-done\n         * @memberof module:components.PSVHUD\n         * @summary Triggered when the animation to a marker is done\n         * @param {PSVMarker} marker\n         */\n        this.psv.trigger('goto-marker-done', marker);\n      }.bind(this));\n  };\n\n  /**\n   * @summary Hides a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.hideMarker = function(marker) {\n    this.getMarker(marker).visible = false;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Shows a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.showMarker = function(marker) {\n    this.getMarker(marker).visible = true;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Toggles a marker\n   * @param {*} marker\n   */\n  PSVHUD.prototype.toggleMarker = function(marker) {\n    this.getMarker(marker).visible ^= true;\n    this.renderMarkers();\n  };\n\n  /**\n   * @summary Toggles the visibility of markers list\n   */\n  PSVHUD.prototype.toggleMarkersList = function() {\n    if (this.prop.panelOpened) {\n      this.hideMarkersList();\n    }\n    else {\n      this.showMarkersList();\n    }\n  };\n\n  /**\n   * @summary Opens side panel with list of markers\n   * @fires module:components.PSVHUD.filter:render-markers-list\n   */\n  PSVHUD.prototype.showMarkersList = function() {\n    var markers = [];\n    PSVUtils.forEach(this.markers, function(marker) {\n      markers.push(marker);\n    });\n\n    /**\n     * @event filter:render-markers-list\n     * @memberof module:components.PSVHUD\n     * @summary Used to alter the list of markers displayed on the side-panel\n     * @param {PSVMarker[]} markers\n     * @returns {PSVMarker[]}\n     */\n    var html = this.psv.config.templates.markersList({\n      markers : markers,\n//      markers: this.psv.change('render-markers-list', markers),\n      config: this.psv.config\n    });\n\n    this.prop.panelOpening = true;\n    this.psv.panel.showPanel(html, true);\n\n    this.psv.panel.container.querySelector('.psv-markers-list').addEventListener('click', this._onClickItem.bind(this));\n  };\n\n  /**\n   * @summary Closes side panel if it contains the list of markers\n   */\n  PSVHUD.prototype.hideMarkersList = function() {\n    if (this.prop.panelOpened) {\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Updates the visibility and the position of all markers\n   */\n  PSVHUD.prototype.renderMarkers = function() {\n    if (!this.visible) {\n      return;\n    }\n\n    var rotation = !this.psv.isGyroscopeEnabled() ? 0 : THREE.Math.radToDeg(this.psv.camera.rotation.z);\n\n    PSVUtils.forEach(this.markers, function(marker) {\n      var isVisible = marker.visible;\n\n      if (isVisible && marker.isPoly()) {\n        var positions = this._getPolyPositions(marker);\n        isVisible = positions.length > (marker.isPolygon() ? 2 : 1);\n\n        if (isVisible) {\n          marker.position2D = this._getPolyDimensions(marker, positions);\n\n          var points = positions.map(function(pos) {\n            return pos.x + ',' + pos.y;\n          }).join(' ');\n\n          marker.$el.setAttributeNS(null, 'points', points);\n        }\n      }\n      else if (isVisible) {\n        var position = this._getMarkerPosition(marker);\n        isVisible = this._isMarkerVisible(marker, position);\n\n        if (isVisible) {\n          marker.position2D = position;\n\n          var scale = marker.getScale(this.psv.getZoomLevel());\n\n          if (marker.isSvg()) {\n            marker.$el.setAttributeNS(null, 'transform',\n              'translate(' + position.x + ', ' + position.y + ')' +\n              (scale !== 1 ? ' scale(' + scale + ', ' + scale + ')' : '') +\n              (!marker.lockRotation && rotation ? ' rotate(' + rotation + ')' : '')\n            );\n          }\n          else {\n            marker.$el.style.transform = 'translate3D(' + position.x + 'px, ' + position.y + 'px, 0px)' +\n              (scale !== 1 ? ' scale(' + scale + ', ' + scale + ')' : '') +\n              (!marker.lockRotation && rotation ? ' rotateZ(' + rotation + 'deg)' : '');\n          }\n        }\n      }\n\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--visible', isVisible);\n    }.bind(this));\n  };\n\n  /**\n   * @summary Determines if a point marker is visible<br>\n   * It tests if the point is in the general direction of the camera, then check if it's in the viewport\n   * @param {PSVMarker} marker\n   * @param {PhotoSphereViewer.Point} position\n   * @returns {boolean}\n   * @private\n   */\n  PSVHUD.prototype._isMarkerVisible = function(marker, position) {\n    return marker.position3D.dot(this.psv.prop.direction) > 0 &&\n      position.x + marker.width >= 0 &&\n      position.x - marker.width <= this.psv.prop.size.width &&\n      position.y + marker.height >= 0 &&\n      position.y - marker.height <= this.psv.prop.size.height;\n  };\n\n  /**\n   * @summary Computes HUD coordinates of a marker\n   * @param {PSVMarker} marker\n   * @returns {PhotoSphereViewer.Point}\n   * @private\n   */\n  PSVHUD.prototype._getMarkerPosition = function(marker) {\n    if (marker._dynamicSize) {\n      // make the marker visible to get it's size\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--transparent', true);\n      var transform = marker.$el.style.transform;\n      marker.$el.style.transform = null;\n\n      var rect = marker.$el.getBoundingClientRect();\n\n      marker.$el.style.transform = transform;\n      PSVUtils.toggleClass(marker.$el, 'psv-marker--transparent', false);\n\n      marker.width = rect.right - rect.left;\n      marker.height = rect.bottom - rect.top;\n    }\n\n    var position = this.psv.vector3ToViewerCoords(marker.position3D);\n\n    position.x -= marker.width * marker.anchor.left;\n    position.y -= marker.height * marker.anchor.top;\n\n    return position;\n  };\n\n  /**\n   * @summary Computes HUD coordinates of each point of a polygon/polyline<br>\n   * It handles points behind the camera by creating intermediary points suitable for the projector\n   * @param {PSVMarker} marker\n   * @returns {PhotoSphereViewer.Point[]}\n   * @private\n   */\n  PSVHUD.prototype._getPolyPositions = function(marker) {\n    var nbVectors = marker.positions3D.length;\n\n    // compute if each vector is visible\n    var positions3D = marker.positions3D.map(function(vector) {\n      return {\n        vector: vector,\n        visible: vector.dot(this.psv.prop.direction) > 0\n      };\n    }, this);\n\n    // get pairs of visible/invisible vectors for each invisible vector connected to a visible vector\n    var toBeComputed = [];\n    positions3D.forEach(function(pos, i) {\n      if (!pos.visible) {\n        var neighbours = [\n          i === 0 ? positions3D[nbVectors - 1] : positions3D[i - 1],\n          i === nbVectors - 1 ? positions3D[0] : positions3D[i + 1]\n        ];\n\n        neighbours.forEach(function(neighbour) {\n          if (neighbour.visible) {\n            toBeComputed.push({\n              visible: neighbour,\n              invisible: pos,\n              index: i\n            });\n          }\n        });\n      }\n    });\n\n    // compute intermediary vector for each pair (the loop is reversed for splice to insert at the right place)\n    toBeComputed.reverse().forEach(function(pair) {\n      positions3D.splice(pair.index, 0, {\n        vector: this._getPolyIntermediaryPoint(pair.visible.vector, pair.invisible.vector),\n        visible: true\n      });\n    }, this);\n\n    // translate vectors to screen pos\n    return positions3D\n      .filter(function(pos) {\n        return pos.visible;\n      })\n      .map(function(pos) {\n        return this.psv.vector3ToViewerCoords(pos.vector);\n      }, this);\n  };\n\n  /**\n   * Given one point in the same direction of the camera and one point behind the camera,\n   * computes an intermediary point on the great circle delimiting the half sphere visible by the camera.\n   * The point is shifted by .01 rad because the projector cannot handle points exactly on this circle.\n   * {@link http://math.stackexchange.com/a/1730410/327208}\n   * @param P1 {THREE.Vector3}\n   * @param P2 {THREE.Vector3}\n   * @returns {THREE.Vector3}\n   * @private\n   */\n  PSVHUD.prototype._getPolyIntermediaryPoint = function(P1, P2) {\n    var C = this.psv.prop.direction.clone().normalize();\n    var N = new THREE.Vector3().crossVectors(P1, P2).normalize();\n    var V = new THREE.Vector3().crossVectors(N, P1).normalize();\n    var H = new THREE.Vector3().addVectors(P1.clone().multiplyScalar(-C.dot(V)), V.clone().multiplyScalar(C.dot(P1))).normalize();\n    var a = new THREE.Vector3().crossVectors(H, C);\n    return H.applyAxisAngle(a, 0.01).multiplyScalar(PhotoSphereViewer.SPHERE_RADIUS);\n  };\n\n  /**\n   * @summary Computes the boundaries positions of a polygon/polyline marker\n   * @param {PSVMarker} marker - alters width and height\n   * @param {PhotoSphereViewer.Point[]} positions\n   * @returns {PhotoSphereViewer.Point}\n   * @private\n   */\n  PSVHUD.prototype._getPolyDimensions = function(marker, positions) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    positions.forEach(function(pos) {\n      minX = Math.min(minX, pos.x);\n      minY = Math.min(minY, pos.y);\n      maxX = Math.max(maxX, pos.x);\n      maxY = Math.max(maxY, pos.y);\n    });\n\n    marker.width = maxX - minX;\n    marker.height = maxY - minY;\n\n    return {\n      x: minX,\n      y: minY\n    };\n  };\n\n  /**\n   * @summary Handles mouse enter events, show the tooltip for non polygon markers\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.over-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseEnter = function(e) {\n    var marker;\n    if (e.target && (marker = e.target.psvMarker) && !marker.isPoly()) {\n      this.hoveringMarker = marker;\n\n      /**\n       * @event over-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user puts the cursor hover a marker\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('over-marker', marker);\n\n      if (marker.tooltip) {\n        this.psv.tooltip.showTooltip({\n          content: marker.tooltip.content,\n          position: marker.tooltip.position,\n          left: marker.position2D.x,\n          top: marker.position2D.y,\n          box: {\n            width: marker.width,\n            height: marker.height\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * @summary Handles mouse leave events, hide the tooltip\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.leave-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseLeave = function(e) {\n    var marker;\n    if (e.target && (marker = e.target.psvMarker)) {\n      // do not hide if we enter the tooltip itself while hovering a polygon\n      if (marker.isPoly() && e.relatedTarget && PSVUtils.hasParent(e.relatedTarget, this.psv.tooltip.container)) {\n        return;\n      }\n\n      /**\n       * @event leave-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user puts the cursor away from a marker\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('leave-marker', marker);\n\n      this.hoveringMarker = null;\n\n      this.psv.tooltip.hideTooltip();\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events, refresh the tooltip for polygon markers\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.leave-marker\n   * @fires module:components.PSVHUD.over-marker\n   * @private\n   */\n  PSVHUD.prototype._onMouseMove = function(e) {\n    if (!this.psv.prop.moving) {\n      var marker;\n\n      // do not hide if we enter the tooltip itself while hovering a polygon\n      if (e.target && (marker = e.target.psvMarker) && marker.isPoly() ||\n        e.target && PSVUtils.hasParent(e.target, this.psv.tooltip.container) && (marker = this.hoveringMarker)) {\n\n        if (!this.hoveringMarker) {\n          this.psv.trigger('over-marker', marker);\n\n          this.hoveringMarker = marker;\n        }\n\n        var boundingRect = this.psv.container.getBoundingClientRect();\n\n        if (marker.tooltip) {\n          this.psv.tooltip.showTooltip({\n            content: marker.tooltip.content,\n            position: marker.tooltip.position,\n            top: e.clientY - boundingRect.top - this.psv.config.tooltip.arrow_size / 2,\n            left: e.clientX - boundingRect.left - this.psv.config.tooltip.arrow_size,\n            box: { // separate the tooltip from the cursor\n              width: this.psv.config.tooltip.arrow_size * 2,\n              height: this.psv.config.tooltip.arrow_size * 2\n            }\n          });\n        }\n      }\n      else if (this.hoveringMarker && this.hoveringMarker.isPoly()) {\n        this.psv.trigger('leave-marker', this.hoveringMarker);\n\n        this.hoveringMarker = null;\n\n        this.psv.tooltip.hideTooltip();\n      }\n    }\n  };\n\n  /**\n   * @summary Handles mouse click events, select the marker and open the panel if necessary\n   * @param {Object} data\n   * @param {Event} e\n   * @param {boolean} dblclick\n   * @fires module:components.PSVHUD.select-marker\n   * @fires module:components.PSVHUD.unselect-marker\n   * @private\n   */\n  PSVHUD.prototype._onClick = function(data, e, dblclick) {\n    var marker;\n    if (data.target && (marker = PSVUtils.getClosest(data.target, '.psv-marker')) && marker.psvMarker) {\n      this.currentMarker = marker.psvMarker;\n\n      /**\n       * @event select-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when the user clicks on a marker. The marker can be retrieved from outside the event handler\n       * with {@link module:components.PSVHUD.getCurrentMarker}\n       * @param {PSVMarker} marker\n       * @param {boolean} dblclick - the simple click is always fired before the double click\n       */\n      this.psv.trigger('select-marker', this.currentMarker, dblclick);\n\n      if (this.psv.config.click_event_on_marker) {\n        // add the marker to event data\n        data.marker = marker.psvMarker;\n      }\n      else {\n        e.stopImmediatePropagation(); //stopPropagation(); modified by lwf\n      }\n    }\n    else if (this.currentMarker) {\n      /**\n       * @event unselect-marker\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when a marker was selected and the user clicks elsewhere\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('unselect-marker', this.currentMarker);\n\n      this.currentMarker = null;\n    }\n\n    if (marker && marker.psvMarker && marker.psvMarker.content) {\n      this.psv.panel.showPanel(marker.psvMarker.content);\n    }\n    else if (this.psv.panel.prop.opened) {\n      e.stopPropagation();\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Clicks on an item\n   * @param {MouseEvent} e\n   * @fires module:components.PSVHUD.select-marker-list\n   * @private\n   */\n  PSVHUD.prototype._onClickItem = function(e) {\n    var li;\n    if (e.target && (li = PSVUtils.getClosest(e.target, 'li')) && li.dataset.psvMarker) {\n      var marker = this.getMarker(li.dataset.psvMarker);\n\n      /**\n       * @event select-marker-list\n       * @memberof module:components.PSVHUD\n       * @summary Triggered when a marker is selected from the side panel\n       * @param {PSVMarker} marker\n       */\n      this.psv.trigger('select-marker-list', marker);\n\n      this.gotoMarker(marker, 1000);\n      this.psv.panel.hidePanel();\n    }\n  };\n\n  /**\n   * @summary Updates status when the panel is updated\n   * @private\n   */\n  PSVHUD.prototype._onPanelOpened = function() {\n    if (this.prop.panelOpening) {\n      this.prop.panelOpening = false;\n      this.prop.panelOpened = true;\n    }\n    else {\n      this.prop.panelOpened = false;\n    }\n\n    if (this.prop.markersButton) {\n      this.prop.markersButton.toggleActive(this.prop.panelOpened);\n    }\n  };\n\n  /**\n   * @summary Updates status when the panel is updated\n   * @private\n   */\n  PSVHUD.prototype._onPanelClosed = function() {\n    this.prop.panelOpened = false;\n    this.prop.panelOpening = false;\n\n    if (this.prop.markersButton) {\n      this.prop.markersButton.toggleActive(false);\n    }\n  };\n\n  return PSVHUD;\n});\n\n\ndefine('skylark-sphere/components/PSVLoader',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Loader class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVLoader(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @summary Animation canvas\n     * @member {HTMLCanvasElement}\n     * @readonly\n     * @private\n     */\n    this.canvas = null;\n\n    /**\n     * @summary Inner container for vertical center\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.loader = null;\n\n    this.create();\n  }\n\n  PSVLoader.prototype = Object.create(PSVComponent.prototype);\n  PSVLoader.prototype.constructor = PSVLoader;\n\n  PSVLoader.className = 'psv-loader-container';\n\n  /**\n   * @override\n   */\n  PSVLoader.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    var pixelRatio = PhotoSphereViewer.SYSTEM.pixelRatio;\n\n    this.loader = document.createElement('div');\n    this.loader.className = 'psv-loader';\n    this.container.appendChild(this.loader);\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.className = 'psv-loader-canvas';\n\n    this.canvas.width = this.loader.clientWidth * pixelRatio;\n    this.canvas.height = this.loader.clientWidth * pixelRatio;\n    this.loader.appendChild(this.canvas);\n\n    this.tickness = (this.loader.offsetWidth - this.loader.clientWidth) / 2 * pixelRatio;\n\n    var inner;\n    if (this.psv.config.loading_img) {\n      inner = document.createElement('img');\n      inner.className = 'psv-loader-image';\n      inner.src = this.psv.config.loading_img;\n    }\n    else if (this.psv.config.loading_txt) {\n      inner = document.createElement('div');\n      inner.className = 'psv-loader-text';\n      inner.innerHTML = this.psv.config.loading_txt;\n    }\n    if (inner) {\n      var a = Math.round(Math.sqrt(2 * Math.pow((this.canvas.width / 2 - this.tickness / 2) / pixelRatio, 2)));\n      inner.style.maxWidth = a + 'px';\n      inner.style.maxHeight = a + 'px';\n      this.loader.appendChild(inner);\n    }\n  };\n\n  /**\n   * @override\n   */\n  PSVLoader.prototype.destroy = function() {\n    delete this.loader;\n    delete this.canvas;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Sets the loader progression\n   * @param {int} value - from 0 to 100\n   */\n  PSVLoader.prototype.setProgress = function(value) {\n    var context = this.canvas.getContext('2d');\n\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    context.lineWidth = this.tickness;\n    context.strokeStyle = PSVUtils.getStyle(this.loader, 'color');\n\n    context.beginPath();\n    context.arc(\n      this.canvas.width / 2, this.canvas.height / 2,\n      this.canvas.width / 2 - this.tickness / 2,\n      -Math.PI / 2, value / 100 * 2 * Math.PI - Math.PI / 2\n    );\n    context.stroke();\n  };\n\n  return PSVLoader;\n});\n\n\ndefine('skylark-sphere/buttons/Button',[\n  \"../_psv/ctoc\",\n  \"../components/PSVComponent\",\n  \"../PSVUtils\"\n],function(\n  PhotoSphereViewer,\n  PSVComponent,\n  PSVUtils\n){\n  \"use strict\";\n  /**\n   * @module components/buttons\n   */\n\n  /**\n   * Navigation bar button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarButton(navbar) {\n    PSVComponent.call(this, navbar);\n\n    /**\n     * @summary Unique identifier of the button\n     * @member {string}\n     * @readonly\n     */\n    this.id = undefined;\n\n    if (this.constructor.id) {\n      this.id = this.constructor.id;\n    }\n\n    /**\n     * @summary State of the button\n     * @member {boolean}\n     * @readonly\n     */\n    this.enabled = true;\n  }\n\n  PSVNavBarButton.prototype = Object.create(PSVComponent.prototype);\n  PSVNavBarButton.prototype.constructor = PSVNavBarButton;\n\n  /**\n   * @summary Unique identifier of the button\n   * @member {string}\n   * @readonly\n   */\n  PSVNavBarButton.id = null;\n\n  /**\n   * @summary SVG icon name injected in the button\n   * @member {string}\n   * @readonly\n   */\n  PSVNavBarButton.icon = null;\n\n  /**\n   * @summary SVG icon name injected in the button when it is active\n   * @member {string}\n   * @readonly\n   */\n  PSVNavBarButton.iconActive = null;\n\n  /**\n   * @summary Creates the button\n   * @protected\n   */\n  PSVNavBarButton.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    if (this.constructor.icon) {\n      this._setIcon(this.constructor.icon);\n    }\n\n    if (this.id && this.psv.config.lang[this.id]) {\n      this.container.title = this.psv.config.lang[this.id];\n    }\n\n    this.container.addEventListener('click', function(e) {\n      if (this.enabled) {\n        this._onClick();\n      }\n      e.stopPropagation();\n    }.bind(this));\n\n    var supported = this.supported();\n    if (typeof supported.then === 'function') {\n      this.hide();\n\n      supported.then(function(supported) {\n        if (supported) {\n          this.show();\n        }\n      }.bind(this));\n    }\n    else if (!supported) {\n      this.hide();\n    }\n  };\n\n  /**\n   * @summary Destroys the button\n   * @protected\n   */\n  PSVNavBarButton.prototype.destroy = function() {\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Checks if the button can be displayed\n   * @returns {boolean|Promise<boolean>}\n   */\n  PSVNavBarButton.prototype.supported = function() {\n    return true;\n  };\n\n  /**\n   * @summary Changes the active state of the button\n   * @param {boolean} [active] - forced state\n   */\n  PSVNavBarButton.prototype.toggleActive = function(active) {\n    PSVUtils.toggleClass(this.container, 'psv-button--active', active);\n\n    if (this.constructor.iconActive) {\n      this._setIcon(active ? this.constructor.iconActive : this.constructor.icon);\n    }\n  };\n\n  /**\n   * @summary Disables the button\n   */\n  PSVNavBarButton.prototype.disable = function() {\n    this.container.classList.add('psv-button--disabled');\n\n    this.enabled = false;\n  };\n\n  /**\n   * @summary Enables the button\n   */\n  PSVNavBarButton.prototype.enable = function() {\n    this.container.classList.remove('psv-button--disabled');\n\n    this.enabled = true;\n  };\n\n  /**\n   * @summary Set the button icon from {@link PhotoSphereViewer.ICONS}\n   * @param {string} icon\n   * @param {HTMLElement} [container] - default is the main button container\n   * @private\n   */\n  PSVNavBarButton.prototype._setIcon = function(icon, container) {\n    if (!container) {\n      container = this.container;\n    }\n    if (icon) {\n      container.innerHTML = PhotoSphereViewer.ICONS[icon];\n      // classList not supported on IE11, className is read-only !!!!\n      container.querySelector('svg').setAttribute('class', 'psv-button-svg');\n    }\n    else {\n      container.innerHTML = '';\n    }\n  };\n\n  /**\n   * @summary Action when the button is clicked\n   * @private\n   * @abstract\n   */\n  PSVNavBarButton.prototype._onClick = function() {\n\n  };\n\n  return PSVNavBarButton;\n});\n\n\ndefine('skylark-sphere/buttons/AutorotateButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n  \"use strict\";\n  /**\n   * Navigation bar autorotate button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarAutorotateButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarAutorotateButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarAutorotateButton.prototype.constructor = PSVNavBarAutorotateButton;\n\n  PSVNavBarAutorotateButton.id = 'autorotate';\n  PSVNavBarAutorotateButton.className = 'psv-button psv-button--hover-scale psv-autorotate-button';\n  PSVNavBarAutorotateButton.icon = 'play.svg';\n  PSVNavBarAutorotateButton.iconActive = 'play-active.svg';\n\n  /**\n   * @override\n   */\n  PSVNavBarAutorotateButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('autorotate', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarAutorotateButton.prototype.destroy = function() {\n    this.psv.off('autorotate', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarAutorotateButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'autorotate': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles autorotate\n   */\n  PSVNavBarAutorotateButton.prototype._onClick = function() {\n    this.psv.toggleAutorotate();\n  };\n\n  return PSVNavBarAutorotateButton;\n\n});\n\ndefine('skylark-sphere/buttons/CustomButton',[\n  \"../PSVUtils\",\n  \"./Button\"\n],function(\n  PSVUtils,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar custom button class\n   * @param {module:components.PSVNavBar} navbar\n   * @param {Object} config\n   * @param {string} [config.id]\n   * @param {string} [config.className]\n   * @param {string} [config.title]\n   * @param {string} [config.content]\n   * @param {function} [config.onClick]\n   * @param {boolean} [config.enabled=true]\n   * @param {boolean} [config.visible=true]\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarCustomButton(navbar, config) {\n    PSVNavBarButton.call(this, navbar);\n\n    /**\n     * @member {Object}\n     * @readonly\n     * @private\n     */\n    this.config = config;\n\n    if (this.config.id) {\n      this.id = this.config.id;\n    }\n\n    this.create();\n  }\n\n  PSVNavBarCustomButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarCustomButton.prototype.constructor = PSVNavBarCustomButton;\n\n  PSVNavBarCustomButton.className = 'psv-button psv-custom-button';\n\n  /**\n   * @override\n   */\n  PSVNavBarCustomButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    if (this.config.className) {\n      PSVUtils.addClasses(this.container, this.config.className);\n    }\n\n    if (this.config.title) {\n      this.container.title = this.config.title;\n    }\n\n    if (this.config.content) {\n      this.container.innerHTML = this.config.content;\n    }\n\n    if (this.config.enabled === false || this.config.disabled === true) {\n      this.disable();\n    }\n\n    if (this.config.visible === false || this.config.hidden === true) {\n      this.hide();\n    }\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarCustomButton.prototype.destroy = function() {\n    delete this.config;\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   * @description Calls user method\n   */\n  PSVNavBarCustomButton.prototype._onClick = function() {\n    if (this.config.onClick) {\n      this.config.onClick.apply(this.psv);\n    }\n  };\n\n\n  return PSVNavBarCustomButton;\n});\n\n\ndefine('skylark-sphere/buttons/DownloadButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n\t\"use strict\";\n\t/**\n\t * Navigation bar download button class\n\t * @param {module:components.PSVNavBar} navbar\n\t * @constructor\n\t * @extends module:components/buttons.PSVNavBarButton\n\t * @memberof module:components/buttons\n\t */\n\tfunction PSVNavBarDownloadButton(navbar) {\n\t  PSVNavBarButton.call(this, navbar);\n\n\t  this.create();\n\t}\n\n\tPSVNavBarDownloadButton.prototype = Object.create(PSVNavBarButton.prototype);\n\tPSVNavBarDownloadButton.prototype.constructor = PSVNavBarDownloadButton;\n\n\tPSVNavBarDownloadButton.id = 'download';\n\tPSVNavBarDownloadButton.className = 'psv-button psv-button--hover-scale psv-download-button';\n\tPSVNavBarDownloadButton.icon = 'download.svg';\n\n\t/**\n\t * @override\n\t * @description Asks the browser to download the panorama source file\n\t */\n\tPSVNavBarDownloadButton.prototype._onClick = function() {\n\t  var link = document.createElement('a');\n\t  link.href = this.psv.config.panorama;\n\t  link.download = this.psv.config.panorama;\n\t  this.psv.container.appendChild(link);\n\t  link.click();\n\t};\n\n\treturn PSVNavBarDownloadButton;\n});\n\n\ndefine('skylark-sphere/buttons/FullscreenButton',[\n  \"../_psv/ctoc\",\n  \"./Button\"\n],function(\n  PhotoSphereViewer,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar fullscreen button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarFullscreenButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarFullscreenButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarFullscreenButton.prototype.constructor = PSVNavBarFullscreenButton;\n\n  PSVNavBarFullscreenButton.id = 'fullscreen';\n  PSVNavBarFullscreenButton.className = 'psv-button psv-button--hover-scale psv-fullscreen-button';\n  PSVNavBarFullscreenButton.icon = 'fullscreen-in.svg';\n  PSVNavBarFullscreenButton.iconActive = 'fullscreen-out.svg';\n\n  /**\n   * @override\n   */\n  PSVNavBarFullscreenButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('fullscreen-updated', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarFullscreenButton.prototype.destroy = function() {\n    this.psv.off('fullscreen-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarFullscreenButton.prototype.supported = function() {\n    return !!PhotoSphereViewer.SYSTEM.fullscreenEvent;\n  };\n\n  /**\n   * Handle events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarFullscreenButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'fullscreen-updated': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles fullscreen\n   */\n  PSVNavBarFullscreenButton.prototype._onClick = function() {\n    this.psv.toggleFullscreen();\n  };\n\n  return PSVNavBarFullscreenButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/GyroscopeButton',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./Button\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar gyroscope button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarGyroscopeButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarGyroscopeButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarGyroscopeButton.prototype.constructor = PSVNavBarGyroscopeButton;\n\n  PSVNavBarGyroscopeButton.id = 'gyroscope';\n  PSVNavBarGyroscopeButton.className = 'psv-button psv-button--hover-scale psv-gyroscope-button';\n  PSVNavBarGyroscopeButton.icon = 'compass.svg';\n\n  /**\n   * @override\n   * @description The button gets visible once the gyroscope API is ready\n   */\n  PSVNavBarGyroscopeButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('gyroscope-updated', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarGyroscopeButton.prototype.destroy = function() {\n    this.psv.off('gyroscope-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarGyroscopeButton.prototype.supported = function() {\n    if (!PSVUtils.checkTHREE('DeviceOrientationControls')) {\n      return false;\n    }\n    else {\n      return PhotoSphereViewer.SYSTEM.deviceOrientationSupported;\n    }\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarGyroscopeButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'gyroscope-updated': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles gyroscope control\n   */\n  PSVNavBarGyroscopeButton.prototype._onClick = function() {\n    this.psv.toggleGyroscopeControl();\n  };\n\n  return PSVNavBarGyroscopeButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/MarkersButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n\t\"use strict\";\n\t/**\n\t * Navigation bar markers button class\n\t * @param {module:components.PSVNavBar} navbar\n\t * @constructor\n\t * @extends module:components/buttons.PSVNavBarButton\n\t * @memberof module:components/buttons\n\t */\n\tfunction PSVNavBarMarkersButton(navbar) {\n\t  PSVNavBarButton.call(this, navbar);\n\n\t  this.create();\n\t}\n\n\tPSVNavBarMarkersButton.prototype = Object.create(PSVNavBarButton.prototype);\n\tPSVNavBarMarkersButton.prototype.constructor = PSVNavBarMarkersButton;\n\n\tPSVNavBarMarkersButton.id = 'markers';\n\tPSVNavBarMarkersButton.className = 'psv-button psv-button--hover-scale psv-markers-button';\n\tPSVNavBarMarkersButton.icon = 'pin.svg';\n\n\t/**\n\t * @override\n\t * @description Toggles markers list\n\t */\n\tPSVNavBarMarkersButton.prototype._onClick = function() {\n\t  this.psv.hud.toggleMarkersList();\n\t};\n\n\treturn PSVNavBarMarkersButton;\n});\n\ndefine('skylark-sphere/buttons/StereoButton',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./Button\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVNavBarButton\n){\n  \"use strict\";\n  /**\n   * Navigation bar gyroscope button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarStereoButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    this.create();\n  }\n\n  PSVNavBarStereoButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarStereoButton.prototype.constructor = PSVNavBarStereoButton;\n\n  PSVNavBarStereoButton.id = 'stereo';\n  PSVNavBarStereoButton.className = 'psv-button psv-button--hover-scale psv-stereo-button';\n  PSVNavBarStereoButton.icon = 'stereo.svg';\n\n  /**\n   * @override\n   * @description The button gets visible once the gyroscope API is ready\n   */\n  PSVNavBarStereoButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('stereo-updated', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarStereoButton.prototype.destroy = function() {\n    this.psv.off('stereo-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarStereoButton.prototype.supported = function() {\n    if (!PhotoSphereViewer.SYSTEM.fullscreenEvent || !PSVUtils.checkTHREE('DeviceOrientationControls')) {\n      return false;\n    }\n    else {\n      return PhotoSphereViewer.SYSTEM.deviceOrientationSupported;\n    }\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarStereoButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'stereo-updated': this.toggleActive(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles gyroscope control\n   */\n  PSVNavBarStereoButton.prototype._onClick = function() {\n    this.psv.toggleStereoView();\n  };\n\n  return PSVNavBarStereoButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/ZoomButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n  \"use strict\";\n  /**\n   * Navigation bar zoom button class\n   * @param {module:components.PSVNavBar} navbar\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarZoomButton(navbar) {\n    PSVNavBarButton.call(this, navbar);\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.zoom_range = null;\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.zoom_value = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      mousedown: false,\n      buttondown: false,\n      longPressInterval: null,\n      longPressTimeout: null\n    };\n\n    this.create();\n  }\n\n  PSVNavBarZoomButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarZoomButton.prototype.constructor = PSVNavBarZoomButton;\n\n  PSVNavBarZoomButton.id = 'zoom';\n  PSVNavBarZoomButton.className = 'psv-button psv-zoom-button';\n\n  /**\n   * @override\n   */\n  PSVNavBarZoomButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    var zoom_minus = document.createElement('div');\n    zoom_minus.className = 'psv-zoom-button-minus';\n    zoom_minus.title = this.psv.config.lang.zoomOut;\n    this._setIcon('zoom-out.svg', zoom_minus);\n    this.container.appendChild(zoom_minus);\n\n    var zoom_range_bg = document.createElement('div');\n    zoom_range_bg.className = 'psv-zoom-button-range';\n    this.container.appendChild(zoom_range_bg);\n\n    this.zoom_range = document.createElement('div');\n    this.zoom_range.className = 'psv-zoom-button-line';\n    zoom_range_bg.appendChild(this.zoom_range);\n\n    this.zoom_value = document.createElement('div');\n    this.zoom_value.className = 'psv-zoom-button-handle';\n    this.zoom_range.appendChild(this.zoom_value);\n\n    var zoom_plus = document.createElement('div');\n    zoom_plus.className = 'psv-zoom-button-plus';\n    zoom_plus.title = this.psv.config.lang.zoomIn;\n    this._setIcon('zoom-in.svg', zoom_plus);\n    this.container.appendChild(zoom_plus);\n\n    this.zoom_range.addEventListener('mousedown', this);\n    this.zoom_range.addEventListener('touchstart', this);\n    this.psv.container.addEventListener('mousemove', this);\n    this.psv.container.addEventListener('touchmove', this);\n    this.psv.container.addEventListener('mouseup', this);\n    this.psv.container.addEventListener('touchend', this);\n    zoom_minus.addEventListener('mousedown', this._zoomOut.bind(this));\n    zoom_plus.addEventListener('mousedown', this._zoomIn.bind(this));\n\n    this.psv.on('zoom-updated', this);\n\n    this.psv.one('ready', function() {\n      this._moveZoomValue(this.psv.prop.zoom_lvl);\n    }.bind(this));\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarZoomButton.prototype.destroy = function() {\n    this._stopZoomChange();\n\n    this.psv.container.removeEventListener('mousemove', this);\n    this.psv.container.removeEventListener('touchmove', this);\n    this.psv.container.removeEventListener('mouseup', this);\n    this.psv.container.removeEventListener('touchend', this);\n\n    delete this.zoom_range;\n    delete this.zoom_value;\n\n    this.psv.off('zoom-updated', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarZoomButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'mousedown':     this._initZoomChangeWithMouse(e); break;\n      case 'touchstart':    this._initZoomChangeByTouch(e); break;\n      case 'mousemove':     this._changeZoomWithMouse(e); break;\n      case 'touchmove':     this._changeZoomByTouch(e); break;\n      case 'mouseup':       this._stopZoomChange(e); break;\n      case 'touchend':      this._stopZoomChange(e); break;\n      case 'zoom-updated':  this._moveZoomValue(e.args[0]); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Moves the zoom cursor\n   * @param {int} level\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._moveZoomValue = function(level) {\n    this.zoom_value.style.left = (level / 100 * this.zoom_range.offsetWidth - this.zoom_value.offsetWidth / 2) + 'px';\n  };\n\n  /**\n   * @summary Handles mouse down events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._initZoomChangeWithMouse = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.mousedown = true;\n    this._changeZoom(evt.clientX);\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._initZoomChangeByTouch = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.mousedown = true;\n    this._changeZoom(evt.changedTouches[0].clientX);\n  };\n\n  /**\n   * @summary Handles click events\n   * @description Zooms in and register long press timer\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._zoomIn = function() {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.buttondown = true;\n    this.psv.zoomIn();\n    this.prop.longPressTimeout = window.setTimeout(this._startLongPressInterval.bind(this, 1), 200);\n  };\n\n  /**\n   * @summary Handles click events\n   * @description Zooms out and register long press timer\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._zoomOut = function() {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.prop.buttondown = true;\n    this.psv.zoomOut();\n    this.prop.longPressTimeout = window.setTimeout(this._startLongPressInterval.bind(this, -1), 200);\n  };\n\n  /**\n   * @summary Continues zooming as long as the user presses the button\n   * @param value\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._startLongPressInterval = function(value) {\n    if (this.prop.buttondown) {\n      this.prop.longPressInterval = window.setInterval(function() {\n        this.psv.zoom(this.psv.prop.zoom_lvl + value);\n      }.bind(this), 50);\n    }\n  };\n\n  /**\n   * @summary Handles mouse up events\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._stopZoomChange = function() {\n    if (!this.enabled) {\n      return;\n    }\n\n    window.clearInterval(this.prop.longPressInterval);\n    window.clearTimeout(this.prop.longPressTimeout);\n    this.prop.longPressInterval = null;\n    this.prop.mousedown = false;\n    this.prop.buttondown = false;\n  };\n\n  /**\n   * @summary Handles mouse move events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._changeZoomWithMouse = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n\n    evt.preventDefault();\n    this._changeZoom(evt.clientX);\n  };\n\n  /**\n   * @summary Handles touch move events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._changeZoomByTouch = function(evt) {\n    if (!this.enabled) {\n      return;\n    }\n    this._changeZoom(evt.changedTouches[0].clientX);\n  };\n\n  /**\n   * @summary Zoom change\n   * @param {int} x - mouse/touch position\n   * @private\n   */\n  PSVNavBarZoomButton.prototype._changeZoom = function(x) {\n    if (this.prop.mousedown) {\n      var user_input = parseInt(x) - this.zoom_range.getBoundingClientRect().left;\n      var zoom_level = user_input / this.zoom_range.offsetWidth * 100;\n      this.psv.zoom(zoom_level);\n    }\n  };\n\n  return PSVNavBarZoomButton;\n\n});\n\n\ndefine('skylark-sphere/buttons/CaptionButton',[\n  \"./Button\"\n],function(PSVNavBarButton){\n  /**\n   * Navigation bar caption button class\n   * @param {module:components.PSVNavBarCaption} caption\n   * @constructor\n   * @extends module:components/buttons.PSVNavBarButton\n   * @memberof module:components/buttons\n   */\n  function PSVNavBarCaptionButton(caption) {\n    PSVNavBarButton.call(this, caption);\n\n    this.create();\n  }\n\n  PSVNavBarCaptionButton.prototype = Object.create(PSVNavBarButton.prototype);\n  PSVNavBarCaptionButton.prototype.constructor = PSVNavBarCaptionButton;\n\n  PSVNavBarCaptionButton.id = 'markers';\n  PSVNavBarCaptionButton.className = 'psv-button psv-button--hover-scale psv-caption-button';\n  PSVNavBarCaptionButton.icon = 'info.svg';\n\n  /**\n   * @override\n   */\n  PSVNavBarCaptionButton.prototype.create = function() {\n    PSVNavBarButton.prototype.create.call(this);\n\n    this.psv.on('hide-notification', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarCaptionButton.prototype.destroy = function() {\n    this.psv.off('hide-notification', this);\n\n    PSVNavBarButton.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarCaptionButton.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'hide-notification': this.toggleActive(false); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @override\n   * @description Toggles markers list\n   */\n  PSVNavBarCaptionButton.prototype._onClick = function() {\n    if (this.psv.isNotificationVisible()) {\n      this.psv.hideNotification();\n    }\n    else {\n      this.psv.showNotification(this.parent.prop.caption);\n      this.toggleActive(true);\n    }\n  };\n\n  return PSVNavBarCaptionButton;\n\n});\n\ndefine('skylark-sphere/components/PSVNavBarCaption',[\n  \"../_psv/ctoc\",\n  \"../buttons/CaptionButton\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVNavBarCaptionButton,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Navbar caption class\n   * @param {PSVNavBar} navbar\n   * @param {string} caption\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVNavBarCaption(navbar, caption) {\n    PSVComponent.call(this, navbar);\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.content = null;\n\n    /**\n     * @member {PSVNavBarCaptionButton}\n     * @readonly\n     * @private\n     */\n    this.button = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      caption: '',\n      width: 0\n    };\n\n    this.create();\n\n    this.setCaption(caption);\n  }\n\n  PSVNavBarCaption.prototype = Object.create(PSVComponent.prototype);\n  PSVNavBarCaption.prototype.constructor = PSVNavBarCaption;\n\n  PSVNavBarCaption.className = 'psv-caption';\n  PSVNavBarCaption.publicMethods = ['setCaption'];\n\n  /**\n   * @override\n   */\n  PSVNavBarCaption.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.button = new PSVNavBarCaptionButton(this);\n    this.button.hide();\n\n    this.content = document.createElement('div');\n    this.content.className = 'psv-caption-content';\n    this.container.appendChild(this.content);\n\n    window.addEventListener('resize', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBarCaption.prototype.destroy = function() {\n    window.removeEventListener('resize', this);\n\n    delete this.content;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVNavBarCaption.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'resize': this._onResize(); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Sets the bar caption\n   * @param {string} html\n   */\n  PSVNavBarCaption.prototype.setCaption = function(html) {\n    if (!html) {\n      this.prop.caption = '';\n    }\n    else {\n      this.prop.caption = html;\n    }\n\n    this.content.innerHTML = this.prop.caption;\n\n    this.content.style.display = '';\n    this.prop.width = this.content.offsetWidth;\n\n    this._onResize();\n  };\n\n  /**\n   * @summary Toggles content and icon deending on available space\n   * @private\n   */\n  PSVNavBarCaption.prototype._onResize = function() {\n    var width = parseInt(PSVUtils.getStyle(this.container, 'width')); // get real inner width\n\n    if (width >= this.prop.width) {\n      this.button.hide();\n      this.content.style.display = '';\n    }\n    else {\n      this.button.show();\n      this.content.style.display = 'none';\n    }\n  };\n\n  return PSVNavBarCaption;\n});\n  \n\ndefine('skylark-sphere/components/PSVNavBar',[\n  \"../_psv/ctoc\",\n  \"../buttons/AutorotateButton\",\n  \"../buttons/CustomButton\",\n  \"../buttons/DownloadButton\",\n  \"../buttons/FullscreenButton\",\n  \"../buttons/GyroscopeButton\",\n  \"../buttons/MarkersButton\",\n  \"../buttons/StereoButton\",\n  \"../buttons/ZoomButton\",\n  \"../PSVUtils\",\n  \"../PSVError\",\n  \"./PSVComponent\",\n  \"./PSVNavBarCaption\"\n],function(\n  PhotoSphereViewer,\n  PSVNavBarAutorotateButton,\n  PSVNavBarCustomButton,\n  PSVNavBarDownloadButton,\n  PSVNavBarFullscreenButton,\n  PSVNavBarGyroscopeButton,\n  PSVNavBarMarkersButton,\n  PSVNavBarStereoButton,\n  PSVNavBarZoomButton,\n  PSVUtils,\n  PSVError,\n  PSVComponent,\n  PSVNavBarCaption\n){\n  \"use strict\";\n  /**\n   * Navigation bar class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVNavBar(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @member {Object}\n     * @readonly\n     * @private\n     */\n    this.config = this.psv.config.navbar;\n\n    /**\n     * @summary List of buttons of the navbar\n     * @member {Array.<module:components/buttons.PSVNavBarButton>}\n     * @readonly\n     */\n    this.items = [];\n\n    // all buttons\n    if (this.config === true) {\n      this.config = PSVUtils.clone(PhotoSphereViewer.DEFAULTS.navbar);\n    }\n    // space separated list\n    else if (typeof this.config === 'string') {\n      this.config = this.config.split(' ');\n    }\n    // migration from object\n    else if (!Array.isArray(this.config)) {\n      console.warn('PhotoSphereViewer: hashmap form of \"navbar\" is deprecated, use an array instead.');\n\n      var config = this.config;\n      this.config = [];\n\n      PSVUtils.forEach(config, function(enabled, key) {\n        if (enabled) {\n          this.config.push(key);\n        }\n      }.bind(this));\n\n      this.config.sort(function(a, b) {\n        return PhotoSphereViewer.DEFAULTS.navbar.indexOf(a) - PhotoSphereViewer.DEFAULTS.navbar.indexOf(b);\n      });\n    }\n\n    this.create();\n  }\n\n  PSVNavBar.prototype = Object.create(PSVComponent.prototype);\n  PSVNavBar.prototype.constructor = PSVNavBar;\n\n  PSVNavBar.className = 'psv-navbar psv-navbar--open';\n  PSVNavBar.publicMethods = ['showNavbar', 'hideNavbar', 'toggleNavbar', 'getNavbarButton'];\n\n  /**\n   * @override\n   * @throws {PSVError} when the configuration is incorrect\n   */\n  PSVNavBar.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.config.forEach(function(button) {\n      if (typeof button === 'object') {\n        this.items.push(new PSVNavBarCustomButton(this, button));\n      }\n      else {\n        switch (button) {\n          case PSVNavBarAutorotateButton.id:\n            this.items.push(new PSVNavBarAutorotateButton(this));\n            break;\n\n          case PSVNavBarZoomButton.id:\n            this.items.push(new PSVNavBarZoomButton(this));\n            break;\n\n          case PSVNavBarDownloadButton.id:\n            this.items.push(new PSVNavBarDownloadButton(this));\n            break;\n\n          case PSVNavBarMarkersButton.id:\n            this.items.push(new PSVNavBarMarkersButton(this));\n            break;\n\n          case PSVNavBarFullscreenButton.id:\n            this.items.push(new PSVNavBarFullscreenButton(this));\n            break;\n\n          case PSVNavBarStereoButton.id:\n            this.items.push(new PSVNavBarStereoButton(this));\n            break;\n\n          case PSVNavBarGyroscopeButton.id:\n            this.items.push(new PSVNavBarGyroscopeButton(this));\n            break;\n\n          case 'caption':\n            this.items.push(new PSVNavBarCaption(this, this.psv.config.caption));\n            break;\n\n          /* falls through */\n          default:\n            if (button.indexOf('spacer') === 0) {\n              console.warn('PhotoSphereViewer: navbar spacers have been removed.');\n            }\n            else {\n              throw new PSVError('Unknown button ' + button);\n            }\n            break;\n        }\n      }\n    }, this);\n  };\n\n  /**\n   * @override\n   */\n  PSVNavBar.prototype.destroy = function() {\n    this.items.forEach(function(item) {\n      item.destroy();\n    });\n\n    this.items.length = 0;\n    delete this.config;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Returns a button by its identifier\n   * @param {string} id\n   * @param {boolean} [silent=false]\n   * @returns {module:components/buttons.PSVNavBarButton}\n   */\n  PSVNavBar.prototype.getNavbarButton = function(id, silent) {\n    var button = null;\n\n    this.items.some(function(item) {\n      if (item.id === id) {\n        button = item;\n        return true;\n      }\n      else {\n        return false;\n      }\n    });\n\n    if (!button && !silent) {\n      console.warn('PhotoSphereViewer: button \"' + id + '\" not found in the navbar.');\n    }\n\n    return button;\n  };\n\n  /**\n   * @summary Shows the navbar\n   */\n  PSVNavBar.prototype.showNavbar = function() {\n    this.toggleNavbar(true);\n  };\n\n  /**\n   * @summary Hides the navbar\n   */\n  PSVNavBar.prototype.hideNavbar = function() {\n    this.toggleNavbar(false);\n  };\n\n  /**\n   * @summary Toggles the navbar\n   * @param {boolean} active\n   */\n  PSVNavBar.prototype.toggleNavbar = function(active) {\n    PSVUtils.toggleClass(this.container, 'psv-navbar--open', active);\n  };\n\n\n  return PSVNavBar;\n});\n\ndefine('skylark-sphere/components/PSVNotification',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Notification class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVNotification(psv) {\n    PSVComponent.call(this, psv);\n\n    this.create();\n  }\n\n  PSVNotification.prototype = Object.create(PSVComponent.prototype);\n  PSVNotification.prototype.constructor = PSVNotification;\n\n  PSVNotification.className = 'psv-notification';\n  PSVNotification.publicMethods = ['showNotification', 'hideNotification', 'isNotificationVisible'];\n\n  /**\n   * @override\n   */\n  PSVNotification.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.content = document.createElement('div');\n    this.content.className = 'psv-notification-content';\n\n    this.container.appendChild(this.content);\n\n    this.content.addEventListener('click', this.hideNotification.bind(this));\n  };\n\n  /**\n   * @override\n   */\n  PSVNotification.prototype.destroy = function() {\n    delete this.content;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Checks if the notification is visible\n   * @returns {boolean}\n   */\n  PSVNotification.prototype.isNotificationVisible = function() {\n    return this.container.classList.contains('psv-notification--visible');\n  };\n\n  /**\n   * @summary Displays a notification on the viewer\n   * @param {Object|string} config\n   * @param {string} config.content\n   * @param {int} [config.timeout]\n   *\n   * @example\n   * viewer.showNotification({ content: 'Hello world', timeout: 5000})\n   * viewer.showNotification('Hello world')\n   */\n  PSVNotification.prototype.showNotification = function(config) {\n    if (typeof config === 'string') {\n      config = {\n        content: config\n      };\n    }\n\n    this.content.innerHTML = config.content;\n\n    this.container.classList.add('psv-notification--visible');\n\n    /**\n     * @event show-notification\n     * @memberof module:components.PSVNotification\n     * @summary Trigered when the notification is shown\n     */\n    this.psv.trigger('show-notification');\n\n    if (config.timeout) {\n      setTimeout(this.hideNotification.bind(this), config.timeout);\n    }\n  };\n\n  /**\n   * @summary Hides the notification\n   * @fires module:components.PSVNotification.hide-notification\n   */\n  PSVNotification.prototype.hideNotification = function() {\n    if (this.isNotificationVisible()) {\n      this.container.classList.remove('psv-notification--visible');\n\n      /**\n       * @event hide-notification\n       * @memberof module:components.PSVNotification\n       * @summary Trigered when the notification is hidden\n       */\n      this.psv.trigger('hide-notification');\n    }\n  };\n\n\n  return PSVNotification;\n\n});\n  \ndefine('skylark-sphere/components/PSVOverlay',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Overlay class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVOverlay(psv) {\n    PSVComponent.call(this, psv);\n\n    this.create();\n    this.hide();\n  }\n\n  PSVOverlay.prototype = Object.create(PSVComponent.prototype);\n  PSVOverlay.prototype.constructor = PSVOverlay;\n\n  PSVOverlay.className = 'psv-overlay';\n  PSVOverlay.publicMethods = ['showOverlay', 'hideOverlay', 'isOverlayVisible'];\n\n  /**\n   * @override\n   */\n  PSVOverlay.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.image = document.createElement('div');\n    this.image.className = 'psv-overlay-image';\n    this.container.appendChild(this.image);\n\n    this.text = document.createElement('div');\n    this.text.className = 'psv-overlay-text';\n    this.container.appendChild(this.text);\n\n    this.subtext = document.createElement('div');\n    this.subtext.className = 'psv-overlay-subtext';\n    this.container.appendChild(this.subtext);\n\n    this.container.addEventListener('click', this.hideOverlay.bind(this));\n  };\n\n  /**\n   * @override\n   */\n  PSVOverlay.prototype.destroy = function() {\n    delete this.image;\n    delete this.text;\n    delete this.subtext;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Checks if the overlay is visible\n   * @returns {boolean}\n   */\n  PSVOverlay.prototype.isOverlayVisible = function() {\n    return this.visible;\n  };\n\n  /**\n   * @summary Displays an overlay on the viewer\n   * @param {Object|string} config\n   * @param {string} config.image\n   * @param {string} config.text\n   * @param {string} config.subtext\n   *\n   * @example\n   * viewer.showOverlay({\n   *   image: '<svg></svg>',\n   *   text: '....',\n   *   subtext: '....'\n   * })\n   */\n  PSVOverlay.prototype.showOverlay = function(config) {\n    if (typeof config === 'string') {\n      config = {\n        text: config\n      };\n    }\n\n    this.image.innerHTML = config.image || '';\n    this.text.innerHTML = config.text || '';\n    this.subtext.innerHTML = config.subtext || '';\n\n    this.show();\n\n    /**\n     * @event show-overlay\n     * @memberof module:components.PSVOverlay\n     * @summary Trigered when the overlay is shown\n     */\n    this.psv.trigger('show-overlay');\n  };\n\n  /**\n   * @summary Hides the notification\n   * @fires module:components.PSVOverlay.hide-notification\n   */\n  PSVOverlay.prototype.hideOverlay = function() {\n    if (this.isOverlayVisible()) {\n      this.hide();\n\n      /**\n       * @event hide-overlay\n       * @memberof module:components.PSVOverlay\n       * @summary Trigered when the overlay is hidden\n       */\n      this.psv.trigger('hide-overlay');\n    }\n  };\n\n  return PSVOverlay;\n });\n \ndefine('skylark-sphere/components/PSVPanel',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Panel class\n   * @param {PhotoSphereViewer} psv\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVPanel(psv) {\n    PSVComponent.call(this, psv);\n\n    /**\n     * @summary Content container\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.content = null;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      mouse_x: 0,\n      mouse_y: 0,\n      mousedown: false,\n      opened: false\n    };\n\n    this.create();\n  }\n\n  PSVPanel.prototype = Object.create(PSVComponent.prototype);\n  PSVPanel.prototype.constructor = PSVPanel;\n\n  PSVPanel.className = 'psv-panel';\n  PSVPanel.publicMethods = ['showPanel', 'hidePanel'];\n\n  /**\n   * @override\n   */\n  PSVPanel.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.container.innerHTML =\n      '<div class=\"psv-panel-resizer\"></div>' +\n      '<div class=\"psv-panel-close-button\"></div>' +\n      '<div class=\"psv-panel-content\"></div>';\n\n    this.content = this.container.querySelector('.psv-panel-content');\n\n    var closeBtn = this.container.querySelector('.psv-panel-close-button');\n    closeBtn.addEventListener('click', this.hidePanel.bind(this));\n\n    // Stop event bubling from panel\n    if (this.psv.config.mousewheel) {\n      this.container.addEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, function(e) {\n        e.stopPropagation();\n      });\n    }\n\n    // Event for panel resizing + stop bubling\n    var resizer = this.container.querySelector('.psv-panel-resizer');\n    resizer.addEventListener('mousedown', this);\n    resizer.addEventListener('touchstart', this);\n    this.psv.container.addEventListener('mouseup', this);\n    this.psv.container.addEventListener('touchend', this);\n    this.psv.container.addEventListener('mousemove', this);\n    this.psv.container.addEventListener('touchmove', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVPanel.prototype.destroy = function() {\n    this.psv.container.removeEventListener('mousemove', this);\n    this.psv.container.removeEventListener('touchmove', this);\n    this.psv.container.removeEventListener('mouseup', this);\n    this.psv.container.removeEventListener('touchend', this);\n\n    delete this.prop;\n    delete this.content;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVPanel.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'mousedown': this._onMouseDown(e); break;\n      case 'touchstart': this._onTouchStart(e); break;\n      case 'mousemove': this._onMouseMove(e); break;\n      case 'touchmove': this._onTouchMove(e); break;\n      case 'mouseup': this._onMouseUp(e); break;\n      case 'touchend': this._onMouseUp(e); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Shows the panel\n   * @param {string} content\n   * @param {boolean} [noMargin=false]\n   * @fires module:components.PSVPanel.open-panel\n   */\n  PSVPanel.prototype.showPanel = function(content, noMargin) {\n    this.content.innerHTML = content;\n    this.content.scrollTop = 0;\n    this.container.classList.add('psv-panel--open');\n\n    PSVUtils.toggleClass(this.content, 'psv-panel-content--no-margin', noMargin === true);\n\n    this.prop.opened = true;\n\n    /**\n     * @event open-panel\n     * @memberof module:components.PSVPanel\n     * @summary Triggered when the panel is opened\n     */\n    this.psv.trigger('open-panel');\n  };\n\n  /**\n   * @summary Hides the panel\n   * @fires module:components.PSVPanel.close-panel\n   */\n  PSVPanel.prototype.hidePanel = function() {\n    this.content.innerHTML = null;\n    this.prop.opened = false;\n    this.container.classList.remove('psv-panel--open');\n\n    /**\n     * @event close-panel\n     * @memberof module:components.PSVPanel\n     * @summary Trigered when the panel is closed\n     */\n    this.psv.trigger('close-panel');\n  };\n\n  /**\n   * @summary Handles mouse down events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onMouseDown = function(evt) {\n    evt.stopPropagation();\n    this._startResize(evt);\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onTouchStart = function(evt) {\n    evt.stopPropagation();\n    this._startResize(evt.changedTouches[0]);\n  };\n\n  /**\n   * @summary Handles mouse up events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onMouseUp = function(evt) {\n    if (this.prop.mousedown) {\n      evt.stopPropagation();\n      this.prop.mousedown = false;\n      this.content.classList.remove('psv-panel-content--no-interaction');\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onMouseMove = function(evt) {\n    if (this.prop.mousedown) {\n      evt.stopPropagation();\n      this._resize(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch move events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PSVPanel.prototype._onTouchMove = function(evt) {\n    if (this.prop.mousedown) {\n      this._resize(evt.touches[0]);\n    }\n  };\n\n  /**\n   * @summary Initializes the panel resize\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PSVPanel.prototype._startResize = function(evt) {\n    this.prop.mouse_x = parseInt(evt.clientX);\n    this.prop.mouse_y = parseInt(evt.clientY);\n    this.prop.mousedown = true;\n    this.content.classList.add('psv-panel-content--no-interaction');\n  };\n\n  /**\n   * @summary Resizes the panel\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PSVPanel.prototype._resize = function(evt) {\n    var x = parseInt(evt.clientX);\n    var y = parseInt(evt.clientY);\n\n    this.container.style.width = (this.container.offsetWidth - (x - this.prop.mouse_x)) + 'px';\n\n    this.prop.mouse_x = x;\n    this.prop.mouse_y = y;\n  };\n\n  return PSVPanel;\n\n});\n\ndefine('skylark-sphere/components/PSVTooltip',[\n  \"../_psv/ctoc\",\n  \"../PSVUtils\",\n  \"./PSVComponent\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVComponent\n){\n  \"use strict\";\n  /**\n   * Tooltip class\n   * @param {module:components.PSVHUD} hud\n   * @constructor\n   * @extends module:components.PSVComponent\n   * @memberof module:components\n   */\n  function PSVTooltip(hud) {\n    PSVComponent.call(this, hud);\n\n    /**\n     * @member {Object}\n     * @readonly\n     * @private\n     */\n    this.config = this.psv.config.tooltip;\n\n    /**\n     * @member {Object}\n     * @private\n     */\n    this.prop = {\n      timeout: null\n    };\n\n    this.create();\n  }\n\n  PSVTooltip.prototype = Object.create(PSVComponent.prototype);\n  PSVTooltip.prototype.constructor = PSVTooltip;\n\n  PSVTooltip.className = 'psv-tooltip';\n  PSVTooltip.publicMethods = ['showTooltip', 'hideTooltip', 'isTooltipVisible'];\n\n  PSVTooltip.leftMap = { 0: 'left', 0.5: 'center', 1: 'right' };\n  PSVTooltip.topMap = { 0: 'top', 0.5: 'center', 1: 'bottom' };\n\n  /**\n   * @override\n   */\n  PSVTooltip.prototype.create = function() {\n    PSVComponent.prototype.create.call(this);\n\n    this.container.innerHTML = '<div class=\"psv-tooltip-arrow\"></div><div class=\"psv-tooltip-content\"></div>';\n    this.container.style.top = '-1000px';\n    this.container.style.left = '-1000px';\n\n    this.content = this.container.querySelector('.psv-tooltip-content');\n    this.arrow = this.container.querySelector('.psv-tooltip-arrow');\n\n    this.psv.on('render', this);\n  };\n\n  /**\n   * @override\n   */\n  PSVTooltip.prototype.destroy = function() {\n    this.psv.off('render', this);\n\n    delete this.config;\n    delete this.prop;\n\n    PSVComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  PSVTooltip.prototype.handleEvent = function(e) {\n    switch (e.type) {\n      // @formatter:off\n      case 'render': this.hideTooltip(); break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Checks if the tooltip is visible\n   * @returns {boolean}\n   */\n  PSVTooltip.prototype.isTooltipVisible = function() {\n    return this.container.classList.contains('psv-tooltip--visible');\n  };\n\n  /**\n   * @summary Displays a tooltip on the viewer\n   * @param {Object} config\n   * @param {string} config.content - HTML content of the tootlip\n   * @param {int} config.top - Position of the tip of the arrow of the tooltip, in pixels\n   * @param {int} config.left - Position of the tip of the arrow of the tooltip, in pixels\n   * @param {string} [config.position='top center'] - Tooltip position toward it's arrow tip.\n   *                                                  Accepted values are combinations of `top`, `center`, `bottom`\n   *                                                  and `left`, `center`, `right`\n   * @param {string} [config.className] - Additional CSS class added to the tooltip\n   * @param {Object} [config.box] - Used when displaying a tooltip on a marker\n   * @param {int} [config.box.width=0]\n   * @param {int} [config.box.height=0]\n   * @fires module:components.PSVTooltip.show-tooltip\n   * @throws {PSVError} when the configuration is incorrect\n   *\n   * @example\n   * viewer.showTooltip({ content: 'Hello world', top: 200, left: 450, position: 'center bottom'})\n   */\n  PSVTooltip.prototype.showTooltip = function(config) {\n    if (this.prop.timeout) {\n      window.clearTimeout(this.prop.timeout);\n      this.prop.timeout = null;\n    }\n\n    var isUpdate = this.isTooltipVisible();\n    var t = this.container;\n    var c = this.content;\n    var a = this.arrow;\n\n    if (!config.position) {\n      config.position = ['top', 'center'];\n    }\n\n    if (!config.box) {\n      config.box = {\n        width: 0,\n        height: 0\n      };\n    }\n\n    // parse position\n    if (typeof config.position === 'string') {\n      var tempPos = PSVUtils.parsePosition(config.position);\n\n      if (!(tempPos.left in PSVTooltip.leftMap) || !(tempPos.top in PSVTooltip.topMap)) {\n        throw new PSVError('unable to parse tooltip position \"' + config.position + '\"');\n      }\n\n      config.position = [PSVTooltip.topMap[tempPos.top], PSVTooltip.leftMap[tempPos.left]];\n    }\n\n    if (config.position[0] === 'center' && config.position[1] === 'center') {\n      throw new PSVError('unable to parse tooltip position \"center center\"');\n    }\n\n    if (isUpdate) {\n      // Remove every other classes (Firefox does not implements forEach)\n      for (var i = t.classList.length - 1; i >= 0; i--) {\n        var item = t.classList.item(i);\n        if (item !== 'psv-tooltip' && item !== 'psv-tooltip--visible') {\n          t.classList.remove(item);\n        }\n      }\n    }\n    else {\n      t.className = 'psv-tooltip'; // reset the class\n    }\n\n    if (config.className) {\n      PSVUtils.addClasses(t, config.className);\n    }\n\n    c.innerHTML = config.content;\n    t.style.top = '0px';\n    t.style.left = '0px';\n\n    // compute size\n    var rect = t.getBoundingClientRect();\n    var style = {\n      posClass: config.position.slice(),\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top,\n      top: 0,\n      left: 0,\n      arrow_top: 0,\n      arrow_left: 0\n    };\n\n    // set initial position\n    this._computeTooltipPosition(style, config);\n\n    // correct position if overflow\n    var refresh = false;\n    if (style.top < this.config.offset) {\n      style.posClass[0] = 'bottom';\n      refresh = true;\n    }\n    else if (style.top + style.height > this.psv.prop.size.height - this.config.offset) {\n      style.posClass[0] = 'top';\n      refresh = true;\n    }\n    if (style.left < this.config.offset) {\n      style.posClass[1] = 'right';\n      refresh = true;\n    }\n    else if (style.left + style.width > this.psv.prop.size.width - this.config.offset) {\n      style.posClass[1] = 'left';\n      refresh = true;\n    }\n    if (refresh) {\n      this._computeTooltipPosition(style, config);\n    }\n\n    // apply position\n    t.style.top = style.top + 'px';\n    t.style.left = style.left + 'px';\n\n    a.style.top = style.arrow_top + 'px';\n    a.style.left = style.arrow_left + 'px';\n\n    t.classList.add('psv-tooltip--' + style.posClass.join('-'));\n\n    // delay for correct transition between the two classes\n    if (!isUpdate) {\n      this.prop.timeout = window.setTimeout(function() {\n        t.classList.add('psv-tooltip--visible');\n        this.prop.timeout = null;\n\n        /**\n         * @event show-tooltip\n         * @memberof module:components.PSVTooltip\n         * @summary Trigered when the tooltip is shown\n         */\n        this.psv.trigger('show-tooltip');\n      }.bind(this), this.config.delay);\n    }\n  };\n\n  /**\n   * @summary Hides the tooltip\n   * @fires module:components.PSVTooltip.hide-tooltip\n   */\n  PSVTooltip.prototype.hideTooltip = function() {\n    if (this.prop.timeout) {\n      window.clearTimeout(this.prop.timeout);\n      this.prop.timeout = null;\n    }\n\n    if (this.isTooltipVisible()) {\n      this.container.classList.remove('psv-tooltip--visible');\n\n      this.prop.timeout = window.setTimeout(function() {\n        this.content.innerHTML = null;\n        this.container.style.top = '-1000px';\n        this.container.style.left = '-1000px';\n        this.prop.timeout = null;\n      }.bind(this), this.config.delay);\n\n      /**\n       * @event hide-tooltip\n       * @memberof module:components.PSVTooltip\n       * @summary Trigered when the tooltip is hidden\n       */\n      this.psv.trigger('hide-tooltip');\n    }\n  };\n\n  /**\n   * @summary Computes the position of the tooltip and its arrow\n   * @param {Object} style\n   * @param {Object} config\n   * @private\n   */\n  PSVTooltip.prototype._computeTooltipPosition = function(style, config) {\n    var topBottom = false;\n\n    switch (style.posClass[0]) {\n      case 'bottom':\n        style.top = config.top + config.box.height + this.config.offset + this.config.arrow_size;\n        style.arrow_top = -this.config.arrow_size * 2;\n        topBottom = true;\n        break;\n\n      case 'center':\n        style.top = config.top + config.box.height / 2 - style.height / 2;\n        style.arrow_top = style.height / 2 - this.config.arrow_size;\n        break;\n\n      case 'top':\n        style.top = config.top - style.height - this.config.offset - this.config.arrow_size;\n        style.arrow_top = style.height;\n        topBottom = true;\n        break;\n    }\n\n    switch (style.posClass[1]) {\n      case 'right':\n        if (topBottom) {\n          style.left = config.left + config.box.width / 2 - this.config.offset - this.config.arrow_size;\n          style.arrow_left = this.config.offset;\n        }\n        else {\n          style.left = config.left + config.box.width + this.config.offset + this.config.arrow_size;\n          style.arrow_left = -this.config.arrow_size * 2;\n        }\n        break;\n\n      case 'center':\n        style.left = config.left + config.box.width / 2 - style.width / 2;\n        style.arrow_left = style.width / 2 - this.config.arrow_size;\n        break;\n\n      case 'left':\n        if (topBottom) {\n          style.left = config.left - style.width + config.box.width / 2 + this.config.offset + this.config.arrow_size;\n          style.arrow_left = style.width - this.config.offset - this.config.arrow_size * 2;\n        }\n        else {\n          style.left = config.left - style.width - this.config.offset - this.config.arrow_size;\n          style.arrow_left = style.width;\n        }\n        break;\n    }\n  };\n\n  return PSVTooltip;\n});\n  \ndefine('skylark-sphere/_psv/core',[\n  \"skylark-threejs\",\n  \"./ctoc\",\n  \"../doT\",\n  \"../PSVError\",\n  \"../PSVUtils\",\n  \"../PSVAnimation\",\n  \"../components/PSVHUD\",\n  \"../components/PSVLoader\",\n  \"../components/PSVNavBar\",\n  \"../components/PSVNotification\",\n  \"../components/PSVOverlay\",\n  \"../components/PSVPanel\",\n  \"../components/PSVTooltip\"\n],function(\n  THREE,\n  PhotoSphereViewer,\n  doT,\n  PSVError,\n  PSVUtils,\n  PSVAnimation,\n  PSVHUD,\n  PSVLoader,\n  PSVNavBar,\n  PSVNotification,\n  PSVOverlay,\n  PSVPanel,\n  PSVTooltip\n){\n  \"use strict\";\n\n  PhotoSphereViewer.prototype._construct = function (options) {\n\n    // init global system variables\n    if (!PhotoSphereViewer.SYSTEM.loaded) {\n      PhotoSphereViewer._loadSystem();\n    }\n\n    /**\n     * @summary Configuration object\n     * @member {Object}\n     * @readonly\n     */\n    this.config = PSVUtils.clone(PhotoSphereViewer.DEFAULTS);\n    PSVUtils.deepmerge(this.config, options);\n\n    // check container\n    if (!options.container) {\n      throw new PSVError('No value given for container.');\n    }\n\n    // must support canvas\n    if (!PhotoSphereViewer.SYSTEM.isCanvasSupported) {\n      throw new PSVError('Canvas is not supported.');\n    }\n\n    // must support webgl\n    if (!PhotoSphereViewer.SYSTEM.isWebGLSupported) {\n      throw new PSVError('WebGL is not supported.');\n    }\n\n    // longitude range must have two values\n    if (this.config.longitude_range && this.config.longitude_range.length !== 2) {\n      this.config.longitude_range = null;\n      console.warn('PhotoSphereViewer: longitude_range must have exactly two elements.');\n    }\n\n    if (this.config.latitude_range) {\n      // latitude range must have two values\n      if (this.config.latitude_range.length !== 2) {\n        this.config.latitude_range = null;\n        console.warn('PhotoSphereViewer: latitude_range must have exactly two elements.');\n      }\n      // latitude range must be ordered\n      else if (this.config.latitude_range[0] > this.config.latitude_range[1]) {\n        this.config.latitude_range = [this.config.latitude_range[1], this.config.latitude_range[0]];\n        console.warn('PhotoSphereViewer: latitude_range values must be ordered.');\n      }\n    }\n    // migrate legacy tilt_up_max and tilt_down_max\n    else if (this.config.tilt_up_max !== undefined || this.config.tilt_down_max !== undefined) {\n      this.config.latitude_range = [\n        this.config.tilt_down_max !== undefined ? this.config.tilt_down_max - Math.PI / 4 : -PSVUtils.HalfPI,\n        this.config.tilt_up_max !== undefined ? this.config.tilt_up_max + Math.PI / 4 : PSVUtils.HalfPI\n      ];\n      console.warn('PhotoSphereViewer: tilt_up_max and tilt_down_max are deprecated, use latitude_range instead.');\n    }\n\n    // min_fov and max_fov must be ordered\n    if (this.config.max_fov < this.config.min_fov) {\n      var temp_fov = this.config.max_fov;\n      this.config.max_fov = this.config.min_fov;\n      this.config.min_fov = temp_fov;\n      console.warn('PhotoSphereViewer: max_fov cannot be lower than min_fov.');\n    }\n\n    // cache_texture must be a positive integer or false\n    if (this.config.cache_texture && (!PSVUtils.isInteger(this.config.cache_texture) || this.config.cache_texture < 0)) {\n      this.config.cache_texture = PhotoSphereViewer.DEFAULTS.cache_texture;\n      console.warn('PhotoSphereViewer: invalid value for cache_texture');\n    }\n\n    // panorama_roll is deprecated\n    if ('panorama_roll' in this.config) {\n      this.config.sphere_correction.roll = this.config.panorama_roll;\n      console.warn('PhotoSphereViewer: panorama_roll is deprecated, use sphere_correction.roll instead');\n    }\n\n    // gyroscope is deprecated\n    if ('gyroscope' in this.config) {\n      console.warn('PhotoSphereViewer: gyroscope is deprecated, the control is automatically created if DeviceOrientationControls.js is loaded');\n    }\n\n    // keyboard=true becomes the default map\n    if (this.config.keyboard === true) {\n      this.config.keyboard = PSVUtils.clone(PhotoSphereViewer.DEFAULTS.keyboard);\n    }\n\n    // min_fov/max_fov between 1 and 179\n    this.config.min_fov = PSVUtils.bound(this.config.min_fov, 1, 179);\n    this.config.max_fov = PSVUtils.bound(this.config.max_fov, 1, 179);\n\n    // default default_fov is middle point between min_fov and max_fov\n    if (this.config.default_fov === null) {\n      this.config.default_fov = this.config.max_fov / 2 + this.config.min_fov / 2;\n    }\n    // default_fov between min_fov and max_fov\n    else {\n      this.config.default_fov = PSVUtils.bound(this.config.default_fov, this.config.min_fov, this.config.max_fov);\n    }\n\n    // default anim_lat is default_lat\n    if (this.config.anim_lat === null) {\n      this.config.anim_lat = this.config.default_lat;\n    }\n    // parse anim_lat, is between -PI/2 and PI/2\n    else {\n      this.config.anim_lat = PSVUtils.parseAngle(this.config.anim_lat, true);\n    }\n\n    // parse longitude_range, between 0 and 2*PI\n    if (this.config.longitude_range) {\n      this.config.longitude_range = this.config.longitude_range.map(function(angle) {\n        return PSVUtils.parseAngle(angle);\n      });\n    }\n\n    // parse latitude_range, between -PI/2 and PI/2\n    if (this.config.latitude_range) {\n      this.config.latitude_range = this.config.latitude_range.map(function(angle) {\n        return PSVUtils.parseAngle(angle, true);\n      });\n    }\n\n    // parse anim_speed\n    this.config.anim_speed = PSVUtils.parseSpeed(this.config.anim_speed);\n\n    // reactivate the navbar if the caption is provided\n    if (this.config.caption && !this.config.navbar) {\n      this.config.navbar = ['caption'];\n    }\n\n    // translate boolean fisheye to amount\n    if (this.config.fisheye === true) {\n      this.config.fisheye = 1;\n    }\n    else if (this.config.fisheye === false) {\n      this.config.fisheye = 0;\n    }\n\n    /**\n     * @summary Top most parent\n     * @member {HTMLElement}\n     * @readonly\n     */\n    this.parent = (typeof options.container === 'string') ? document.getElementById(options.container) : options.container;\n\n    /**\n     * @summary Main container\n     * @member {HTMLElement}\n     * @readonly\n     */\n    this.container = null;\n\n    /**\n     * @member {module:components.PSVLoader}\n     * @readonly\n     */\n    this.loader = null;\n\n    /**\n     * @member {module:components.PSVNavBar}\n     * @readonly\n     */\n    this.navbar = null;\n\n    /**\n     * @member {module:components.PSVHUD}\n     * @readonly\n     */\n    this.hud = null;\n\n    /**\n     * @member {module:components.PSVPanel}\n     * @readonly\n     */\n    this.panel = null;\n\n    /**\n     * @member {module:components.PSVTooltip}\n     * @readonly\n     */\n    this.tooltip = null;\n\n    /**\n     * @member {module:components.PSVNotification}\n     * @readonly\n     */\n    this.notification = null;\n\n    /**\n     * @member {module:components.PSVOverlay}\n     * @readonly\n     */\n    this.overlay = null;\n\n    /**\n     * @member {HTMLElement}\n     * @readonly\n     * @private\n     */\n    this.canvas_container = null;\n\n    /**\n     * @member {THREE.WebGLRenderer | THREE.CanvasRenderer}\n     * @readonly\n     * @private\n     */\n    this.renderer = null;\n\n    /**\n     * @member {THREE.StereoEffect}\n     * @private\n     */\n    this.stereoEffect = null;\n\n    /**\n     * @member {NoSleep}\n     * @private\n     */\n    this.noSleep = null;\n\n    /**\n     * @member {THREE.Scene}\n     * @readonly\n     * @private\n     */\n    this.scene = null;\n\n    /**\n     * @member {THREE.PerspectiveCamera}\n     * @readonly\n     * @private\n     */\n    this.camera = null;\n\n    /**\n     * @member {THREE.Mesh}\n     * @readonly\n     * @private\n     */\n    this.mesh = null;\n\n    /**\n     * @member {THREE.Raycaster}\n     * @readonly\n     * @private\n     */\n    this.raycaster = null;\n\n    /**\n     * @member {THREE.DeviceOrientationControls}\n     * @readonly\n     * @private\n     */\n    this.doControls = null;\n\n    /**\n     * @summary Internal properties\n     * @member {Object}\n     * @readonly\n     * @property {boolean} needsUpdate - if the view needs to be renderer\n     * @property {boolean} isCubemap - if the panorama is a cubemap\n     * @property {PhotoSphereViewer.Position} position - current direction of the camera\n     * @property {THREE.Vector3} direction - direction of the camera\n     * @property {float} anim_speed - parsed animation speed (rad/sec)\n     * @property {int} zoom_lvl - current zoom level\n     * @property {float} vFov - vertical FOV\n     * @property {float} hFov - horizontal FOV\n     * @property {float} aspect - viewer aspect ratio\n     * @property {float} move_speed - move speed (computed with pixel ratio and configuration move_speed)\n     * @property {boolean} moving - is the user moving\n     * @property {boolean} zooming - is the user zooming\n     * @property {int} start_mouse_x - start x position of the click/touch\n     * @property {int} start_mouse_y - start y position of the click/touch\n     * @property {int} mouse_x - current x position of the cursor\n     * @property {int} mouse_y - current y position of the cursor\n     * @property {Array[]} mouse_history - list of latest positions of the cursor, [time, x, y]\n     * @property {int} gyro_alpha_offset - current alpha offset for gyroscope controls\n     * @property {int} pinch_dist - distance between fingers when zooming\n     * @property main_reqid - animationRequest id of the main event loop\n     * @property {function} orientation_cb - update callback of the device orientation\n     * @property {function} autorotate_cb - update callback of the automatic rotation\n     * @property {Promise} animation_promise - promise of the current animation (either go to position or image transition)\n     * @property {Promise} loading_promise - promise of the setPanorama method\n     * @property start_timeout - timeout id of the automatic rotation delay\n     * @property {PhotoSphereViewer.ClickData} dblclick_data - temporary storage of click data between two clicks\n     * @property dblclick_timeout - timeout id for double click\n     * @property {PhotoSphereViewer.CacheItem[]} cache - cached panoramas\n     * @property {PhotoSphereViewer.Size} size - size of the container\n     * @property {PhotoSphereViewer.PanoData} pano_data - panorama metadata\n     */\n    this.prop = {\n      needsUpdate: true,\n      isCubemap: undefined,\n      position: {\n        longitude: 0,\n        latitude: 0\n      },\n      ready: false,\n      direction: null,\n      anim_speed: 0,\n      zoom_lvl: 0,\n      vFov: 0,\n      hFov: 0,\n      aspect: 0,\n      move_speed: 0.1,\n      moving: false,\n      zooming: false,\n      start_mouse_x: 0,\n      start_mouse_y: 0,\n      mouse_x: 0,\n      mouse_y: 0,\n      mouse_history: [],\n      gyro_alpha_offset: 0,\n      pinch_dist: 0,\n      main_reqid: null,\n      orientation_cb: null,\n      autorotate_cb: null,\n      animation_promise: null,\n      loading_promise: null,\n      start_timeout: null,\n      dblclick_data: null,\n      dblclick_timeout: null,\n      cache: [],\n      size: {\n        width: 0,\n        height: 0\n      },\n      pano_data: {\n        full_width: 0,\n        full_height: 0,\n        cropped_width: 0,\n        cropped_height: 0,\n        cropped_x: 0,\n        cropped_y: 0\n      }\n    };\n\n    // init templates\n    Object.keys(PhotoSphereViewer.TEMPLATES).forEach(function(tpl) {\n      if (!this.config.templates[tpl]) {\n        this.config.templates[tpl] = PhotoSphereViewer.TEMPLATES[tpl];\n      }\n      if (typeof this.config.templates[tpl] === 'string') {\n        this.config.templates[tpl] = doT.template(this.config.templates[tpl]);\n      }\n    }, this);\n\n    // init\n    this.parent.photoSphereViewer = this;\n\n      // create actual container\n      this.container = document.createElement('div');\n      this.container.classList.add('psv-container');\n      this.parent.appendChild(this.container);\n\n      // apply container size\n      if (this.config.size !== null) {\n        this._setViewerSize(this.config.size);\n      }\n      this._onResize();\n\n      // apply default zoom level\n      var tempZoom = (this.config.default_fov - this.config.min_fov) / (this.config.max_fov - this.config.min_fov) * 100;\n      this.config.default_zoom_lvl = tempZoom - 2 * (tempZoom - 50);\n\n      // actual move speed depends on pixel-ratio\n      this.prop.move_speed = THREE.Math.degToRad(this.config.move_speed / PhotoSphereViewer.SYSTEM.pixelRatio);\n\n      // load loader (!!)\n      this.loader = new PSVLoader(this);\n      this.loader.hide();\n\n      // load navbar\n      this.navbar = new PSVNavBar(this);\n      this.navbar.hide();\n\n      // load hud\n      this.hud = new PSVHUD(this);\n      this.hud.hide();\n\n      // load side panel\n      this.panel = new PSVPanel(this);\n\n      // load hud tooltip\n      this.tooltip = new PSVTooltip(this.hud);\n\n      // load notification\n      this.notification = new PSVNotification(this);\n\n      // load overlay\n      this.overlay = new PSVOverlay(this);\n\n      // attach event handlers\n      this._bindEvents();\n\n      // load panorama\n      if (this.config.panorama) {\n        this.setPanorama(this.config.panorama);\n      }\n\n      // enable GUI after first render\n      this.one('render', function() {\n        if (this.config.navbar) {\n          this.container.classList.add('psv-container--has-navbar');\n          this.navbar.show();\n        }\n\n        this.hud.show();\n\n        if (this.config.markers) {\n          this.config.markers.forEach(function(marker) {\n            this.hud.addMarker(marker, false);\n          }, this);\n\n          this.hud.renderMarkers();\n        }\n\n        // Queue animation\n        if (this.config.time_anim !== false) {\n          this.prop.start_timeout = window.setTimeout(this.startAutorotate.bind(this), this.config.time_anim);\n        }\n\n        setTimeout(function() {\n          // start render loop\n          this._run();\n\n          /**\n           * @event ready\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the panorama image has been loaded and the viewer is ready to perform the first render\n           */\n          this.trigger('ready');\n        }.bind(this), 0);\n      }.bind(this));\n\n      PhotoSphereViewer.SYSTEM.touchEnabled.then(function(enabled) {\n        if (enabled) {\n          this.container.classList.add('psv-is-touch');\n        }\n      }.bind(this));\n  };\n\n\n\n  /**\n   * @summary Main event loop, calls {@link PhotoSphereViewer._render} if `prop.needsUpdate` is true\n   * @param {int} timestamp\n   * @fires PhotoSphereViewer.filter:before-render\n   * @private\n   */\n  PhotoSphereViewer.prototype._run = function(timestamp) {\n    /**\n     * @event before-render\n     * @memberof PhotoSphereViewer\n     * @summary Triggered before a render, used to modify the view\n     * @param {int} timestamp - time provided by requestAnimationFrame\n     */\n    this.trigger('before-render', timestamp || +new Date());\n\n    if (this.prop.needsUpdate) {\n      this._render();\n      this.prop.needsUpdate = false;\n    }\n\n    this.prop.main_reqid = window.requestAnimationFrame(this._run.bind(this));\n  };\n\n  /**\n   * @summary Performs a render\n   * @fires PhotoSphereViewer.render\n   * @private\n   */\n  PhotoSphereViewer.prototype._render = function() {\n    this.prop.direction = this.sphericalCoordsToVector3(this.prop.position);\n    this.camera.position.set(0, 0, 0);\n    this.camera.lookAt(this.prop.direction);\n\n    if (this.config.fisheye) {\n      this.camera.position.copy(this.prop.direction).multiplyScalar(this.config.fisheye / 2).negate();\n    }\n\n    this.camera.aspect = this.prop.aspect;\n    this.camera.fov = this.prop.vFov;\n    this.camera.updateProjectionMatrix();\n\n    (this.stereoEffect || this.renderer).render(this.scene, this.camera);\n\n    /**\n     * @event render\n     * @memberof PhotoSphereViewer\n     * @summary Triggered on each viewer render, **this event is triggered very often**\n     */\n    this.trigger('render');\n  };\n\n  /**\n   * @summary Loads the XMP data with AJAX\n   * @param {string} panorama\n   * @returns {Promise.<PhotoSphereViewer.PanoData>}\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadXMP = function(panorama) {\n    if (!this.config.usexmpdata) {\n      return Promise.resolve(null);\n    }\n\n    return new Promise(function(resolve) {\n      var progress = 0;\n\n      var xhr = new XMLHttpRequest();\n      if (this.config.with_credentials) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200 || xhr.status === 201 || xhr.status === 202 || xhr.status === 0) {\n            this.loader.setProgress(100);\n\n            var binary = xhr.responseText;\n            var a = binary.indexOf('<x:xmpmeta'), b = binary.indexOf('</x:xmpmeta>');\n            var data = binary.substring(a, b);\n            var pano_data = null;\n\n            if (a !== -1 && b !== -1 && data.indexOf('GPano:') !== -1) {\n              pano_data = {\n                full_width: parseInt(PSVUtils.getXMPValue(data, 'FullPanoWidthPixels')),\n                full_height: parseInt(PSVUtils.getXMPValue(data, 'FullPanoHeightPixels')),\n                cropped_width: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaImageWidthPixels')),\n                cropped_height: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaImageHeightPixels')),\n                cropped_x: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaLeftPixels')),\n                cropped_y: parseInt(PSVUtils.getXMPValue(data, 'CroppedAreaTopPixels'))\n              };\n\n              if (!pano_data.full_width || !pano_data.full_height || !pano_data.cropped_width || !pano_data.cropped_height) {\n                console.warn('PhotoSphereViewer: invalid XMP data');\n                pano_data = null;\n              }\n            }\n\n            resolve(pano_data);\n          }\n          else {\n            this.container.textContent = 'Cannot load image';\n            throw new PSVError('Cannot load image');\n          }\n        }\n        else if (xhr.readyState === 3) {\n          this.loader.setProgress(progress += 10);\n        }\n      }.bind(this);\n\n      xhr.onprogress = function(e) {\n        if (e.lengthComputable) {\n          var new_progress = parseInt(e.loaded / e.total * 100);\n          if (new_progress > progress) {\n            progress = new_progress;\n            this.loader.setProgress(progress);\n          }\n        }\n      }.bind(this);\n\n      xhr.onerror = function(e) {\n        this.container.textContent = 'Cannot load image';\n        reject(e);\n        throw new PSVError('Cannot load image');\n      }.bind(this);\n\n      xhr.open('GET', panorama, true);\n      xhr.send(null);\n    }.bind(this));\n  };\n\n  /**\n   * @summary Loads the panorama texture(s)\n   * @param {string|string[]} panorama\n   * @returns {Promise.<THREE.Texture|THREE.Texture[]>}\n   * @fires PhotoSphereViewer.panorama-load-progress\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadTexture = function(panorama) {\n    var tempPanorama = [];\n\n    if (Array.isArray(panorama)) {\n      if (panorama.length !== 6) {\n        throw new PSVError('Must provide exactly 6 image paths when using cubemap.');\n      }\n\n      // reorder images\n      for (var i = 0; i < 6; i++) {\n        tempPanorama[i] = panorama[PhotoSphereViewer.CUBE_MAP[i]];\n      }\n      panorama = tempPanorama;\n    }\n    else if (typeof panorama === 'object') {\n      if (!PhotoSphereViewer.CUBE_HASHMAP.every(function(side) {\n          return !!panorama[side];\n        })) {\n        throw new PSVError('Must provide exactly left, front, right, back, top, bottom when using cubemap.');\n      }\n\n      // transform into array\n      PhotoSphereViewer.CUBE_HASHMAP.forEach(function(side, i) {\n        tempPanorama[i] = panorama[side];\n      });\n      panorama = tempPanorama;\n    }\n\n    if (Array.isArray(panorama)) {\n      if (this.prop.isCubemap === false) {\n        throw new PSVError('The viewer was initialized with an equirectangular panorama, cannot switch to cubemap.');\n      }\n\n      if (this.config.fisheye) {\n        console.warn('PhotoSphereViewer: fisheye effect with cubemap texture can generate distorsions.');\n      }\n\n      if (this.config.cache_texture === PhotoSphereViewer.DEFAULTS.cache_texture) {\n        this.config.cache_texture *= 6;\n      }\n\n      this.prop.isCubemap = true;\n\n      return this._loadCubemapTexture(panorama);\n    }\n    else {\n      if (this.prop.isCubemap === true) {\n        throw new PSVError('The viewer was initialized with an cubemap, cannot switch to equirectangular panorama.');\n      }\n\n      this.prop.isCubemap = false;\n\n      return this._loadEquirectangularTexture(panorama);\n    }\n  };\n\n  /**\n   * @summary Loads the sphere texture\n   * @param {string} panorama\n   * @returns {Promise.<THREE.Texture>}\n   * @fires PhotoSphereViewer.panorama-load-progress\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadEquirectangularTexture = function(panorama) {\n    if (this.config.cache_texture) {\n      var cache = this.getPanoramaCache(panorama);\n\n      if (cache) {\n        this.prop.pano_data = cache.pano_data;\n\n        return Promise.resolve(cache.image);\n      }\n    }\n\n    return this._loadXMP(panorama).then(function(pano_data) {\n      return new Promise(function(resolve, reject) {\n        var loader = new THREE.ImageLoader();\n        var progress = pano_data ? 100 : 0;\n\n        if (this.config.with_credentials) {\n          loader.setCrossOrigin('use-credentials');\n        }\n        else {\n          loader.setCrossOrigin('anonymous');\n        }\n\n        var onload = function(img) {\n          progress = 100;\n\n          this.loader.setProgress(progress);\n\n          /**\n           * @event panorama-load-progress\n           * @memberof PhotoSphereViewer\n           * @summary Triggered while a panorama image is loading\n           * @param {string} panorama\n           * @param {int} progress\n           */\n          this.trigger('panorama-load-progress', panorama, progress);\n\n          // Config XMP data\n          if (!pano_data && this.config.pano_data) {\n            pano_data = PSVUtils.clone(this.config.pano_data);\n          }\n\n          // Default XMP data\n          if (!pano_data) {\n            pano_data = {\n              full_width: img.width,\n              full_height: img.height,\n              cropped_width: img.width,\n              cropped_height: img.height,\n              cropped_x: 0,\n              cropped_y: 0\n            };\n          }\n\n          this.prop.pano_data = pano_data;\n\n          var texture;\n\n          var ratio = Math.min(pano_data.full_width, PhotoSphereViewer.SYSTEM.maxTextureWidth) / pano_data.full_width;\n\n          // resize image / fill cropped parts with black\n          if (ratio !== 1 || pano_data.cropped_width !== pano_data.full_width || pano_data.cropped_height !== pano_data.full_height) {\n            var resized_pano_data = PSVUtils.clone(pano_data);\n\n            resized_pano_data.full_width *= ratio;\n            resized_pano_data.full_height *= ratio;\n            resized_pano_data.cropped_width *= ratio;\n            resized_pano_data.cropped_height *= ratio;\n            resized_pano_data.cropped_x *= ratio;\n            resized_pano_data.cropped_y *= ratio;\n\n            img.width = resized_pano_data.cropped_width;\n            img.height = resized_pano_data.cropped_height;\n\n            var buffer = document.createElement('canvas');\n            buffer.width = resized_pano_data.full_width;\n            buffer.height = resized_pano_data.full_height;\n\n            var ctx = buffer.getContext('2d');\n            ctx.drawImage(img, resized_pano_data.cropped_x, resized_pano_data.cropped_y, resized_pano_data.cropped_width, resized_pano_data.cropped_height);\n\n            texture = new THREE.Texture(buffer);\n          }\n          else {\n            texture = new THREE.Texture(img);\n          }\n\n          texture.needsUpdate = true;\n          texture.minFilter = THREE.LinearFilter;\n          texture.generateMipmaps = false;\n\n          if (this.config.cache_texture) {\n            this._putPanoramaCache({\n              panorama: panorama,\n              image: texture,\n              pano_data: pano_data\n            });\n          }\n\n          resolve(texture);\n        };\n\n        var onprogress = function(e) {\n          if (e.lengthComputable) {\n            var new_progress = parseInt(e.loaded / e.total * 100);\n\n            if (new_progress > progress) {\n              progress = new_progress;\n              this.loader.setProgress(progress);\n              this.trigger('panorama-load-progress', panorama, progress);\n            }\n          }\n        };\n\n        var onerror = function(e) {\n          this.container.textContent = 'Cannot load image';\n          reject(e);\n          throw new PSVError('Cannot load image');\n        };\n\n        loader.load(panorama, onload.bind(this), onprogress.bind(this), onerror.bind(this));\n      }.bind(this));\n    }.bind(this));\n  };\n\n  /**\n   * @summary Load the six textures of the cube\n   * @param {string[]} panorama\n   * @returns {Promise.<THREE.Texture[]>}\n   * @fires PhotoSphereViewer.panorama-load-progress\n   * @throws {PSVError} when the image cannot be loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._loadCubemapTexture = function(panorama) {\n    return new Promise(function(resolve, reject) {\n      var loader = new THREE.ImageLoader();\n      var progress = [0, 0, 0, 0, 0, 0];\n      var loaded = [];\n      var done = 0;\n\n      if (this.config.with_credentials) {\n        loader.setCrossOrigin('use-credentials');\n      }\n      else {\n        loader.setCrossOrigin('anonymous');\n      }\n\n      var onend = function() {\n        loaded.forEach(function(img) {\n          img.needsUpdate = true;\n          img.minFilter = THREE.LinearFilter;\n          img.generateMipmaps = false;\n        });\n\n        resolve(loaded);\n      };\n\n      var onload = function(i, img) {\n        done++;\n        progress[i] = 100;\n\n        this.loader.setProgress(PSVUtils.sum(progress) / 6);\n        this.trigger('panorama-load-progress', panorama[i], progress[i]);\n\n        var ratio = Math.min(img.width, PhotoSphereViewer.SYSTEM.maxTextureWidth / 2) / img.width;\n\n        // resize image\n        if (ratio !== 1) {\n          var buffer = document.createElement('canvas');\n          buffer.width = img.width * ratio;\n          buffer.height = img.height * ratio;\n\n          var ctx = buffer.getContext('2d');\n          ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n          loaded[i] = new THREE.Texture(buffer);\n        }\n        else {\n          loaded[i] = new THREE.Texture(img);\n        }\n\n        if (this.config.cache_texture) {\n          this._putPanoramaCache({\n            panorama: panorama[i],\n            image: loaded[i]\n          });\n        }\n\n        if (done === 6) {\n          onend();\n        }\n      };\n\n      var onprogress = function(i, e) {\n        if (e.lengthComputable) {\n          var new_progress = parseInt(e.loaded / e.total * 100);\n\n          if (new_progress > progress[i]) {\n            progress[i] = new_progress;\n            this.loader.setProgress(PSVUtils.sum(progress) / 6);\n            this.trigger('panorama-load-progress', panorama[i], progress[i]);\n          }\n        }\n      };\n\n      var onerror = function(i, e) {\n        this.container.textContent = 'Cannot load image';\n        reject(e);\n        throw new PSVError('Cannot load image ' + i);\n      };\n\n      for (var i = 0; i < 6; i++) {\n        if (this.config.cache_texture) {\n          var cache = this.getPanoramaCache(panorama[i]);\n\n          if (cache) {\n            done++;\n            progress[i] = 100;\n            loaded[i] = cache.image;\n            continue;\n          }\n        }\n\n        loader.load(panorama[i], onload.bind(this, i), onprogress.bind(this, i), onerror.bind(this, i));\n      }\n\n      if (done === 6) {\n        resolve(loaded);\n      }\n    }.bind(this));\n  };\n\n  /**\n   * @summary Applies the texture to the scene, creates the scene if needed\n   * @param {THREE.Texture|THREE.Texture[]} texture\n   * @fires PhotoSphereViewer.panorama-loaded\n   * @private\n   */\n  PhotoSphereViewer.prototype._setTexture = function(texture) {\n    if (!this.scene) {\n      this._createScene();\n    }\n\n    if (this.prop.isCubemap) {\n      for (var i = 0; i < 6; i++) {\n        if (this.mesh.material[i].map) {\n          this.mesh.material[i].map.dispose();\n        }\n\n        this.mesh.material[i].map = texture[i];\n      }\n    }\n    else {\n      if (this.mesh.material.map) {\n        this.mesh.material.map.dispose();\n      }\n\n      this.mesh.material.map = texture;\n    }\n\n    /**\n     * @event panorama-loaded\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when a panorama image has been loaded\n     */\n    this.trigger('panorama-loaded');\n\n    this._render();\n  };\n\n  /**\n   * @summary Creates the 3D scene and GUI components\n   * @private\n   */\n  PhotoSphereViewer.prototype._createScene = function() {\n    this.raycaster = new THREE.Raycaster();\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(this.prop.size.width, this.prop.size.height);\n    this.renderer.setPixelRatio(PhotoSphereViewer.SYSTEM.pixelRatio);\n\n    this.camera = new THREE.PerspectiveCamera(this.config.default_fov, this.prop.size.width / this.prop.size.height, 1,  3 * PhotoSphereViewer.SPHERE_RADIUS);\n    this.camera.position.set(0, 0, 0);\n\n    this.scene = new THREE.Scene();\n    this.scene.add(this.camera);\n\n    if (this.prop.isCubemap) {\n      this.mesh = this._createCubemap();\n    }\n    else {\n      this.mesh = this._createSphere();\n    }\n\n    this.scene.add(this.mesh);\n\n    // create canvas container\n    this.canvas_container = document.createElement('div');\n    this.canvas_container.className = 'psv-canvas-container';\n    this.renderer.domElement.className = 'psv-canvas';\n    this.container.appendChild(this.canvas_container);\n    this.canvas_container.appendChild(this.renderer.domElement);\n  };\n\n  /**\n   * @summary Creates the sphere mesh\n   * @param {number} [scale=1]\n   * @returns {THREE.Mesh}\n   * @private\n   */\n  PhotoSphereViewer.prototype._createSphere = function(scale) {\n    scale = scale || 1;\n\n    // The middle of the panorama is placed at longitude=0\n    var geometry = new THREE.SphereGeometry(\n      PhotoSphereViewer.SPHERE_RADIUS * scale,\n      PhotoSphereViewer.SPHERE_VERTICES,\n      PhotoSphereViewer.SPHERE_VERTICES,\n      -PSVUtils.HalfPI\n    );\n\n    var material = new THREE.MeshBasicMaterial({\n      side: THREE.DoubleSide, // needs to be DoubleSide for CanvasRenderer\n    });\n\n    var mesh = new THREE.Mesh(geometry, material);\n    mesh.scale.x = -1;\n\n    return mesh;\n  };\n\n  /**\n   * @summary Applies a SphereCorrection to a Mesh\n   * @param {THREE.Mesh} mesh\n   * @param {PhotoSphereViewer.SphereCorrection} sphere_correction\n   * @private\n   */\n  PhotoSphereViewer.prototype._setSphereCorrection = function(mesh, sphere_correction) {\n    this.cleanSphereCorrection(sphere_correction);\n    mesh.rotation.set(\n      sphere_correction.tilt,\n      sphere_correction.pan,\n      sphere_correction.roll\n    );\n  };\n\n  /**\n   * @summary Creates the cube mesh\n   * @param {number} [scale=1]\n   * @returns {THREE.Mesh}\n   * @private\n   */\n  PhotoSphereViewer.prototype._createCubemap = function(scale) {\n    scale = scale || 1;\n\n    var geometry = new THREE.BoxGeometry(\n      PhotoSphereViewer.SPHERE_RADIUS * 2 * scale, PhotoSphereViewer.SPHERE_RADIUS * 2 * scale, PhotoSphereViewer.SPHERE_RADIUS * 2 * scale,\n      PhotoSphereViewer.CUBE_VERTICES, PhotoSphereViewer.CUBE_VERTICES, PhotoSphereViewer.CUBE_VERTICES\n    );\n\n    var materials = [];\n    for (var i = 0; i < 6; i++) {\n      materials.push(new THREE.MeshBasicMaterial({\n        side: THREE.BackSide,\n      }));\n    }\n\n    var mesh = new THREE.Mesh(geometry, materials);\n    mesh.scale.set(1, 1, -1);\n\n    return mesh;\n  };\n\n  /**\n   * @summary Performs transition between the current and a new texture\n   * @param {THREE.Texture} texture\n   * @param {PhotoSphereViewer.PanoramaOptions} options\n   * @returns {Promise}\n   * @private\n   * @throws {PSVError} if the panorama is a cubemap\n   */\n  PhotoSphereViewer.prototype._transition = function(texture, options) {\n    var mesh;\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = options.zoom !== undefined;\n\n    if (this.prop.isCubemap) {\n      if (positionProvided) {\n        console.warn('PhotoSphereViewer: cannot perform cubemap transition to different position.');\n        positionProvided = false;\n      }\n\n      mesh = this._createCubemap(0.9);\n\n      mesh.material.forEach(function(material, i) {\n        material.map = texture[i];\n        material.transparent = true;\n        material.opacity = 0;\n      });\n    }\n    else {\n      mesh = this._createSphere(0.9);\n\n      mesh.material.map = texture;\n      mesh.material.transparent = true;\n      mesh.material.opacity = 0;\n\n      if (options.sphere_correction) {\n        this._setSphereCorrection(mesh, options.sphere_correction);\n      }\n    }\n\n    // rotate the new sphere to make the target position face the camera\n    if (positionProvided) {\n      this.cleanPosition(options);\n\n      // Longitude rotation along the vertical axis\n      var verticalAxis = new THREE.Vector3(0, 1, 0);\n      mesh.rotateOnWorldAxis(verticalAxis, options.longitude - this.prop.position.longitude);\n\n      // Latitude rotation along the camera horizontal axis\n      var horizontalAxis = new THREE.Vector3(0, 1, 0).cross(this.camera.getWorldDirection()).normalize();\n      mesh.rotateOnWorldAxis(horizontalAxis, options.latitude - this.prop.position.latitude);\n\n      // FIXME: find a better way to handle ranges\n      if (this.config.latitude_range || this.config.longitude_range) {\n        this.config.longitude_range = this.config.latitude_range = null;\n        console.warn('PhotoSphereViewer: trying to perform transition with longitude_range and/or latitude_range, ranges cleared.');\n      }\n    }\n\n    this.scene.add(mesh);\n    this.needsUpdate();\n\n    return new PSVAnimation({\n      properties: {\n        opacity: { start: 0.0, end: 1.0 },\n        zoom: zoomProvided ? { start: this.prop.zoom_lvl, end: options.zoom } : undefined\n      },\n      duration: this.config.transition.duration,\n      easing: 'outCubic',\n      onTick: function(properties) {\n        if (this.prop.isCubemap) {\n          for (var i = 0; i < 6; i++) {\n            mesh.material[i].opacity = properties.opacity;\n          }\n        }\n        else {\n          mesh.material.opacity = properties.opacity;\n        }\n\n        if (zoomProvided) {\n          this.zoom(properties.zoom);\n        }\n\n        this.needsUpdate();\n      }.bind(this)\n    })\n      .then(function() {\n        // remove temp sphere and transfer the texture to the main sphere\n        this._setTexture(texture);\n        this.scene.remove(mesh);\n\n        mesh.geometry.dispose();\n        mesh.geometry = null;\n\n        // actually rotate the camera\n        if (positionProvided) {\n          this.rotate(options);\n        }\n\n        if (options.sphere_correction) {\n          this._setSphereCorrection(this.mesh, options.sphere_correction);\n        }\n        else {\n          this._setSphereCorrection(this.mesh, {});\n        }\n      }.bind(this));\n      \n  };\n\n  /**\n   * @summary Reverses autorotate direction with smooth transition\n   * @private\n   */\n  PhotoSphereViewer.prototype._reverseAutorotate = function() {\n    var self = this;\n    var newSpeed = -this.config.anim_speed;\n    var range = this.config.longitude_range;\n    this.config.longitude_range = null;\n\n    new PSVAnimation({\n      properties: {\n        speed: { start: this.config.anim_speed, end: 0 }\n      },\n      duration: 300,\n      easing: 'inSine',\n      onTick: function(properties) {\n        self.config.anim_speed = properties.speed;\n      }\n    })\n      .then(function() {\n        return new PSVAnimation({\n          properties: {\n            speed: { start: 0, end: newSpeed }\n          },\n          duration: 300,\n          easing: 'outSine',\n          onTick: function(properties) {\n            self.config.anim_speed = properties.speed;\n          }\n        });\n      })\n      .then(function() {\n        self.config.longitude_range = range;\n        self.config.anim_speed = newSpeed;\n      });\n  };\n\n  /**\n   * @summary Adds a panorama to the cache\n   * @param {PhotoSphereViewer.CacheItem} cache\n   * @fires PhotoSphereViewer.panorama-cached\n   * @throws {PSVError} when the cache is disabled\n   * @private\n   */\n  PhotoSphereViewer.prototype._putPanoramaCache = function(cache) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot add panorama to cache, cache_texture is disabled');\n    }\n\n    var existingCache = this.getPanoramaCache(cache.panorama);\n\n    if (existingCache) {\n      existingCache.image = cache.image;\n      existingCache.pano_data = cache.pano_data;\n    }\n    else {\n      this.prop.cache = this.prop.cache.slice(0, this.config.cache_texture - 1); // remove most ancient elements\n      this.prop.cache.unshift(cache);\n    }\n\n    /**\n     * @event panorama-cached\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when a panorama is stored in the cache\n     * @param {string} panorama\n     */\n    this.trigger('panorama-cached', cache.panorama);\n  };\n\n  /**\n   * @summary Stops all current animations\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopAll = function() {\n    this.stopAutorotate();\n    this.stopAnimation();\n    this.stopGyroscopeControl();\n    this.stopStereoView();\n  };\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/_psv/defaults',[\n  \"./ctoc\"\n],function(PhotoSphereViewer){\n  \"use strict\";\n  /**\n   * @summary Number of pixels bellow which a mouse move will be considered as a click\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.MOVE_THRESHOLD = 4;\n\n  /**\n   * @summary Angle in radians bellow which two angles are considered identical\n   * @type {float}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.ANGLE_THRESHOLD = 0.003;\n\n  /**\n   * @summary Delay in milliseconds between two clicks to consider a double click\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.DBLCLICK_DELAY = 300;\n\n  /**\n   * @summary Time size of the mouse position history used to compute inertia\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.INERTIA_WINDOW = 300;\n\n  /**\n   * @summary Radius of the THREE.SphereGeometry\n   * Half-length of the THREE.BoxGeometry\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.SPHERE_RADIUS = 100;\n\n  /**\n   * @summary Number of vertice of the THREE.SphereGeometry\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.SPHERE_VERTICES = 64;\n\n  /**\n   * @summary Number of vertices of each side of the THREE.BoxGeometry\n   * @type {int}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.CUBE_VERTICES = 8;\n\n  /**\n   * @summary Order of cube textures for arrays\n   * @type {int[]}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.CUBE_MAP = [0, 2, 4, 5, 3, 1];\n\n  /**\n   * @summary Order of cube textures for maps\n   * @type {string[]}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.CUBE_HASHMAP = ['left', 'right', 'top', 'bottom', 'back', 'front'];\n\n  /**\n   * @summary System properties\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  PhotoSphereViewer.SYSTEM = {\n    loaded: false,\n    pixelRatio: 1,\n    isWebGLSupported: false,\n    isCanvasSupported: false,\n    deviceOrientationSupported: null,\n    maxTextureWidth: 0,\n    mouseWheelEvent: null,\n    fullscreenEvent: null\n  };\n\n  /**\n   * @summary SVG icons sources\n   * @type {Object.<string, string>}\n   * @readonly\n   */\n  PhotoSphereViewer.ICONS = {};\n\n  /**\n   * @summary Default options, see {@link http://photo-sphere-viewer.js.org/#options}\n   * @type {Object}\n   * @readonly\n   */\n  PhotoSphereViewer.DEFAULTS = {\n    panorama: null,\n    container: null,\n    caption: null,\n    usexmpdata: true,\n    pano_data: null,\n    min_fov: 30,\n    max_fov: 90,\n    default_fov: null,\n    default_long: 0,\n    default_lat: 0,\n    sphere_correction: {\n      pan: 0,\n      tilt: 0,\n      roll: 0\n    },\n    longitude_range: null,\n    latitude_range: null,\n    move_speed: 1,\n    zoom_speed: 2,\n    time_anim: 2000,\n    anim_speed: '2rpm',\n    anim_lat: null,\n    fisheye: false,\n    navbar: [\n      'autorotate',\n      'zoom',\n      'download',\n      'markers',\n      'caption',\n      'gyroscope',\n      'stereo',\n      'fullscreen'\n    ],\n    tooltip: {\n      offset: 5,\n      arrow_size: 7,\n      delay: 100\n    },\n    lang: {\n      autorotate: 'Automatic rotation',\n      zoom: 'Zoom',\n      zoomOut: 'Zoom out',\n      zoomIn: 'Zoom in',\n      download: 'Download',\n      fullscreen: 'Fullscreen',\n      markers: 'Markers',\n      gyroscope: 'Gyroscope',\n      stereo: 'Stereo view',\n      stereo_notification: 'Click anywhere to exit stereo view.',\n      please_rotate: ['Please rotate your device', '(or tap to continue)'],\n      two_fingers: ['Use two fingers to navigate']\n    },\n    mousewheel: true,\n    mousewheel_factor: 1,\n    mousemove: true,\n    mousemove_hover: false,\n    touchmove_two_fingers: false,\n    keyboard: {\n      'ArrowUp': 'rotateLatitudeUp',\n      'ArrowDown': 'rotateLatitudeDown',\n      'ArrowRight': 'rotateLongitudeRight',\n      'ArrowLeft': 'rotateLongitudeLeft',\n      'PageUp': 'zoomIn',\n      'PageDown': 'zoomOut',\n      '+': 'zoomIn',\n      '-': 'zoomOut',\n      ' ': 'toggleAutorotate'\n    },\n    move_inertia: true,\n    click_event_on_marker: false,\n    transition: {\n      duration: 1500,\n      loader: true\n    },\n    loading_img: null,\n    loading_txt: 'Loading...',\n    size: null,\n    cache_texture: 0,\n    templates: {},\n    markers: [],\n    with_credentials: false\n  };\n\n  /**\n   * @summary doT.js templates\n   * @type {Object.<string, string>}\n   * @readonly\n   */\n  PhotoSphereViewer.TEMPLATES = {\n    markersList: '\\\n  <div class=\"psv-markers-list-container\"> \\\n    <h1 class=\"psv-markers-list-title\">{{= it.config.lang.markers }}</h1> \\\n    <ul class=\"psv-markers-list\"> \\\n    {{~ it.markers: marker }} \\\n      <li data-psv-marker=\"{{= marker.id }}\" class=\"psv-markers-list-item {{? marker.className }}{{= marker.className }}{{?}}\"> \\\n        {{? marker.image }}<img class=\"psv-markers-list-image\" src=\"{{= marker.image }}\"/>{{?}} \\\n        <p class=\"psv-markers-list-name\">{{? marker.tooltip }}{{= marker.tooltip.content }}{{?? marker.html }}{{= marker.html }}{{??}}{{= marker.id }}{{?}}</p> \\\n      </li> \\\n    {{~}} \\\n    </ul> \\\n  </div>'\n  };\n\nPhotoSphereViewer.ICONS['compass.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M50 0a50 50 0 1 0 0 100A50 50 0 0 0 50 0zm0 88.81a38.86 38.86 0 0 1-38.81-38.8 38.86 38.86 0 0 1 38.8-38.82A38.86 38.86 0 0 1 88.82 50 38.87 38.87 0 0 1 50 88.81z\"/><path d=\"M72.07 25.9L40.25 41.06 27.92 74.12l31.82-15.18v-.01l12.32-33.03zM57.84 54.4L44.9 42.58l21.1-10.06-8.17 21.9z\"/><!--Created by iconoci from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['download.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M83.3 35.6h-17V3H32.2v32.6H16.6l33.6 32.7 33-32.7z\"/><path d=\"M83.3 64.2v16.3H16.6V64.2H-.1v32.6H100V64.2H83.3z\"/><!--Created by Michael Zenaty from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['fullscreen-in.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M100 40H87.1V18.8h-21V6H100zM100 93.2H66V80.3h21.1v-21H100zM34 93.2H0v-34h12.9v21.1h21zM12.9 40H0V6h34v12.9H12.8z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['fullscreen-out.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M66 7h13v21h21v13H66zM66 60.3h34v12.9H79v21H66zM0 60.3h34v34H21V73.1H0zM21 7h13v34H0V28h21z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['gesture.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M33.38 33.2a1.96 1.96 0 0 0 1.5-3.23 10.61 10.61 0 0 1 7.18-17.51c.7-.06 1.31-.49 1.61-1.12a13.02 13.02 0 0 1 11.74-7.43c7.14 0 12.96 5.8 12.96 12.9 0 3.07-1.1 6.05-3.1 8.38-.7.82-.61 2.05.21 2.76.83.7 2.07.6 2.78-.22a16.77 16.77 0 0 0 4.04-10.91C72.3 7.54 64.72 0 55.4 0a16.98 16.98 0 0 0-14.79 8.7 14.6 14.6 0 0 0-12.23 14.36c0 3.46 1.25 6.82 3.5 9.45.4.45.94.69 1.5.69m45.74 43.55a22.13 22.13 0 0 1-5.23 12.4c-4 4.55-9.53 6.86-16.42 6.86-12.6 0-20.1-10.8-20.17-10.91a1.82 1.82 0 0 0-.08-.1c-5.3-6.83-14.55-23.82-17.27-28.87-.05-.1 0-.21.02-.23a6.3 6.3 0 0 1 8.24 1.85l9.38 12.59a1.97 1.97 0 0 0 3.54-1.17V25.34a4 4 0 0 1 1.19-2.87 3.32 3.32 0 0 1 2.4-.95c1.88.05 3.4 1.82 3.4 3.94v24.32a1.96 1.96 0 0 0 3.93 0v-33.1a3.5 3.5 0 0 1 7 0v35.39a1.96 1.96 0 0 0 3.93 0v-.44c.05-2.05 1.6-3.7 3.49-3.7 1.93 0 3.5 1.7 3.5 3.82v5.63c0 .24.04.48.13.71l.1.26a1.97 1.97 0 0 0 3.76-.37c.33-1.78 1.77-3.07 3.43-3.07 1.9 0 3.45 1.67 3.5 3.74l-1.77 18.1zM77.39 51c-1.25 0-2.45.32-3.5.9v-.15c0-4.27-3.33-7.74-7.42-7.74-1.26 0-2.45.33-3.5.9V16.69a7.42 7.42 0 0 0-14.85 0v1.86a7 7 0 0 0-3.28-.94 7.21 7.21 0 0 0-5.26 2.07 7.92 7.92 0 0 0-2.38 5.67v37.9l-5.83-7.82a10.2 10.2 0 0 0-13.35-2.92 4.1 4.1 0 0 0-1.53 5.48C20 64.52 28.74 80.45 34.07 87.34c.72 1.04 9.02 12.59 23.4 12.59 7.96 0 14.66-2.84 19.38-8.2a26.06 26.06 0 0 0 6.18-14.6l1.78-18.2v-.2c0-4.26-3.32-7.73-7.42-7.73z\" fill=\"#000\" fill-rule=\"evenodd\"/><!--Created by AomAm from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['info.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\"><path d=\"M28.3 26.1c-1 2.6-1.9 4.8-2.6 7-2.5 7.4-5 14.7-7.2 22-1.3 4.4.5 7.2 4.3 7.8 1.3.2 2.8.2 4.2-.1 8.2-2 11.9-8.6 15.7-15.2l-2.2 2a18.8 18.8 0 0 1-7.4 5.2 2 2 0 0 1-1.6-.2c-.2-.1 0-1 0-1.4l.8-1.8L41.9 28c.5-1.4.9-3 .7-4.4-.2-2.6-3-4.4-6.3-4.4-8.8.2-15 4.5-19.5 11.8-.2.3-.2.6-.3 1.3 3.7-2.8 6.8-6.1 11.8-6.2z\"/><circle cx=\"39.3\" cy=\"9.2\" r=\"8.2\"/><!--Created by Arafat Uddin from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['mobile-rotate.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M66.7 19a14 14 0 0 1 13.8 12.1l-3.9-2.7c-.5-.3-1.1-.2-1.4.3-.3.5-.2 1.1.3 1.4l5.7 3.9.6.2c.3 0 .6-.2.8-.4l3.9-5.7c.3-.5.2-1.1-.3-1.4-.5-.3-1.1-.2-1.4.3l-2.4 3.5A16 16 0 0 0 66.7 17c-.6 0-1 .4-1 1s.4 1 1 1zM25 15h10c.6 0 1-.4 1-1s-.4-1-1-1H25c-.6 0-1 .4-1 1s.4 1 1 1zm-6.9 30H16l-2 .2a1 1 0 0 0-.8 1.2c.1.5.5.8 1 .8h.2l1.7-.2h2.1c.6 0 1-.4 1-1s-.5-1-1.1-1zm10 0h-4c-.6 0-1 .4-1 1s.4 1 1 1h4c.6 0 1-.4 1-1s-.4-1-1-1zM84 45H55V16A11 11 0 0 0 44 5H16A11 11 0 0 0 5 16v68a11 11 0 0 0 11 11h68a11 11 0 0 0 11-11V56a11 11 0 0 0-11-11zM16 93c-5 0-9-4-9-9V53.2c.3-.1.6-.3.7-.6a9.8 9.8 0 0 1 2-3c.4-.4.4-1 0-1.4a1 1 0 0 0-1.4 0l-1.2 1.5V16c0-5 4-9 9-9h28c5 0 9 4 9 9v68c0 5-4 9-9 9H16zm77-9c0 5-4 9-9 9H50.3c2.8-2 4.7-5.3 4.7-9V47h29c5 0 9 4 9 9v28zM38.1 45h-4c-.6 0-1 .4-1 1s.4 1 1 1h4c.6 0 1-.4 1-1s-.5-1-1-1zm9.9 0h-4c-.6 0-1 .4-1 1s.4 1 1 1h4c.6 0 1-.4 1-1s-.4-1-1-1zm38 19c-.6 0-1 .4-1 1v10c0 .6.4 1 1 1s1-.4 1-1V65c0-.6-.4-1-1-1z\"/><!--Created by Anthony Bresset from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['pin.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\"><path d=\"M24 0C13.8 0 5.5 8.3 5.5 18.5c0 10.07 17.57 28.64 18.32 29.42a.25.25 0 0 0 .36 0c.75-.78 18.32-19.35 18.32-29.42C42.5 8.3 34.2 0 24 0zm0 7.14a10.35 10.35 0 0 1 0 20.68 10.35 10.35 0 0 1 0-20.68z\"/><!--Created by Daniele Marucci from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['play-active.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 41\"><path d=\"M40.5 14.1c-.1-.1-1.2-.5-2.898-1-.102 0-.202-.1-.202-.2C34.5 6.5 28 2 20.5 2S6.6 6.5 3.7 12.9c0 .1-.1.1-.2.2-1.7.6-2.8 1-2.9 1l-.6.3v12.1l.6.2c.1 0 1.1.399 2.7.899.1 0 .2.101.2.199C6.3 34.4 12.9 39 20.5 39c7.602 0 14.102-4.6 16.9-11.1 0-.102.1-.102.199-.2 1.699-.601 2.699-1 2.801-1l.6-.3V14.3l-.5-.2zM6.701 11.5C9.7 7 14.8 4 20.5 4c5.8 0 10.9 3 13.8 7.5.2.3-.1.6-.399.5-3.799-1-8.799-2-13.6-2-4.7 0-9.5 1-13.2 2-.3.1-.5-.2-.4-.5zM25.1 20.3L18.7 24c-.3.2-.7 0-.7-.5v-7.4c0-.4.4-.6.7-.4l6.399 3.8c.301.1.301.6.001.8zm9.4 8.901A16.421 16.421 0 0 1 20.5 37c-5.9 0-11.1-3.1-14-7.898-.2-.302.1-.602.4-.5 3.9 1 8.9 2.1 13.6 2.1 5 0 9.9-1 13.602-2 .298-.1.5.198.398.499z\"/><!--Created by Nick Bluth from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['play.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 41\"><path d=\"M40.5 14.1c-.1-.1-1.2-.5-2.899-1-.101 0-.2-.1-.2-.2C34.5 6.5 28 2 20.5 2S6.6 6.5 3.7 12.9c0 .1-.1.1-.2.2-1.7.6-2.8 1-2.9 1l-.6.3v12.1l.6.2c.1 0 1.1.4 2.7.9.1 0 .2.1.2.199C6.3 34.4 12.9 39 20.5 39c7.601 0 14.101-4.6 16.9-11.1 0-.101.1-.101.2-.2 1.699-.6 2.699-1 2.8-1l.6-.3V14.3l-.5-.2zM20.5 4c5.8 0 10.9 3 13.8 7.5.2.3-.1.6-.399.5-3.8-1-8.8-2-13.6-2-4.7 0-9.5 1-13.2 2-.3.1-.5-.2-.4-.5C9.7 7 14.8 4 20.5 4zm0 33c-5.9 0-11.1-3.1-14-7.899-.2-.301.1-.601.4-.5 3.9 1 8.9 2.1 13.6 2.1 5 0 9.9-1 13.601-2 .3-.1.5.2.399.5A16.422 16.422 0 0 1 20.5 37zm18.601-12.1c0 .1-.101.3-.2.3-2.5.9-10.4 3.6-18.4 3.6-7.1 0-15.6-2.699-18.3-3.6C2.1 25.2 2 25 2 24.9V16c0-.1.1-.3.2-.3 2.6-.9 10.6-3.6 18.2-3.6 7.5 0 15.899 2.7 18.5 3.6.1 0 .2.2.2.3v8.9z\"/><path d=\"M18.7 24l6.4-3.7c.3-.2.3-.7 0-.8l-6.4-3.8c-.3-.2-.7 0-.7.4v7.4c0 .5.4.7.7.5z\"/><!--Created by Nick Bluth from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['stereo.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -2 16 16\"><path d=\"M13.104 0H2.896C2.332 0 1 .392 1 .875h14C15 .392 13.668 0 13.104 0zM15 1H1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3.534a2 2 0 0 0 1.821-1.172l1.19-2.618a.5.5 0 0 1 .91 0l1.19 2.618A2 2 0 0 0 11.466 11H15a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM4 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm8 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4z\"/><!--Created by Idevã Batista from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['zoom-in.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path d=\"M8.728 4.009H6.744v2.737H4.006V8.73h2.738v2.736h1.984V8.73h2.737V6.746H8.728z\"/><!--Created by Ryan Canning from the Noun Project--></svg>';\n\nPhotoSphereViewer.ICONS['zoom-out.svg'] = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path d=\"M4.006 6.746h7.459V8.73H4.006z\"/><!--Created by Ryan Canning from the Noun Project--></svg>';\n  \n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/_psv/events',[\n  \"./ctoc\",\n  \"../PSVUtils\",\n  \"../PSVAnimation\"\n],function(\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVAnimation\n){\n  \"use strict\";\n  /**\n   * @summary Adds all needed event listeners\n   * @private\n   */\n  PhotoSphereViewer.prototype._bindEvents = function() {\n    window.addEventListener('resize', this);\n\n    // all interation events are binded to the HUD only\n    if (this.config.mousemove) {\n      this.hud.container.style.cursor = 'move';\n\n      if (this.config.mousemove_hover) {\n        this.hud.container.addEventListener('mouseenter', this);\n        this.hud.container.addEventListener('mouseleave', this);\n      }\n      else {\n        this.hud.container.addEventListener('mousedown', this);\n        window.addEventListener('mouseup', this);\n      }\n\n      this.hud.container.addEventListener('touchstart', this);\n      window.addEventListener('touchend', this);\n\n      this.hud.container.addEventListener('mousemove', this);\n      this.hud.container.addEventListener('touchmove', this);\n    }\n\n    if (PhotoSphereViewer.SYSTEM.fullscreenEvent) {\n      document.addEventListener(PhotoSphereViewer.SYSTEM.fullscreenEvent, this);\n    }\n\n    if (this.config.mousewheel) {\n      this.hud.container.addEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, this);\n    }\n\n    this.on('_side-reached', function(side) {\n      if (this.isAutorotateEnabled()) {\n        if (side === 'left' || side === 'right') {\n          this._reverseAutorotate();\n        }\n      }\n    });\n  };\n\n  /**\n   * @summary Removes all event listeners\n   * @private\n   */\n  PhotoSphereViewer.prototype._unbindEvents = function() {\n    window.removeEventListener('resize', this);\n\n    if (this.config.mousemove) {\n      this.hud.container.removeEventListener('mousedown', this);\n      this.hud.container.removeEventListener('mouseenter', this);\n      this.hud.container.removeEventListener('touchstart', this);\n      window.removeEventListener('mouseup', this);\n      window.removeEventListener('touchend', this);\n      this.hud.container.removeEventListener('mouseleave', this);\n      this.hud.container.removeEventListener('mousemove', this);\n      this.hud.container.removeEventListener('touchmove', this);\n    }\n\n    if (PhotoSphereViewer.SYSTEM.fullscreenEvent) {\n      document.removeEventListener(PhotoSphereViewer.SYSTEM.fullscreenEvent, this);\n    }\n\n    if (this.config.mousewheel) {\n      this.hud.container.removeEventListener(PhotoSphereViewer.SYSTEM.mouseWheelEvent, this);\n    }\n\n    this.off('_side-reached');\n  };\n\n  /**\n   * @summary Handles events\n   * @param {Event} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype.handleEvent = function(evt) {\n    switch (evt.type) {\n      // @formatter:off\n      case 'resize': PSVUtils.throttle(this._onResize(), 50); break;\n      case 'keydown':     this._onKeyDown(evt);     break;\n      case 'mousedown':   this._onMouseDown(evt);   break;\n      case 'mouseenter':  this._onMouseDown(evt);   break;\n      case 'touchstart':  this._onTouchStart(evt);  break;\n      case 'mouseup':     this._onMouseUp(evt);     break;\n      case 'mouseleave':  this._onMouseUp(evt);     break;\n      case 'touchend':    this._onTouchEnd(evt);    break;\n      case 'mousemove':   this._onMouseMove(evt);   break;\n      case 'touchmove':   this._onTouchMove(evt);   break;\n      case PhotoSphereViewer.SYSTEM.fullscreenEvent:  this._fullscreenToggled();  break;\n      case PhotoSphereViewer.SYSTEM.mouseWheelEvent:  this._onMouseWheel(evt);    break;\n      // @formatter:on\n    }\n  };\n\n  /**\n   * @summary Resizes the canvas when the window is resized\n   * @fires PhotoSphereViewer.size-updated\n   * @private\n   */\n  PhotoSphereViewer.prototype._onResize = function() {\n    if (this.container.clientWidth !== this.prop.size.width || this.container.clientHeight !== this.prop.size.height) {\n      this.prop.size.width = parseInt(this.container.clientWidth);\n      this.prop.size.height = parseInt(this.container.clientHeight);\n      this.prop.aspect = this.prop.size.width / this.prop.size.height;\n      this.needsUpdate();\n\n      if (this.renderer) {\n        (this.stereoEffect || this.renderer).setSize(this.prop.size.width, this.prop.size.height);\n      }\n\n      /**\n       * @event size-updated\n       * @memberof PhotoSphereViewer\n       * @summary Triggered when the viewer size changes\n       * @param {PhotoSphereViewer.Size} size\n       */\n      this.trigger('size-updated', this.getSize());\n    }\n  };\n\n  /**\n   * @summary Handles keyboard events\n   * @param {KeyboardEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onKeyDown = function(evt) {\n    var dLong = 0;\n    var dLat = 0;\n    var dZoom = 0;\n\n    var key = PSVUtils.getEventKey(evt);\n    var action = this.config.keyboard[key];\n\n    switch (action) {\n      // @formatter:off\n      case 'rotateLatitudeUp': dLat = 0.01; break;\n      case 'rotateLatitudeDown': dLat = -0.01; break;\n      case 'rotateLongitudeRight': dLong = 0.01; break;\n      case 'rotateLongitudeLeft': dLong = -0.01; break;\n      case 'zoomIn': dZoom = 1; break;\n      case 'zoomOut': dZoom = -1; break;\n      case 'toggleAutorotate': this.toggleAutorotate(); break;\n      // @formatter:on\n    }\n\n    if (dZoom !== 0) {\n      this.zoom(this.prop.zoom_lvl + dZoom * this.config.zoom_speed);\n    }\n    else if (dLat !== 0 || dLong !== 0) {\n      this.rotate({\n        longitude: this.prop.position.longitude + dLong * this.prop.move_speed * this.prop.hFov,\n        latitude: this.prop.position.latitude + dLat * this.prop.move_speed * this.prop.vFov\n      });\n    }\n  };\n\n  /**\n   * @summary Handles mouse button events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseDown = function(evt) {\n    this._startMove(evt);\n  };\n\n  /**\n   * @summary Handles mouse buttons events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseUp = function(evt) {\n    this._stopMove(evt);\n\n    if (this.isStereoEnabled()) {\n      this.stopStereoView();\n    }\n  };\n\n  /**\n   * @summary Handles mouse move events\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseMove = function(evt) {\n    if (evt.buttons !== 0) {\n      evt.preventDefault();\n      this._move(evt);\n    }\n    else if (this.config.mousemove_hover) {\n      this._moveAbsolute(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchStart = function(evt) {\n    if (evt.touches.length === 1) {\n      if (!this.config.touchmove_two_fingers) {\n        this._startMove(evt.touches[0]);\n      }\n    }\n    else if (evt.touches.length === 2) {\n      this._startMoveZoom(evt);\n    }\n  };\n\n  /**\n   * @summary Handles touch events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchEnd = function(evt) {\n    if (evt.touches.length === 1) {\n      this._stopMoveZoom();\n    }\n    else if (evt.touches.length === 0) {\n      this._stopMove(evt.changedTouches[0]);\n\n      if (this.config.touchmove_two_fingers) {\n        this.overlay.hideOverlay();\n      }\n    }\n  };\n\n  /**\n   * @summary Handles touch move events\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onTouchMove = function(evt) {\n    if (evt.touches.length === 1) {\n      if (this.config.touchmove_two_fingers) {\n        this.overlay.showOverlay({\n          image: PhotoSphereViewer.ICONS['gesture.svg'],\n          text: this.config.lang.two_fingers[0]\n        });\n      }\n      else {\n        evt.preventDefault();\n        this._move(evt.touches[0]);\n      }\n    }\n    else if (evt.touches.length === 2) {\n      evt.preventDefault();\n      this._moveZoom(evt);\n    }\n  };\n\n  /**\n   * @summary Initializes the movement\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._startMove = function(evt) {\n    this.stopAutorotate();\n    this.stopAnimation()\n      .then(function() {\n        this.prop.mouse_x = this.prop.start_mouse_x = parseInt(evt.clientX);\n        this.prop.mouse_y = this.prop.start_mouse_y = parseInt(evt.clientY);\n        this.prop.moving = true;\n        this.prop.zooming = false;\n\n        this.prop.mouse_history.length = 0;\n        this._logMouseMove(evt);\n      }.bind(this));\n  };\n\n  /**\n   * @summary Initializes the combines move and zoom\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._startMoveZoom = function(evt) {\n    var t = [\n      { x: parseInt(evt.touches[0].clientX), y: parseInt(evt.touches[0].clientY) },\n      { x: parseInt(evt.touches[1].clientX), y: parseInt(evt.touches[1].clientY) }\n    ];\n\n    this.prop.pinch_dist = Math.sqrt(Math.pow(t[0].x - t[1].x, 2) + Math.pow(t[0].y - t[1].y, 2));\n    this.prop.mouse_x = this.prop.start_mouse_x = (t[0].x + t[1].x) / 2;\n    this.prop.mouse_y = this.prop.start_mouse_x = (t[0].y + t[1].y) / 2;\n    this.prop.moving = true;\n    this.prop.zooming = true;\n  };\n\n  /**\n   * @summary Stops the movement\n   * @description If the move threshold was not reached a click event is triggered, otherwise an animation is launched to simulate inertia\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMove = function(evt) {\n    if (!PSVUtils.getClosest(evt.target, '.psv-hud')) {\n      return;\n    }\n\n    if (this.prop.moving) {\n      // move threshold to trigger a click\n      if (Math.abs(evt.clientX - this.prop.start_mouse_x) < PhotoSphereViewer.MOVE_THRESHOLD && Math.abs(evt.clientY - this.prop.start_mouse_y) < PhotoSphereViewer.MOVE_THRESHOLD) {\n        this._click(evt); // deleted by lwf\n        this.prop.moving = false;\n      }\n      // inertia animation\n      else if (this.config.move_inertia && !this.isGyroscopeEnabled()) {\n        this._logMouseMove(evt);\n        this._stopMoveInertia(evt);\n      }\n      else {\n        this.prop.moving = false;\n      }\n\n      this.prop.mouse_history.length = 0;\n    }\n  };\n\n  /**\n   * @summary Stops the combined move and zoom\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMoveZoom = function() {\n    this.prop.mouse_history.length = 0;\n    this.prop.moving = false;\n    this.prop.zooming = false;\n  };\n\n  /**\n   * @summary Performs an animation to simulate inertia when the movement stops\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._stopMoveInertia = function(evt) {\n    var direction = {\n      x: evt.clientX - this.prop.mouse_history[0][1],\n      y: evt.clientY - this.prop.mouse_history[0][2]\n    };\n\n    var norm = Math.sqrt(direction.x * direction.x + direction.y * direction.y);\n\n    this.prop.animation_promise = new PSVAnimation({\n      properties: {\n        clientX: { start: evt.clientX, end: evt.clientX + direction.x },\n        clientY: { start: evt.clientY, end: evt.clientY + direction.y }\n      },\n      duration: norm * PhotoSphereViewer.INERTIA_WINDOW / 100,\n      easing: 'outCirc',\n      onTick: function(properties) {\n        this._move(properties, false);\n      }.bind(this)\n    })\n      .finally(function() {\n        this.prop.moving = false;\n      }.bind(this));\n  };\n\n  /**\n   * @summary Triggers an event with all coordinates when a simple click is performed\n   * @param {MouseEvent|Touch} evt\n   * @fires PhotoSphereViewer.click\n   * @fires PhotoSphereViewer.dblclick\n   * @private\n   */\n  PhotoSphereViewer.prototype._click = function(evt) {\n    var boundingRect = this.container.getBoundingClientRect();\n\n    var data = {\n      target: evt.target,\n      client_x: evt.clientX,\n      client_y: evt.clientY,\n      viewer_x: parseInt(evt.clientX - boundingRect.left),\n      viewer_y: parseInt(evt.clientY - boundingRect.top)\n    };\n\n    var intersect = this.viewerCoordsToVector3({ x: data.viewer_x, y: data.viewer_y });\n\n    if (intersect) {\n      var sphericalCoords = this.vector3ToSphericalCoords(intersect);\n      data.longitude = sphericalCoords.longitude;\n      data.latitude = sphericalCoords.latitude;\n\n      // TODO: for cubemap, computes texture's index and coordinates\n      if (!this.prop.isCubemap) {\n        var textureCoords = this.sphericalCoordsToTextureCoords({ longitude: data.longitude, latitude: data.latitude });\n        data.texture_x = textureCoords.x;\n        data.texture_y = textureCoords.y;\n      }\n\n      if (!this.prop.dblclick_timeout) {\n        /**\n         * @event click\n         * @memberof PhotoSphereViewer\n         * @summary Triggered when the user clicks on the viewer (everywhere excluding the navbar and the side panel)\n         * @param {PhotoSphereViewer.ClickData} data\n         */\n        this.trigger('click', data);\n\n        this.prop.dblclick_data = PSVUtils.clone(data);\n        this.prop.dblclick_timeout = setTimeout(function() {\n          this.prop.dblclick_timeout = null;\n          this.prop.dblclick_data = null;\n        }.bind(this), PhotoSphereViewer.DBLCLICK_DELAY);\n      }\n      else {\n        if (Math.abs(this.prop.dblclick_data.client_x - data.client_x) < PhotoSphereViewer.MOVE_THRESHOLD &&\n          Math.abs(this.prop.dblclick_data.client_y - data.client_y) < PhotoSphereViewer.MOVE_THRESHOLD) {\n          /**\n           * @event dblclick\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the user double clicks on the viewer. The simple `click` event is always fired before `dblclick`\n           * @param {PhotoSphereViewer.ClickData} data\n           */\n          this.trigger('dblclick', this.prop.dblclick_data);\n        }\n\n        clearTimeout(this.prop.dblclick_timeout);\n        this.prop.dblclick_timeout = null;\n        this.prop.dblclick_data = null;\n      }\n    }\n  };\n\n  /**\n   * @summary Performs movement\n   * @param {MouseEvent|Touch} evt\n   * @param {boolean} [log=true]\n   * @private\n   */\n  PhotoSphereViewer.prototype._move = function(evt, log) {\n    if (this.prop.moving) {\n      var x = parseInt(evt.clientX);\n      var y = parseInt(evt.clientY);\n\n      var rotation = {\n        longitude: (x - this.prop.mouse_x) / this.prop.size.width * this.prop.move_speed * this.prop.hFov * PhotoSphereViewer.SYSTEM.pixelRatio,\n        latitude: (y - this.prop.mouse_y) / this.prop.size.height * this.prop.move_speed * this.prop.vFov * PhotoSphereViewer.SYSTEM.pixelRatio\n      };\n\n      if (this.isGyroscopeEnabled()) {\n        this.prop.gyro_alpha_offset += rotation.longitude;\n      }\n      else {\n        this.rotate({\n          longitude: this.prop.position.longitude - rotation.longitude,\n          latitude: this.prop.position.latitude + rotation.latitude\n        });\n      }\n\n      this.prop.mouse_x = x;\n      this.prop.mouse_y = y;\n\n      if (log !== false) {\n        this._logMouseMove(evt);\n      }\n    }\n  };\n\n  /**\n   * @summary Performs movement absolute to cursor position in viewer\n   * @param {MouseEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._moveAbsolute = function(evt) {\n    if (this.prop.moving) {\n      this.rotate({\n        longitude: ((evt.clientX - this.container.offsetLeft) / this.container.offsetWidth - 0.5) * PSVUtils.TwoPI,\n        latitude: -((evt.clientY - this.container.offsetTop) / this.container.offsetHeight - 0.5) * Math.PI\n      });\n    }\n  };\n\n  /**\n   * @summary Perfoms combines move and zoom\n   * @param {TouchEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._moveZoom = function(evt) {\n    if (this.prop.zooming && this.prop.moving) {\n      var t = [\n        { x: parseInt(evt.touches[0].clientX), y: parseInt(evt.touches[0].clientY) },\n        { x: parseInt(evt.touches[1].clientX), y: parseInt(evt.touches[1].clientY) }\n      ];\n\n      var p = Math.sqrt(Math.pow(t[0].x - t[1].x, 2) + Math.pow(t[0].y - t[1].y, 2));\n      var delta = 80 * (p - this.prop.pinch_dist) / this.prop.size.width;\n\n      this.zoom(this.prop.zoom_lvl + delta);\n\n      this._move({\n        clientX: (t[0].x + t[1].x) / 2,\n        clientY: (t[0].y + t[1].y) / 2\n      });\n\n      this.prop.pinch_dist = p;\n    }\n  };\n\n  /**\n   * @summary Handles mouse wheel events\n   * @param {MouseWheelEvent} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._onMouseWheel = function(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    var delta = PSVUtils.normalizeWheel(evt).spinY * 5;\n\n    if (delta !== 0) {\n      this.zoom(this.prop.zoom_lvl - delta * this.config.mousewheel_factor);\n    }\n  };\n\n  /**\n   * @summary Handles fullscreen events\n   * @fires PhotoSphereViewer.fullscreen-updated\n   * @private\n   */\n  PhotoSphereViewer.prototype._fullscreenToggled = function() {\n    var enabled = this.isFullscreenEnabled();\n\n    if (this.config.keyboard) {\n      if (enabled) {\n        this.startKeyboardControl();\n      }\n      else {\n        this.stopKeyboardControl();\n      }\n    }\n\n    /**\n     * @event fullscreen-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the fullscreen mode is enabled/disabled\n     * @param {boolean} enabled\n     */\n    this.trigger('fullscreen-updated', enabled);\n  };\n\n  /**\n   * @summary Stores each mouse position during a mouse move\n   * @description Positions older than \"INERTIA_WINDOW\" are removed<br>\n   *     Positions before a pause of \"INERTIA_WINDOW\" / 10 are removed\n   * @param {MouseEvent|Touch} evt\n   * @private\n   */\n  PhotoSphereViewer.prototype._logMouseMove = function(evt) {\n    var now = Date.now();\n    this.prop.mouse_history.push([now, evt.clientX, evt.clientY]);\n\n    var previous = null;\n\n    for (var i = 0; i < this.prop.mouse_history.length;) {\n      if (this.prop.mouse_history[0][i] < now - PhotoSphereViewer.INERTIA_WINDOW) {\n        this.prop.mouse_history.splice(i, 1);\n      }\n      else if (previous && this.prop.mouse_history[0][i] - previous > PhotoSphereViewer.INERTIA_WINDOW / 10) {\n        this.prop.mouse_history.splice(0, i);\n        i = 0;\n        previous = this.prop.mouse_history[0][i];\n      }\n      else {\n        i++;\n        previous = this.prop.mouse_history[0][i];\n      }\n    }\n  };\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/_psv/utils',[\n  \"skylark-threejs\",\n  \"./ctoc\",\n  \"../PSVUtils\",\n  \"../PSVError\"\n],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVUtils,\n  PSVError\n){\n  \"use strict\";\n  /**\n   * @summary Inits the global SYSTEM var with generic support information\n   * @private\n   */\n  PhotoSphereViewer._loadSystem = function() {\n    var S = PhotoSphereViewer.SYSTEM;\n    S.loaded = true;\n    S.pixelRatio = window.devicePixelRatio || 1;\n    S.isWebGLSupported = PSVUtils.isWebGLSupported();\n    S.isCanvasSupported = PSVUtils.isCanvasSupported();\n    S.maxTextureWidth = S.isWebGLSupported ? PSVUtils.getMaxTextureWidth() : 4096;\n    S.mouseWheelEvent = PSVUtils.mouseWheelEvent();\n    S.fullscreenEvent = PSVUtils.fullscreenEvent();\n    S.deviceOrientationSupported = PSVUtils.isDeviceOrientationSupported();\n    S.touchEnabled = PSVUtils.isTouchEnabled();\n  };\n\n  /**\n   * @summary Sets the viewer size\n   * @param {PhotoSphereViewer.Size} size\n   * @private\n   */\n  PhotoSphereViewer.prototype._setViewerSize = function(size) {\n    ['width', 'height'].forEach(function(dim) {\n      if (size[dim]) {\n        if (/^[0-9.]+$/.test(size[dim])) {\n          size[dim] += 'px';\n        }\n        this.parent.style[dim] = size[dim];\n      }\n    }, this);\n  };\n\n  /**\n   * @summary Converts a speed into a duration from current position to a new position\n   * @param {string|number} value\n   * @param {number} angle\n   * @returns {number}\n   */\n  PhotoSphereViewer.prototype.speedToDuration = function(value, angle) {\n    if (!value || typeof value !== 'number') {\n      // desired radial speed\n      var speed = value ? PSVUtils.parseSpeed(value) : this.config.anim_speed;\n      // compute duration\n      return angle / Math.abs(speed) * 1000;\n    }\n    else {\n      return Math.abs(value);\n    }\n  };\n\n  /**\n   * @summary Converts pixel texture coordinates to spherical radians coordinates\n   * @param {PhotoSphereViewer.Point} point\n   * @returns {PhotoSphereViewer.Position}\n   */\n  PhotoSphereViewer.prototype.textureCoordsToSphericalCoords = function(point) {\n    if (this.prop.isCubemap) {\n      throw new PSVError('Unable to use texture coords with cubemap.');\n    }\n\n    var relativeX = (point.x + this.prop.pano_data.cropped_x) / this.prop.pano_data.full_width * PSVUtils.TwoPI;\n    var relativeY = (point.y + this.prop.pano_data.cropped_y) / this.prop.pano_data.full_height * Math.PI;\n\n    return {\n      longitude: relativeX >= Math.PI ? relativeX - Math.PI : relativeX + Math.PI,\n      latitude: PSVUtils.HalfPI - relativeY\n    };\n  };\n\n  /**\n   * @summary Converts spherical radians coordinates to pixel texture coordinates\n   * @param {PhotoSphereViewer.Position} position\n   * @returns {PhotoSphereViewer.Point}\n   */\n  PhotoSphereViewer.prototype.sphericalCoordsToTextureCoords = function(position) {\n    if (this.prop.isCubemap) {\n      throw new PSVError('Unable to use texture coords with cubemap.');\n    }\n\n    var relativeLong = position.longitude / PSVUtils.TwoPI * this.prop.pano_data.full_width;\n    var relativeLat = position.latitude / Math.PI * this.prop.pano_data.full_height;\n\n    return {\n      x: parseInt(position.longitude < Math.PI ? relativeLong + this.prop.pano_data.full_width / 2 : relativeLong - this.prop.pano_data.full_width / 2) - this.prop.pano_data.cropped_x,\n      y: parseInt(this.prop.pano_data.full_height / 2 - relativeLat) - this.prop.pano_data.cropped_y\n    };\n  };\n\n  /**\n   * @summary Converts spherical radians coordinates to a THREE.Vector3\n   * @param {PhotoSphereViewer.Position} position\n   * @returns {THREE.Vector3}\n   */\n  PhotoSphereViewer.prototype.sphericalCoordsToVector3 = function(position) {\n    return new THREE.Vector3(\n      PhotoSphereViewer.SPHERE_RADIUS * -Math.cos(position.latitude) * Math.sin(position.longitude),\n      PhotoSphereViewer.SPHERE_RADIUS * Math.sin(position.latitude),\n      PhotoSphereViewer.SPHERE_RADIUS * Math.cos(position.latitude) * Math.cos(position.longitude)\n    );\n  };\n\n  /**\n   * @summary Converts a THREE.Vector3 to spherical radians coordinates\n   * @param {THREE.Vector3} vector\n   * @returns {PhotoSphereViewer.Position}\n   */\n  PhotoSphereViewer.prototype.vector3ToSphericalCoords = function(vector) {\n    var phi = Math.acos(vector.y / Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z));\n    var theta = Math.atan2(vector.x, vector.z);\n\n    return {\n      longitude: theta < 0 ? -theta : PSVUtils.TwoPI - theta,\n      latitude: PSVUtils.HalfPI - phi\n    };\n  };\n\n  /**\n   * @summary Converts position on the viewer to a THREE.Vector3\n   * @param {PhotoSphereViewer.Point} viewerPoint\n   * @returns {THREE.Vector3}\n   */\n  PhotoSphereViewer.prototype.viewerCoordsToVector3 = function(viewerPoint) {\n    var screen = new THREE.Vector2(\n      2 * viewerPoint.x / this.prop.size.width - 1,\n      -2 * viewerPoint.y / this.prop.size.height + 1\n    );\n\n    this.raycaster.setFromCamera(screen, this.camera);\n\n    var intersects = this.raycaster.intersectObjects(this.scene.children);\n\n    if (intersects.length === 1) {\n      return intersects[0].point;\n    }\n    else {\n      return null;\n    }\n  };\n\n  /**\n   * @summary Converts a THREE.Vector3 to position on the viewer\n   * @param {THREE.Vector3} vector\n   * @returns {PhotoSphereViewer.Point}\n   */\n  PhotoSphereViewer.prototype.vector3ToViewerCoords = function(vector) {\n    vector = vector.clone();\n    vector.project(this.camera);\n\n    return {\n      x: parseInt((vector.x + 1) / 2 * this.prop.size.width),\n      y: parseInt((1 - vector.y) / 2 * this.prop.size.height)\n    };\n  };\n\n  /**\n   * @summary Converts x/y to latitude/longitude if present and ensure boundaries\n   * @param {PhotoSphereViewer.ExtendedPosition} position - mutated\n   * @private\n   */\n  PhotoSphereViewer.prototype.cleanPosition = function(position) {\n    if (position.hasOwnProperty('x') && position.hasOwnProperty('y')) {\n      PSVUtils.deepmerge(position, this.textureCoordsToSphericalCoords(position));\n    }\n\n    position.longitude = PSVUtils.parseAngle(position.longitude);\n    position.latitude = PSVUtils.parseAngle(position.latitude, true);\n  };\n\n  /**\n   * @summary Clean a SphereCorrection object\n   * @param {PhotoSphereViewer.SphereCorrection} sphere_correction - mutated\n   */\n  PhotoSphereViewer.prototype.cleanSphereCorrection = function(sphere_correction) {\n    sphere_correction.pan = PSVUtils.parseAngle(sphere_correction.pan || 0);\n    sphere_correction.tilt = PSVUtils.parseAngle(sphere_correction.tilt || 0, true);\n    sphere_correction.roll = PSVUtils.parseAngle(sphere_correction.roll || 0, true, false);\n  };\n\n  /**\n   * @summary Checks if an object is a {PhotoSphereViewer.ExtendedPosition}, ie has x/y or longitude/latitude\n   * @param {object} object\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isExtendedPosition = function(object) {\n    return [['x', 'y'], ['longitude', 'latitude']].some(function(keys) {\n      return keys[0] in object && keys[1] in object;\n    });\n  };\n\n  /**\n   * @summary Apply \"longitude_range\" and \"latitude_range\"\n   * @param {PhotoSphereViewer.Position} position - mutated\n   * @returns {string[]} list of sides that were reached\n   * @private\n   */\n  PhotoSphereViewer.prototype.applyRanges = function(position) {\n    var range, offset, sidesReached = [];\n\n    if (this.config.longitude_range) {\n      range = PSVUtils.clone(this.config.longitude_range);\n      offset = THREE.Math.degToRad(this.prop.hFov) / 2;\n\n      range[0] = PSVUtils.parseAngle(range[0] + offset);\n      range[1] = PSVUtils.parseAngle(range[1] - offset);\n\n      if (range[0] > range[1]) { // when the range cross longitude 0\n        if (position.longitude > range[1] && position.longitude < range[0]) {\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\n            position.longitude = range[0];\n            sidesReached.push('left');\n          }\n          else {\n            position.longitude = range[1];\n            sidesReached.push('right');\n          }\n        }\n      }\n      else {\n        if (position.longitude < range[0]) {\n          position.longitude = range[0];\n          sidesReached.push('left');\n        }\n        else if (position.longitude > range[1]) {\n          position.longitude = range[1];\n          sidesReached.push('right');\n        }\n      }\n    }\n\n    if (this.config.latitude_range) {\n      range = PSVUtils.clone(this.config.latitude_range);\n      offset = THREE.Math.degToRad(this.prop.vFov) / 2;\n\n      range[0] = PSVUtils.parseAngle(Math.min(range[0] + offset, range[1]), true);\n      range[1] = PSVUtils.parseAngle(Math.max(range[1] - offset, range[0]), true);\n\n      if (position.latitude < range[0]) {\n        position.latitude = range[0];\n        sidesReached.push('bottom');\n      }\n      else if (position.latitude > range[1]) {\n        position.latitude = range[1];\n        sidesReached.push('top');\n      }\n    }\n\n    return sidesReached;\n  };\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/PhotoSphereViewer',[\n  \"skylark-threejs\",\n  \"./_psv/ctoc\",\n   \"./PSVError\",\n  \"./PSVUtils\",\n  \"./PSVMarker\",\n  \"./PSVAnimation\",\n  \"./_psv/core\",\n  \"./_psv/defaults\",\n  \"./_psv/events\",\n  \"./_psv/utils\"\n ],function(\n  THREE,\n  PhotoSphereViewer,\n  PSVError,\n  PSVUtils,\n  PSVMarker,\n  PSVAnimation\n){\n  \"use strict\";\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Point\n   * @summary Object defining a point\n   * @property {int} x\n   * @property {int} y\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Size\n   * @summary Object defining a size\n   * @property {int} width\n   * @property {int} height\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.CssSize\n   * @summary Object defining a size in CSS (px, % or auto)\n   * @property {string} [width]\n   * @property {string} [height]\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.Position\n   * @summary Object defining a spherical position\n   * @property {float} longitude\n   * @property {float} latitude\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.Position} PhotoSphereViewer.ExtendedPosition\n   * @summary Object defining a spherical or texture position\n   * @description A position that can be expressed either in spherical coordinates (radians or degrees) or in texture coordinates (pixels)\n   * @property {int} x\n   * @property {int} y\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.ExtendedPosition} PhotoSphereViewer.AnimateOptions\n   * @summary Object defining animation options\n   * @property {number} zoom - target zoom level between 0 and 100\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.SphereCorrection\n   * @property {number} pan\n   * @property {number} tilt\n   * @property {number} roll\n   */\n\n  /**\n   * @typedef {PhotoSphereViewer.AnimateOptions} PhotoSphereViewer.PanoramaOptions\n   * @summary Object defining panorama and animation options\n   * @property {PhotoSphereViewer.SphereCorrection} sphere_correction - new sphere correction to apply to the panorama\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.CacheItem\n   * @summary An entry in the memory cache\n   * @property {string} panorama\n   * @property {THREE.Texture} image\n   * @property {PhotoSphereViewer.PanoData} pano_data\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.PanoData\n   * @summary Crop information of the panorama\n   * @property {int} full_width\n   * @property {int} full_height\n   * @property {int} cropped_width\n   * @property {int} cropped_height\n   * @property {int} cropped_x\n   * @property {int} cropped_y\n   */\n\n  /**\n   * @typedef {Object} PhotoSphereViewer.ClickData\n   * @summary Data of the `click` event\n   * @property {int} client_x - position in the browser window\n   * @property {int} client_y - position in the browser window\n   * @property {int} viewer_x - position in the viewer\n   * @property {int} viewer_y - position in the viewer\n   * @property {float} longitude - position in spherical coordinates\n   * @property {float} latitude - position in spherical coordinates\n   * @property {int} texture_x - position on the texture\n   * @property {int} texture_y - position on the texture\n   * @property {PSVMarker} [marker] - clicked marker\n   */\n\n\n\n  /**\n   * @summary Triggers an event on the viewer\n   * @function trigger\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string} name\n   * @param {...*} [arguments]\n   * @returns {uEvent.Event}\n   */\n\n  /**\n   * @summary Triggers an event on the viewer and returns the modified value\n   * @function change\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string} name\n   * @param {*} value\n   * @param {...*} [arguments]\n   * @returns {*}\n   */\n\n  /**\n   * @summary Attaches an event listener on the viewer\n   * @function on\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  /**\n   * @summary Removes an event listener from the viewer\n   * @function off\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  /**\n   * @summary Attaches an event listener called once on the viewer\n   * @function once\n   * @memberof PhotoSphereViewer\n   * @instance\n   * @param {string|Object.<string, function>} name - event name or events map\n   * @param {function} [callback]\n   * @returns {PhotoSphereViewer}\n   */\n\n  //uEvent.mixin(PhotoSphereViewer);\n\n\n\n\n  /**\n   * @summary Starts to load the panorama\n   * @returns {Promise}\n   * @throws {PSVError} when the panorama is not configured\n   * @deprecated Use {@link PhotoSphereViewer#setPanorama} instead\n   */\n  PhotoSphereViewer.prototype.load = function() {\n    if (!this.config.panorama) {\n      throw new PSVError('No value given for panorama.');\n    }\n\n    return this.setPanorama(this.config.panorama, false);\n  };\n\n  /**\n   * @summary Returns the current position of the camera\n   * @returns {PhotoSphereViewer.Position}\n   */\n  PhotoSphereViewer.prototype.getPosition = function() {\n    return {\n      longitude: this.prop.position.longitude,\n      latitude: this.prop.position.latitude\n    };\n  };\n\n  /**\n   * @summary Returns the current zoom level\n   * @returns {int}\n   */\n  PhotoSphereViewer.prototype.getZoomLevel = function() {\n    return this.prop.zoom_lvl;\n  };\n\n  /**\n   * @summary Returns the current viewer size\n   * @returns {PhotoSphereViewer.Size}\n   */\n  PhotoSphereViewer.prototype.getSize = function() {\n    return {\n      width: this.prop.size.width,\n      height: this.prop.size.height\n    };\n  };\n\n  /**\n   * @summary Checks if the automatic rotation is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isAutorotateEnabled = function() {\n    return !!this.prop.autorotate_cb;\n  };\n\n  /**\n   * @summary Checks if the gyroscope is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isGyroscopeEnabled = function() {\n    return !!this.prop.orientation_cb;\n  };\n\n  /**\n   * @summary Checks if the stereo viewx is enabled\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isStereoEnabled = function() {\n    return !!this.stereoEffect;\n  };\n\n  /**\n   * @summary Checks if the viewer is in fullscreen\n   * @returns {boolean}\n   */\n  PhotoSphereViewer.prototype.isFullscreenEnabled = function() {\n    return PSVUtils.isFullscreenEnabled(this.container);\n  };\n\n  /**\n   * @summary Flags the view has changed for the next render\n   */\n  PhotoSphereViewer.prototype.needsUpdate = function() {\n    this.prop.needsUpdate = true;\n  };\n\n  /**\n   * @summary Performs a render\n   * @deprecated Use {@link PhotoSphereViewer.event:before-render} instead\n   */\n  PhotoSphereViewer.prototype.render = function() {\n    this._render();\n  };\n\n  /**\n   * @summary Destroys the viewer\n   * @description The memory used by the ThreeJS context is not totally cleared. This will be fixed as soon as possible.\n   */\n  PhotoSphereViewer.prototype.destroy = function() {\n    window.cancelAnimationFrame(this.prop.main_reqid);\n\n    this._stopAll();\n    this.stopKeyboardControl();\n    this.stopNoSleep();\n    this.exitFullscreen();\n    this.unlockOrientation();\n\n    // remove listeners\n    this._unbindEvents();\n\n    // destroy components\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    if (this.notification) {\n      this.notification.destroy();\n    }\n    if (this.hud) {\n      this.hud.destroy();\n    }\n    if (this.loader) {\n      this.loader.destroy();\n    }\n    if (this.navbar) {\n      this.navbar.destroy();\n    }\n    if (this.panel) {\n      this.panel.destroy();\n    }\n    if (this.overlay) {\n      this.overlay.destroy();\n    }\n\n    // destroy ThreeJS view\n    if (this.scene) {\n      PSVUtils.cleanTHREEScene(this.scene);\n    }\n\n    // remove container\n    if (this.canvas_container) {\n      this.container.removeChild(this.canvas_container);\n    }\n    this.parent.removeChild(this.container);\n\n    delete this.parent.photoSphereViewer;\n\n    // clean references\n    delete this.parent;\n    delete this.container;\n    delete this.loader;\n    delete this.navbar;\n    delete this.hud;\n    delete this.panel;\n    delete this.tooltip;\n    delete this.notification;\n    delete this.overlay;\n    delete this.canvas_container;\n    delete this.renderer;\n    delete this.noSleep;\n    delete this.scene;\n    delete this.camera;\n    delete this.mesh;\n    delete this.raycaster;\n    delete this.passes;\n    delete this.config;\n    this.prop.cache.length = 0;\n  };\n\n  /**\n   * @summary Loads a new panorama file\n   * @description Loads a new panorama file, optionally changing the camera position and activating the transition animation.<br>\n   * If the \"position\" is not defined, the camera will not move and the ongoing animation will continue<br>\n   * \"config.transition\" must be configured for \"transition\" to be taken in account\n   * @param {string|string[]} path - URL of the new panorama file\n   * @param {PhotoSphereViewer.PanoramaOptions} [options]\n   * @param {boolean} [transition=false]\n   * @returns {Promise}\n   * @throws {PSVError} when another panorama is already loading\n   */\n  PhotoSphereViewer.prototype.setPanorama = function(path, options, transition) {\n    if (this.prop.loading_promise !== null) {\n      throw new PSVError('Loading already in progress');\n    }\n\n    if (typeof options === 'boolean') {\n      transition = options;\n      options = undefined;\n    }\n    if (!options && !this.scene) {\n      options = {\n        longitude: this.config.default_long,\n        latitude: this.config.default_lat,\n        zoom: this.config.default_zoom_lvl,\n        sphere_correction: this.config.sphere_correction\n      };\n    }\n    else if (!options) {\n      options = {};\n    }\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = 'zoom' in options;\n\n    if (positionProvided || zoomProvided) {\n      this._stopAll();\n    }\n\n    this.config.panorama = path;\n\n    var done = function() {\n      this.loader.hide();\n      this.canvas_container.style.opacity = 1;\n\n      this.prop.loading_promise = null;\n    }.bind(this);\n\n    if (!transition || !this.config.transition || !this.scene) {\n      this.loader.show();\n      if (this.canvas_container) {\n        this.canvas_container.style.opacity = 0;\n      }\n\n      this.prop.loading_promise = this._loadTexture(this.config.panorama)\n        .then(function(texture) {\n          this._setTexture(texture);\n\n          if (options.sphere_correction && !this.prop.isCubemap) {\n            this._setSphereCorrection(this.mesh, options.sphere_correction);\n          }\n\n          if (positionProvided) {\n            this.rotate(options);\n          }\n          if (zoomProvided) {\n            this.zoom(options.zoom);\n          }\n        }.bind(this))\n        .then(done, done);\n    }\n    else {\n      if (this.config.transition.loader) {\n        this.loader.show();\n      }\n\n      this.prop.loading_promise = this._loadTexture(this.config.panorama)\n        .then(function(texture) {\n          this.loader.hide();\n\n          return this._transition(texture, options);\n        }.bind(this))\n        .then(done, done);\n    }\n\n    return this.prop.loading_promise;\n  };\n\n  /**\n   * @summary Starts the automatic rotation\n   * @fires PhotoSphereViewer.autorotate\n   */\n  PhotoSphereViewer.prototype.startAutorotate = function() {\n    this._stopAll();\n\n    this.prop.autorotate_cb = this._getAutorotateUpdate();\n    this.on('before-render', this.prop.autorotate_cb);\n\n    /**\n     * @event autorotate\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the automatic rotation is enabled/disabled\n     * @param {boolean} enabled\n     */\n    this.trigger('autorotate', true);\n  };\n\n  /**\n   * @summary Create an animation callback for the automatic rotation\n   * @returns {function}\n   * @private\n   */\n  PhotoSphereViewer.prototype._getAutorotateUpdate = function() {\n    var last;\n    var elapsed;\n\n    return function(timestamp) {\n      elapsed = last === undefined ? 0 : timestamp - last;\n      last = timestamp;\n\n      this.rotate({\n        longitude: this.prop.position.longitude + this.config.anim_speed * elapsed / 1000,\n        latitude: this.prop.position.latitude - (this.prop.position.latitude - this.config.anim_lat) / 200\n      });\n    };\n  };\n\n  /**\n   * @summary Stops the automatic rotation\n   * @fires PhotoSphereViewer.autorotate\n   */\n  PhotoSphereViewer.prototype.stopAutorotate = function() {\n    if (this.prop.start_timeout) {\n      window.clearTimeout(this.prop.start_timeout);\n      this.prop.start_timeout = null;\n    }\n\n    if (this.isAutorotateEnabled()) {\n      this.off('before-render', this.prop.autorotate_cb);\n      this.prop.autorotate_cb = null;\n\n      this.trigger('autorotate', false);\n    }\n  };\n\n  /**\n   * @summary Starts or stops the automatic rotation\n   */\n  PhotoSphereViewer.prototype.toggleAutorotate = function() {\n    if (this.isAutorotateEnabled()) {\n      this.stopAutorotate();\n    }\n    else {\n      this.startAutorotate();\n    }\n  };\n\n  /**\n   * @summary Enables the gyroscope navigation if available\n   * @fires PhotoSphereViewer.gyroscope-updated\n   * @throws {PSVError} if DeviceOrientationControls.js is missing\n   */\n  PhotoSphereViewer.prototype.startGyroscopeControl = function() {\n    if (PSVUtils.checkTHREE('DeviceOrientationControls')) {\n      return PhotoSphereViewer.SYSTEM.deviceOrientationSupported.then(function(supported) {\n        if (supported) {\n          this._stopAll();\n\n          this.doControls = new THREE.DeviceOrientationControls(this.camera);\n\n          // compute the alpha offset to keep the current orientation\n          this.doControls.alphaOffset = this.prop.position.longitude;\n          this.doControls.update();\n\n          var direction = this.camera.getWorldDirection(new THREE.Vector3());\n          var sphericalCoords = this.vector3ToSphericalCoords(direction);\n\n          this.prop.gyro_alpha_offset = sphericalCoords.longitude;\n\n          this.prop.orientation_cb = this._getOrientationUpdate();\n          this.on('before-render', this.prop.orientation_cb);\n\n          /**\n           * @event gyroscope-updated\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the gyroscope mode is enabled/disabled\n           * @param {boolean} enabled\n           */\n          this.trigger('gyroscope-updated', true);\n        }\n        else {\n          console.warn('PhotoSphereViewer: gyroscope not available');\n          return Promise.reject();\n        }\n      }.bind(this));\n    }\n    else {\n      throw new PSVError('Missing Three.js components: DeviceOrientationControls. Get them from three.js-examples package.');\n    }\n  };\n\n  /**\n   * @summary Create an animation callback for the orientation controls\n   * @returns {function}\n   * @private\n   */\n  PhotoSphereViewer.prototype._getOrientationUpdate = function() {\n    return function() {\n      this.doControls.alphaOffset = this.prop.gyro_alpha_offset;\n      this.doControls.update();\n\n      this.camera.getWorldDirection(this.prop.direction);\n      this.prop.direction.multiplyScalar(PhotoSphereViewer.SPHERE_RADIUS);\n\n      var sphericalCoords = this.vector3ToSphericalCoords(this.prop.direction);\n      this.prop.position.longitude = sphericalCoords.longitude;\n      this.prop.position.latitude = sphericalCoords.latitude;\n      this.needsUpdate();\n    };\n  };\n\n  /**\n   * @summary Disables the gyroscope navigation\n   * @fires PhotoSphereViewer.gyroscope-updated\n   */\n  PhotoSphereViewer.prototype.stopGyroscopeControl = function() {\n    if (this.isGyroscopeEnabled()) {\n      this.off('before-render', this.prop.orientation_cb);\n      this.prop.orientation_cb = null;\n\n      this.doControls.disconnect();\n      this.doControls = null;\n\n      this.trigger('gyroscope-updated', false);\n    }\n  };\n\n  /**\n   * @summary Enables or disables the gyroscope navigation\n   */\n  PhotoSphereViewer.prototype.toggleGyroscopeControl = function() {\n    if (this.isGyroscopeEnabled()) {\n      this.stopGyroscopeControl();\n    }\n    else {\n      this.startGyroscopeControl();\n    }\n  };\n\n  /**\n   * @summary Enables NoSleep.js\n   */\n  PhotoSphereViewer.prototype.startNoSleep = function() {\n    if (!('NoSleep' in window)) {\n      console.warn('PhotoSphereViewer: NoSleep is not available');\n      return;\n    }\n\n    if (!this.noSleep) {\n      this.noSleep = new NoSleep();\n    }\n\n    this.noSleep.enable();\n  };\n\n  /**\n   * @summary Disables NoSleep.js\n   */\n  PhotoSphereViewer.prototype.stopNoSleep = function() {\n    if (this.noSleep) {\n      this.noSleep.disable();\n    }\n  };\n\n  /**\n   * @summary Enables the stereo view\n   * @description\n   *  - enables NoSleep.js\n   *  - enables full screen\n   *  - starts gyroscope controle\n   *  - hides hud, navbar and panel\n   *  - instanciate StereoEffect\n   * @throws {PSVError} if StereoEffect.js is not available\n   */\n  PhotoSphereViewer.prototype.startStereoView = function() {\n    if (PSVUtils.checkTHREE('DeviceOrientationControls', 'StereoEffect')) {\n      // Need to be in the main event queue\n      this.startNoSleep();\n      this.enterFullscreen();\n      this.lockOrientation();\n\n      this.startGyroscopeControl().then(\n        function() {\n          this.stereoEffect = new THREE.StereoEffect(this.renderer);\n          this.needsUpdate();\n\n          this.hud.hide();\n          this.navbar.hide();\n          this.panel.hidePanel();\n\n          /**\n           * @event stereo-updated\n           * @memberof PhotoSphereViewer\n           * @summary Triggered when the stereo view is enabled/disabled\n           * @param {boolean} enabled\n           */\n          this.trigger('stereo-updated', true);\n\n          this.notification.showNotification({\n            content: this.config.lang.stereo_notification,\n            timeout: 3000\n          });\n        }.bind(this),\n        function() {\n          this.unlockOrientation();\n          this.exitFullscreen();\n          this.stopNoSleep();\n        }.bind(this)\n      );\n    }\n    else {\n      throw new PSVError('Missing Three.js components: StereoEffect, DeviceOrientationControls. Get them from three.js-examples package.');\n    }\n  };\n\n  /**\n   * @summary Disables the stereo view\n   */\n  PhotoSphereViewer.prototype.stopStereoView = function() {\n    if (this.isStereoEnabled()) {\n      this.stereoEffect = null;\n      this.needsUpdate();\n\n      this.hud.show();\n      this.navbar.show();\n\n      this.unlockOrientation();\n      this.exitFullscreen();\n      this.stopNoSleep();\n      this.stopGyroscopeControl();\n\n      this.trigger('stereo-updated', false);\n    }\n  };\n\n  /**\n   * @summary Tries to lock the device in landscape or display a message\n   */\n  PhotoSphereViewer.prototype.lockOrientation = function() {\n    var displayRotateMessageTimeout;\n\n    var displayRotateMessage = function() {\n      if (this.isStereoEnabled() && window.innerHeight > window.innerWidth) {\n        this.overlay.showOverlay({\n          image: PhotoSphereViewer.ICONS['mobile-rotate.svg'],\n          text: this.config.lang.please_rotate[0],\n          subtext: this.config.lang.please_rotate[1]\n        });\n      }\n\n      if (displayRotateMessageTimeout) {\n        window.clearTimeout(displayRotateMessageTimeout);\n      }\n    };\n\n    if (window.screen && window.screen.orientation) {\n      window.screen.orientation.lock('landscape').then(null, displayRotateMessage.bind(this));\n      displayRotateMessageTimeout = setTimeout(displayRotateMessage.bind(this), 500);\n    }\n    else {\n      displayRotateMessage.apply(this);\n    }\n  };\n\n  /**\n   * @summary Unlock the device orientation\n   */\n  PhotoSphereViewer.prototype.unlockOrientation = function() {\n    if (window.screen && window.screen.orientation) {\n      window.screen.orientation.unlock();\n    }\n    else {\n      this.overlay.hideOverlay();\n    }\n  };\n\n  /**\n   * @summary Enables or disables the stereo view\n   */\n  PhotoSphereViewer.prototype.toggleStereoView = function() {\n    if (this.isStereoEnabled()) {\n      this.stopStereoView();\n    }\n    else {\n      this.startStereoView();\n    }\n  };\n\n  /**\n   * @summary Rotates the view to specific longitude and latitude\n   * @param {PhotoSphereViewer.ExtendedPosition} position\n   * @param {boolean} [ignoreRange=false] - ignore longitude_range and latitude_range\n   * @fires PhotoSphereViewer._side-reached\n   * @fires PhotoSphereViewer.position-updated\n   */\n  PhotoSphereViewer.prototype.rotate = function(position, ignoreRange) {\n    this.cleanPosition(position);\n\n    if (!ignoreRange) {\n      /**\n       * @event _side-reached\n       * @memberof PhotoSphereViewer\n       * @param {string} side\n       * @private\n       */\n      this.applyRanges(position).forEach(\n        this.trigger.bind(this, '_side-reached')\n      );\n    }\n\n    this.prop.position.longitude = position.longitude;\n    this.prop.position.latitude = position.latitude;\n    this.needsUpdate();\n\n    /**\n     * @event position-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the view longitude and/or latitude changes\n     * @param {PhotoSphereViewer.Position} position\n     */\n    this.trigger('position-updated', this.getPosition());\n  };\n\n  /**\n   * @summary Rotates the view to specific longitude and latitude with a smooth animation\n   * @param {PhotoSphereViewer.AnimateOptions} options\n   * @param {string|int} [speed] - animation speed or duration (in milliseconds)\n   * @returns {PSVAnimation}\n   */\n  PhotoSphereViewer.prototype.animate = function(options, speed) {\n    this._stopAll();\n\n    var positionProvided = this.isExtendedPosition(options);\n    var zoomProvided = 'zoom' in options;\n\n    var animProperties = {};\n    var duration;\n\n    // clean/filter position and compute duration\n    if (positionProvided) {\n      this.cleanPosition(options);\n      this.applyRanges(options);\n\n      var currentPosition = this.prop.position;\n      var dLongitude = Math.abs(options.longitude - currentPosition.longitude);\n      var dLatitude = Math.abs(options.latitude - currentPosition.latitude);\n\n      if (dLongitude >= PhotoSphereViewer.ANGLE_THRESHOLD || dLatitude >= PhotoSphereViewer.ANGLE_THRESHOLD) {\n        // longitude offset for shortest arc\n        var tOffset = PSVUtils.getShortestArc(this.prop.position.longitude, options.longitude);\n\n        animProperties.longitude = { start: currentPosition.longitude, end: currentPosition.longitude + tOffset };\n        animProperties.latitude = { start: currentPosition.latitude, end: options.latitude };\n\n        duration = this.speedToDuration(speed, PSVUtils.getAngle(currentPosition, options));\n      }\n    }\n\n    // clean/filter zoom and compute duration\n    if (zoomProvided) {\n      var dZoom = Math.abs(options.zoom - this.prop.zoom_lvl);\n\n      if (dZoom >= 1) {\n        animProperties.zoom = { start: this.prop.zoom_lvl, end: options.zoom };\n\n        if (!duration) {\n          // if animating zoom only and a speed is given, use an arbitrary PI/2 to compute the duration\n          duration = this.speedToDuration(speed, Math.PI / 4 * dZoom / 100);\n        }\n      }\n    }\n\n    // if no animation needed\n    if (!duration) {\n      if (positionProvided) {\n        this.rotate(options);\n      }\n      if (zoomProvided) {\n        this.zoom(options.zoom);\n      }\n\n      return PSVAnimation.resolve();\n    }\n\n    this.prop.animation_promise = new PSVAnimation({\n      properties: animProperties,\n      duration: duration,\n      easing: 'inOutSine',\n      onTick: function(properties) {\n        if (positionProvided) {\n          this.rotate(properties, true);\n        }\n        if (zoomProvided) {\n          this.zoom(properties.zoom);\n        }\n      }.bind(this)\n    });\n\n    return this.prop.animation_promise;\n  };\n\n  /**\n   * @summary Stops the ongoing animation\n   * @description The return value is a Promise because the is no guaranty the animation can be stopped synchronously.\n   * @returns {Promise} Resolved when the animation has ben cancelled\n   */\n  PhotoSphereViewer.prototype.stopAnimation = function() {\n    if (this.prop.animation_promise) {\n      return new Promise(function(resolve) {\n        this.prop.animation_promise.finally(resolve);\n        this.prop.animation_promise.cancel();\n        this.prop.animation_promise = null;\n      }.bind(this));\n    }\n    else {\n      return Promise.resolve();\n    }\n  };\n\n  /**\n   * @summary Zooms to a specific level between `max_fov` and `min_fov`\n   * @param {int} level - new zoom level from 0 to 100\n   * @fires PhotoSphereViewer.zoom-updated\n   */\n  PhotoSphereViewer.prototype.zoom = function(level) {\n    this.prop.zoom_lvl = PSVUtils.bound(level, 0, 100);\n    this.prop.vFov = this.config.max_fov + (this.prop.zoom_lvl / 100) * (this.config.min_fov - this.config.max_fov);\n    this.prop.hFov = THREE.Math.radToDeg(2 * Math.atan(Math.tan(THREE.Math.degToRad(this.prop.vFov) / 2) * this.prop.aspect));\n    this.needsUpdate();\n\n    /**\n     * @event zoom-updated\n     * @memberof PhotoSphereViewer\n     * @summary Triggered when the zoom level changes\n     * @param {int} zoomLevel\n     */\n    this.trigger('zoom-updated', this.getZoomLevel());\n  };\n\n  /**\n   * @summary Increases the zoom level by 1\n   */\n  PhotoSphereViewer.prototype.zoomIn = function() {\n    if (this.prop.zoom_lvl < 100) {\n      this.zoom(this.prop.zoom_lvl + this.config.zoom_speed);\n    }\n  };\n\n  /**\n   * @summary Decreases the zoom level by 1\n   */\n  PhotoSphereViewer.prototype.zoomOut = function() {\n    if (this.prop.zoom_lvl > 0) {\n      this.zoom(this.prop.zoom_lvl - this.config.zoom_speed);\n    }\n  };\n\n  /**\n   * @summary Resizes the viewer\n   * @param {PhotoSphereViewer.CssSize} size\n   */\n  PhotoSphereViewer.prototype.resize = function(size) {\n    if (size.width) {\n      this.container.style.width = size.width;\n    }\n    if (size.height) {\n      this.container.style.height = size.height;\n    }\n\n    this._onResize();\n  };\n\n  PhotoSphereViewer.prototype.enterFullscreen = function() {\n    PSVUtils.requestFullscreen(this.container);\n  };\n\n  PhotoSphereViewer.prototype.exitFullscreen = function() {\n    if (this.isFullscreenEnabled()) {\n      PSVUtils.exitFullscreen();\n    }\n  };\n\n  /**\n   * @summary Enters or exits the fullscreen mode\n   */\n  PhotoSphereViewer.prototype.toggleFullscreen = function() {\n    if (!this.isFullscreenEnabled()) {\n      this.enterFullscreen();\n    }\n    else {\n      this.exitFullscreen();\n    }\n  };\n\n  /**\n   * @summary Enables the keyboard controls (done automatically when entering fullscreen)\n   */\n  PhotoSphereViewer.prototype.startKeyboardControl = function() {\n    window.addEventListener('keydown', this);\n  };\n\n  /**\n   * @summary Disables the keyboard controls (done automatically when exiting fullscreen)\n   */\n  PhotoSphereViewer.prototype.stopKeyboardControl = function() {\n    window.removeEventListener('keydown', this);\n  };\n\n  /**\n   * @summary Preload a panorama file without displaying it\n   * @param {string} panorama\n   * @returns {Promise}\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.preloadPanorama = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot preload panorama, cache_texture is disabled');\n    }\n\n    return this._loadTexture(panorama);\n  };\n\n  /**\n   * @summary Removes a panorama from the cache or clears the entire cache\n   * @param {string} [panorama]\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.clearPanoramaCache = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot clear cache, cache_texture is disabled');\n    }\n\n    if (panorama) {\n      for (var i = 0, l = this.prop.cache.length; i < l; i++) {\n        if (this.prop.cache[i].panorama === panorama) {\n          this.prop.cache.splice(i, 1);\n          break;\n        }\n      }\n    }\n    else {\n      this.prop.cache.length = 0;\n    }\n  };\n\n  /**\n   * @summary Retrieves the cache for a panorama\n   * @param {string} panorama\n   * @returns {PhotoSphereViewer.CacheItem}\n   * @throws {PSVError} when the cache is disabled\n   */\n  PhotoSphereViewer.prototype.getPanoramaCache = function(panorama) {\n    if (!this.config.cache_texture) {\n      throw new PSVError('Cannot query cache, cache_texture is disabled');\n    }\n\n    return this.prop.cache.filter(function(cache) {\n      return cache.panorama === panorama;\n    }).shift();\n  };\n\n\n  /**\n   * @summary exposes {@link PSVError}\n   * @memberof PhotoSphereViewer\n   * @readonly\n   */\n  PhotoSphereViewer.Error = PSVError;\n\n\n\n  return PhotoSphereViewer;\n});\ndefine('skylark-sphere/main',[\r\n\t\"./PhotoSphereViewer\"\r\n],function(PhotoSphereViewer){\r\n\treturn PhotoSphereViewer;\r\n});\ndefine('skylark-sphere', ['skylark-sphere/main'], function (main) { return main; });\n\n"]}